{"version":3,"sources":["../../scripts/update-local-ip-for-app.js"],"names":["os","require","fs","IPAddress","process","argv","undefined","interfaces","networkInterfaces","addresses","k","k2","address","family","internal","push","length","console","log","updateIPInFile","fileName","searchString","newContentOfLine","fileLines","readFileSync","split","index","indexOf","writeFileSync","join"],"mappings":"AAAA,GAAMA,IAAKC,QAAQ,IAAR,CAAX;AACA,GAAMC,IAAKD,QAAQ,IAAR,CAAX;;;AAGA,GAAIE,WAAYC,QAAQC,IAAR,CAAc,CAAd,CAAhB;;AAEA,GAAIF,WAAaG,SAAjB;AACA;;AAEE,GAAMC,YAAaP,GAAGQ,iBAAH,EAAnB;AACA,GAAMC,WAAY,EAAlB;AACA,IAAK,GAAIC,EAAT,GAAcH,WAAd;AACI,IAAK,GAAII,GAAT,GAAeJ,YAAWG,CAAX,CAAf;AACA;AACI,GAAME,SAAUL,WAAYG,CAAZ,EAAiBC,EAAjB,CAAhB;AACA,GAAKC,QAAQC,MAAR,GAAmB,MAAnB,EAA6B,CAACD,QAAQE,QAA3C;AACIL,UAAUM,IAAV,CAAeH,QAAQA,OAAvB;AACP,CANL;;AAQA,GAAIH,UAAUO,MAAV,EAAoB,CAAxB;AACEb,UAAYM,UAAW,CAAX,CAAZ;AACH;;AAED,GAAIN,WAAaG,SAAjB;AACA;AACEW,QAAQC,GAAR,CAAa,cAAgBf,SAA7B;AACAgB;AACE,+CADF;AAEE,+CAFF;AAGE,oDAAuDhB,SAAvD,CAAmE,iDAHrE;;AAKAgB;AACE,cADF;AAEE,iCAFF;AAGE,kCAAqChB,SAArC,CAAiD,iBAHnD;;AAKAgB;AACE,QADF;AAEE,OAFF;AAGE,QAAWhB,SAHb;;AAKD,CAlBD;;AAoBEc,QAAQC,GAAR,CAAa,iDAAb;;AAEF,QAASC,eAAT,CAAyBC,QAAzB,CAAmCC,YAAnC,CAAiDC,gBAAjD;AACA;AACE,GAAIC,WAAYrB,GAAGsB,YAAH,CAAiBJ,QAAjB,CAA2B,MAA3B,EAAoCK,KAApC,CAA2C,IAA3C,CAAhB;AACA,GAAIC,OAAQ,CAAZ;;AAEA,MAAOA,MAAQH,UAAUP,MAAzB;AACA;AACE,GAAIO,UAAWG,KAAX,EAAmBC,OAAnB,CAA4BN,YAA5B,EAA6C,CAAC,CAAlD;AACA;AACE,GAAIE,UAAWG,KAAX,GAAsBJ,gBAA1B;AACEL,QAAQC,GAAR,CAAa,IAAME,QAAN,CAAiB,yBAA9B,EADF;;AAGA;AACEG,UAAWG,KAAX,EAAqBJ,gBAArB;AACApB,GAAG0B,aAAH,CAAkBR,QAAlB,CAA4BG,UAAUM,IAAV,CAAgB,IAAhB,CAA5B;;AAEAZ,QAAQC,GAAR,CAAa,IAAME,QAAN,CAAiB,mCAAjB,CAAuDjB,SAApE;AACD;AACD;AACD,CAZD;;AAcEuB;AACH;AACF","file":"update-local-ip-for-app.js","sourcesContent":["const os = require('os');\nconst fs = require('fs');\n\n\nlet IPAddress = process.argv[ 2 ]\n\nif( IPAddress == undefined )\n{\n  // Find out IP address\n  const interfaces = os.networkInterfaces();\n  const addresses = [];\n  for (var k in interfaces)\n      for (var k2 in interfaces[k])\n      {\n          const address = interfaces[ k ][ k2 ];\n          if ( address.family === 'IPv4' && !address.internal )\n              addresses.push(address.address);\n      }\n\n  if( addresses.length >= 0 )\n    IPAddress = addresses[ 0 ]\n}\n\nif( IPAddress != undefined )\n{\n  console.log( \"IP Address:\" + IPAddress )\n  updateIPInFile(\n    './ios/UniversalRelayBoilerplate/AppDelegate.m',\n    'jsCodeLocation = [NSURL URLWithString:@\"http:',\n    '  jsCodeLocation = [NSURL URLWithString:@\"http://' +  IPAddress + ':8081/index.ios.bundle?platform=ios&dev=true\"];'\n  )\n  updateIPInFile(\n    './app/app.js',\n    'let graphQLServerURL = \"http://',\n    'let graphQLServerURL = \"http://' +  IPAddress + ':5555/graphql\";'\n  )\n  updateIPInFile(\n    './.env',\n    'HOST=',\n    'HOST=' +  IPAddress\n  )\n}\nelse\n  console.log( \"IP Address not specified and could not be found\" )\n\nfunction updateIPInFile( fileName, searchString, newContentOfLine )\n{\n  let fileLines = fs.readFileSync( fileName, 'utf8' ).split( '\\n' )\n  let index = 0\n\n  while( index < fileLines.length )\n  {\n    if( fileLines[ index ].indexOf( searchString ) > -1 )\n    {\n      if( fileLines[ index ] == newContentOfLine )\n        console.log( '[' + fileName + '] is already up to date' )\n      else\n      {\n        fileLines[ index ] = newContentOfLine;\n        fs.writeFileSync( fileName, fileLines.join( '\\n' ) )\n\n        console.log( '[' + fileName + '] has been updated with local IP ' + IPAddress )\n      }\n      break\n    }\n    else\n      index++\n  }\n}\n"]}