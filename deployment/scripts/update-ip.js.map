{"version":3,"sources":["../../scripts/update-ip.js"],"names":["require","load","port","process","env","PORT","IPAddress","argv","undefined","console","log","updateIPInFile","fileName","searchString","newContentOfLine","fileLines","readFileSync","split","index","length","indexOf","writeFileSync","join","err"],"mappings":";;AAEA,sB;;AAEA,qE;AACA,wC;;;AAGAA,QAAQ,QAAR,EAAkBC,IAAlB;;;AAGA,GAAMC,MAAOC,QAAQC,GAAR,CAAYC,IAAzB;;AAEA,GAAIC,WAAYH,QAAQI,IAAR,CAAa,CAAb,CAAhB;;AAEA,GAAID,WAAaE,SAAjB,CAA4BF,UAAY,0BAAZ;;AAE5B,GAAIA,WAAaE,SAAjB,CAA4B;AAC1BC,QAAQC,GAAR,CAAY,cAAgBJ,SAA5B;AACAK;AACE,mCAA6B,gBAD/B;AAEE,+CAFF;AAGE;AACEL,SADF;AAEE,iDALJ;;AAOAK;AACE,kCADF;AAEE,iBAFF;AAGE,6BAA+BL,SAA/B,CAA2C,GAA3C,CAAiDJ,IAAjD,CAAwD,GAH1D;;AAKAS;AACE,QADF;AAEE,aAFF;AAGE,qBAAuBL,SAAvB,CAAmC,GAAnC,CAAyCJ,IAH3C;;AAKAS,eAAe,QAAf,CAAyB,OAAzB,CAAkC,QAAUL,SAA5C;AACD,CApBD,IAoBOG,SAAQC,GAAR,CAAY,iDAAZ;;AAEP,QAASC,eAAT,CAAwBC,QAAxB,CAAkCC,YAAlC,CAAgDC,gBAAhD,CAAkE;AAChE,GAAI;AACF,GAAIC,WAAY,aAAGC,YAAH,CAAgBJ,QAAhB,CAA0B,MAA1B,EAAkCK,KAAlC,CAAwC,IAAxC,CAAhB;AACA,GAAIC,OAAQ,CAAZ;;AAEA,MAAOA,MAAQH,UAAUI,MAAzB,CAAiC;AAC/B,GAAIJ,UAAUG,KAAV,EAAiBE,OAAjB,CAAyBP,YAAzB,EAAyC,CAAC,CAA9C,CAAiD;AAC/C,GAAIE,UAAUG,KAAV,GAAoBJ,gBAAxB;AACEL,QAAQC,GAAR,CAAY,IAAME,QAAN,CAAiB,yBAA7B,EADF;AAEK;AACHG,UAAUG,KAAV,EAAmBJ,gBAAnB;AACA,aAAGO,aAAH,CAAiBT,QAAjB,CAA2BG,UAAUO,IAAV,CAAe,IAAf,CAA3B;;AAEAb,QAAQC,GAAR;AACE,IAAME,QAAN,CAAiB,mCAAjB,CAAuDN,SADzD;;AAGD;AACD;AACD,CAZD,IAYO;AACLY;AACD;AACF;AACF,CAAC,MAAOK,GAAP,CAAY;AACZd,QAAQC,GAAR;AACE;AACEE,QADF;AAEE,oDAFF;AAGEW,GAJJ;;AAMD;AACF","file":"update-ip.js","sourcesContent":["// @flow\n\nimport fs from \"fs\"\n\nimport AppRegistryName from \"../configuration/app/AppRegistryName\"\nimport getLocalIP from \"./getLocalIP\"\n\n// Read environment\nrequire(\"dotenv\").load()\n\n// Determine port currently used in .env - this will be the port set.\nconst port = process.env.PORT\n\nlet IPAddress = process.argv[2]\n\nif (IPAddress == undefined) IPAddress = getLocalIP()\n\nif (IPAddress != undefined) {\n  console.log(\"IP Address:\" + IPAddress)\n  updateIPInFile(\n    \"./ios/\" + AppRegistryName + \"/AppDelegate.m\",\n    'jsCodeLocation = [NSURL URLWithString:@\"http:',\n    '  jsCodeLocation = [NSURL URLWithString:@\"http://' +\n      IPAddress +\n      ':8081/index.ios.bundle?platform=ios&dev=true\"];',\n  )\n  updateIPInFile(\n    \"./configuration/app/publicURL.js\",\n    \"const publicURL\",\n    \"const publicURL = 'http://\" + IPAddress + \":\" + port + \"'\",\n  )\n  updateIPInFile(\n    \"./.env\",\n    \"PUBLIC_URL=\",\n    \"PUBLIC_URL=http://\" + IPAddress + \":\" + port,\n  )\n  updateIPInFile(\"./.env\", \"HOST=\", \"HOST=\" + IPAddress)\n} else console.log(\"IP Address not specified and could not be found\")\n\nfunction updateIPInFile(fileName, searchString, newContentOfLine) {\n  try {\n    let fileLines = fs.readFileSync(fileName, \"utf8\").split(\"\\n\")\n    let index = 0\n\n    while (index < fileLines.length) {\n      if (fileLines[index].indexOf(searchString) > -1) {\n        if (fileLines[index] == newContentOfLine)\n          console.log(\"[\" + fileName + \"] is already up to date\")\n        else {\n          fileLines[index] = newContentOfLine\n          fs.writeFileSync(fileName, fileLines.join(\"\\n\"))\n\n          console.log(\n            \"[\" + fileName + \"] has been updated with local IP \" + IPAddress,\n          )\n        }\n        break\n      } else {\n        index++\n      }\n    }\n  } catch (err) {\n    console.log(\n      \"[\" +\n        fileName +\n        \"] has not been been updated with local IP because \" +\n        err,\n    )\n  }\n}\n"]}