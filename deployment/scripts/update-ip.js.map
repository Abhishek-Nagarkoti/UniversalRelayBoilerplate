{"version":3,"sources":["../../scripts/update-ip.js"],"names":["require","load","port","process","env","PORT","IPAddress","argv","undefined","console","log","updateIPInFile","fileName","searchString","newContentOfLine","fileLines","readFileSync","split","index","length","indexOf","writeFileSync","join","err"],"mappings":"AAAA,sB;;AAEA,qE;AACA,wC;;;AAGAA,QAAS,QAAT,EAAoBC,IAApB;;;;AAIA,GAAMC,MAAOC,QAAQC,GAAR,CAAYC,IAAZ,EAAoB,IAAjC;;AAEA,GAAIC,WAAYH,QAAQI,IAAR,CAAc,CAAd,CAAhB;;AAEA,GAAID,WAAaE,SAAjB;AACEF,UAAY,0BAAZ;;AAEF,GAAIA,WAAaE,SAAjB,CAA6B;AAC3BC,QAAQC,GAAR,CAAa,cAAgBJ,SAA7B;AACAK;AACE,mCAA6B,gBAD/B;AAEE,+CAFF;AAGE,oDAAsDL,SAAtD,CAAkE,iDAHpE;;AAKAK;AACE,kCADF;AAEE,iBAFF;AAGE,8BAAgCL,SAAhC,CAA4C,GAA5C,CAAkDJ,IAAlD,CAAyD,IAH3D;;AAKAS;AACE,QADF;AAEE,aAFF;AAGE,qBAAuBL,SAAvB,CAAmC,GAAnC,CAAyCJ,IAH3C;;AAKAS;AACE,QADF;AAEE,OAFF;AAGE,QAAUL,SAHZ;;AAKD,CAtBD;AAuBEG,QAAQC,GAAR,CAAa,iDAAb;;AAEF,QAASC,eAAT,CAAyBC,QAAzB,CAAmCC,YAAnC,CAAiDC,gBAAjD,CAAoE;;AAElE,GAAI;;AAEF,GAAIC,WAAY,aAAGC,YAAH,CAAiBJ,QAAjB,CAA2B,MAA3B,EAAoCK,KAApC,CAA2C,IAA3C,CAAhB;AACA,GAAIC,OAAQ,CAAZ;;AAEA,MAAOA,MAAQH,UAAUI,MAAzB,CAAkC;AAChC,GAAIJ,UAAWG,KAAX,EAAmBE,OAAnB,CAA4BP,YAA5B,EAA6C,CAAC,CAAlD,CAAsD;AACpD,GAAIE,UAAWG,KAAX,GAAsBJ,gBAA1B;AACEL,QAAQC,GAAR,CAAa,IAAME,QAAN,CAAiB,yBAA9B,EADF;AAEK;AACHG,UAAWG,KAAX,EAAqBJ,gBAArB;AACA,aAAGO,aAAH,CAAkBT,QAAlB,CAA4BG,UAAUO,IAAV,CAAgB,IAAhB,CAA5B;;AAEAb,QAAQC,GAAR,CAAa,IAAME,QAAN,CAAiB,mCAAjB,CAAuDN,SAApE;AACD;AACD;AACD,CAVD,IAUO;AACLY;AACD;AACF;;AAEF,CAAC,MAAOK,GAAP,CAAa;;AAEbd,QAAQC,GAAR,CAAa,IAAME,QAAN,CAAiB,oDAAjB,CAAwEW,GAArF;AACD;AACF","file":"update-ip.js","sourcesContent":["import fs from 'fs'\n\nimport AppRegistryName from '../configuration/app/AppRegistryName'\nimport getLocalIP from './getLocalIP'\n\n// Read environment\nrequire( 'dotenv' ).load()\n\n\n// Determine port currently used in .env - this will be the port set. Use 4444 as default\nconst port = process.env.PORT || 4444\n\nlet IPAddress = process.argv[ 2 ]\n\nif( IPAddress == undefined )\n  IPAddress = getLocalIP()\n\nif( IPAddress != undefined ) {\n  console.log( \"IP Address:\" + IPAddress )\n  updateIPInFile(\n    './ios/' + AppRegistryName + '/AppDelegate.m',\n    'jsCodeLocation = [NSURL URLWithString:@\"http:',\n    '  jsCodeLocation = [NSURL URLWithString:@\"http://' + IPAddress + ':8081/index.ios.bundle?platform=ios&dev=true\"];'\n  )\n  updateIPInFile(\n    './configuration/app/publicURL.js',\n    'const publicURL',\n    'const publicURL = \\'http://' + IPAddress + ':' + port + '\\''\n  )\n  updateIPInFile(\n    './.env',\n    'PUBLIC_URL=',\n    'PUBLIC_URL=http://' + IPAddress + ':' + port\n  )\n  updateIPInFile(\n    './.env',\n    'HOST=',\n    'HOST=' + IPAddress\n  )\n} else\n  console.log( \"IP Address not specified and could not be found\" )\n\nfunction updateIPInFile( fileName, searchString, newContentOfLine ) {\n\n  try {\n\n    let fileLines = fs.readFileSync( fileName, 'utf8' ).split( '\\n' )\n    let index = 0\n\n    while( index < fileLines.length ) {\n      if( fileLines[ index ].indexOf( searchString ) > -1 ) {\n        if( fileLines[ index ] == newContentOfLine )\n          console.log( '[' + fileName + '] is already up to date' )\n        else {\n          fileLines[ index ] = newContentOfLine\n          fs.writeFileSync( fileName, fileLines.join( '\\n' ) )\n\n          console.log( '[' + fileName + '] has been updated with local IP ' + IPAddress )\n        }\n        break\n      } else {\n        index++\n      }\n    }\n\n  } catch( err ) {\n\n    console.log( '[' + fileName + '] has not been been updated with local IP because ' + err )\n  }\n}\n"]}