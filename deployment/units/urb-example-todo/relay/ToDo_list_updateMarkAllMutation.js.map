{"version":3,"sources":["../../../../units/urb-example-todo/relay/ToDo_list_updateMarkAllMutation.js"],"names":["ToDo_list_updateMarkAllMutation","type","fieldIDs","Viewer","props","id","ToDo_Complete","ViewerPayload","ToDos","edges","filter","edge","node","map","ToDo_TotalCount","ToDo_CompletedCount","Mutation","fragments"],"mappings":";;AAEA,uC;;AAEqBA,+B;;;;;;;;;;;;;;;;;;;;AAoBL;AACZ;AACD,C;AACa;AACZ;;;;;;;;AAQD,C;AACY;AACX,MAAO;AACL;AACEC,KAAM,eADR;AAEEC,SAAU;AACRC,OAAQ,KAAKC,KAAL,CAAWD,MAAX,CAAkBE,EADlB,CAFZ,CADK,CAAP;;;;AAQD,C;AACc;AACb,MAAO;AACLC,cAAe,KAAKF,KAAL,CAAWE,aADrB,CAAP;;AAGD,C;AACuB;AACtB,GAAIC,eAAgB,CAAEF,GAAI,KAAKD,KAAL,CAAWD,MAAX,CAAkBE,EAAxB,CAApB;AACA,GAAI,KAAKD,KAAL,CAAWI,KAAX,EAAoB,KAAKJ,KAAL,CAAWI,KAAX,CAAiBC,KAAzC,CAAgD;AAC9CF,cAAcC,KAAd,CAAsB;AACpBC,MAAO,KAAKL,KAAL,CAAWI,KAAX,CAAiBC,KAAjB;AACJC,MADI,CACG,qBAAQC,MAAKC,IAAL,CAAUN,aAAV,GAA4B,OAAKF,KAAL,CAAWE,aAA/C,EADH;AAEJO,GAFI,CAEA,qBAAS;AACZD,KAAM;AACJN,cAAe,OAAKF,KAAL,CAAWE,aADtB;AAEJD,GAAIM,KAAKC,IAAL,CAAUP,EAFV,CADM,CAAT,EAFA,CADa,CAAtB;;;;AAUD;AACD,GAAI,KAAKD,KAAL,CAAWD,MAAX,CAAkBW,eAAlB,EAAqC,IAAzC,CAA+C;AAC7CP,cAAcQ,mBAAd,CAAoC,KAAKX,KAAL,CAAWE,aAAX;AAChC,KAAKF,KAAL,CAAWD,MAAX,CAAkBW,eADc;AAEhC,CAFJ;AAGD;AACD,MAAO;AACLX,OAAQI,aADH,CAAP;;AAGD,C,6CAtE0D,qBAAMS,Q,EAA9ChB,+B,CACZiB,S,CAAY,CAEjBT,MAAO,0gCAFU,CAYjBL,OAAQ,mUAZS,C,iBADAH,+B","file":"ToDo_list_updateMarkAllMutation.js","sourcesContent":["// @flow\n\nimport Relay from 'react-relay'\n\nexport default class ToDo_list_updateMarkAllMutation extends Relay.Mutation {\n  static fragments = {\n    // TODO: Mark edges and ToDo_TotalCount optional\n    ToDos: () => Relay.QL`\n      fragment on ToDosConnection {\n        edges {\n          node {\n            ToDo_Complete,\n            id,\n          },\n        },\n      }\n    `,\n    Viewer: () => Relay.QL`\n      fragment on Viewer {\n        id,\n        ToDo_TotalCount,\n      }\n    `,\n  }\n  getMutation() {\n    return Relay.QL`mutation{ToDo_list_updateMarkAll}`\n  }\n  getFatQuery() {\n    return Relay.QL`\n      fragment on ToDo_list_updateMarkAllPayload {\n        Viewer {\n          ToDo_CompletedCount,\n          ToDos,\n        },\n      }\n    `\n  }\n  getConfigs() {\n    return [\n      {\n        type: 'FIELDS_CHANGE',\n        fieldIDs: {\n          Viewer: this.props.Viewer.id,\n        },\n      },\n    ]\n  }\n  getVariables() {\n    return {\n      ToDo_Complete: this.props.ToDo_Complete,\n    }\n  }\n  getOptimisticResponse() {\n    var ViewerPayload = { id: this.props.Viewer.id }\n    if (this.props.ToDos && this.props.ToDos.edges) {\n      ViewerPayload.ToDos = {\n        edges: this.props.ToDos.edges\n          .filter(edge => edge.node.ToDo_Complete !== this.props.ToDo_Complete)\n          .map(edge => ({\n            node: {\n              ToDo_Complete: this.props.ToDo_Complete,\n              id: edge.node.id,\n            },\n          })),\n      }\n    }\n    if (this.props.Viewer.ToDo_TotalCount != null) {\n      ViewerPayload.ToDo_CompletedCount = this.props.ToDo_Complete\n        ? this.props.Viewer.ToDo_TotalCount\n        : 0\n    }\n    return {\n      Viewer: ViewerPayload,\n    }\n  }\n}\n"]}