{"version":3,"sources":["../../../../../units/urb-example-todo/graphql/mutation/ToDo_list_updateMarkAll.js"],"names":["name","inputFields","ToDo_Complete","type","outputFields","changedToDos","resolve","args","context","arr_local_ids_Changed_ToDos","objectManager","rootValue","map","getOneObject","id","local_id","Viewer","parent","getViewerUserId","mutateAndGetPayload","then"],"mappings":";;AAEA;AACA;;AAEA,0E;AACA,0C;AACA,+D;;;AAGe,+CAA8B;AAC3CA,KAAM,yBADqC;AAE3CC,YAAa;AACXC,cAAe,CAAEC,KAAM,oDAAR,CADJ,CAF8B;;AAK3CC,aAAc;AACZC,aAAc;AACZF,KAAM,4CADM;AAEZG,QAAS,sBAAmCC,IAAnC,CAAyCC,OAAzC,WAAIC,4BAAJ,MAAIA,2BAAJ,IAA+DC,cAA/D,OAAoDC,SAApD,OAAoFF,6BAA4BG,GAA5B,CAAiC,yBAAYF,eAAcG,YAAd,CAA4B,MAA5B,CAAoC,CAAEC,GAAIC,QAAN,CAApC,CAAZ,EAAjC,CAApF,EAFG,CADF;;AAKZC,OAAQ;AACNb,yBADM;AAENG,QAAS,iBAAEW,MAAF,CAAUV,IAAV,CAAgBC,OAAhB,WAAsCE,cAAtC,OAA2BC,SAA3B,OAA2DD,eAAcG,YAAd,CAA4B,MAA5B,CAAoC,CAAEC,GAAIJ,cAAcQ,eAAd,EAAN,CAApC,CAA3D,EAFH,CALI,CAL6B;;;AAe3CC,oBAAqB,mCAAqBX,OAArB,OAAgE,IAA5DN,cAA4D,OAA5DA,aAA4D,IAArBQ,cAAqB,OAAhCC,SAAgC;AACnF,MAAO,sCAAyBD,aAAzB,CAAwCR,aAAxC;AACJkB,IADI,CACE,SAAEX,2BAAF,QAAqC,CAAEA,uDAAF,CAArC,EADF,CAAP;AAED,CAlB0C,CAA9B,C","file":"ToDo_list_updateMarkAll.js","sourcesContent":["// @flow weak\n\nimport { mutationWithClientMutationId } from 'graphql-relay'\nimport { GraphQLBoolean, GraphQLList, GraphQLNonNull } from 'graphql'\n\nimport ToDo_list_updateMarkAll from '../helper/ToDo_list_updateMarkAll'\nimport ToDoType from '../type/ToDoType'\nimport ViewerType from '../../../../graphql/type/ViewerType'\n\n\nexport default mutationWithClientMutationId( {\n  name: 'ToDo_list_updateMarkAll',\n  inputFields: {\n    ToDo_Complete: { type: new GraphQLNonNull( GraphQLBoolean ) },\n  },\n  outputFields: {\n    changedToDos: {\n      type: new GraphQLList( ToDoType ),\n      resolve: ( { arr_local_ids_Changed_ToDos }, args, context, { rootValue: objectManager } ) => arr_local_ids_Changed_ToDos.map( local_id => objectManager.getOneObject( 'ToDo', { id: local_id } ) ),\n    },\n    Viewer: {\n      type: ViewerType,\n      resolve: ( parent, args, context, { rootValue: objectManager } ) => objectManager.getOneObject( 'User', { id: objectManager.getViewerUserId() } )\n    },\n  },\n  mutateAndGetPayload: ( { ToDo_Complete }, context, { rootValue: objectManager } ) => {\n    return ToDo_list_updateMarkAll( objectManager, ToDo_Complete )\n      .then( ( arr_local_ids_Changed_ToDos ) => ( { arr_local_ids_Changed_ToDos } ) )\n  }\n} )\n"]}