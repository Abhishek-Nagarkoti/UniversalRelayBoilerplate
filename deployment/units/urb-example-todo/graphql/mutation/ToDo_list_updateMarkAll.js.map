{"version":3,"sources":["../../../../../units/urb-example-todo/graphql/mutation/ToDo_list_updateMarkAll.js"],"names":["name","inputFields","ToDo_Complete","type","outputFields","changedToDos","resolve","args","context","arr_local_ids_Changed_ToDos","objectManager","rootValue","map","getOneObject","id","local_id","Viewer","parent","getViewerUserId","mutateAndGetPayload","then"],"mappings":";;AAEA;AACA;;AAEA,0E;AACA,0C;AACA,+D;;AAEe,+CAA6B;AAC1CA,KAAM,yBADoC;AAE1CC,YAAa;AACXC,cAAe,CAAEC,KAAM,oDAAR,CADJ,CAF6B;;AAK1CC,aAAc;AACZC,aAAc;AACZF,KAAM,4CADM;AAEZG,QAAS,sBAAkCC,IAAlC,CAAwCC,OAAxC,WAAGC,4BAAH,MAAGA,2BAAH,IAA8DC,cAA9D,OAAmDC,SAAnD;AACPF,4BAA4BG,GAA5B,CAAgC;AAC9BF,cAAcG,YAAd,CAA2B,MAA3B,CAAmC,CAAEC,GAAIC,QAAN,CAAnC,CAD8B,GAAhC,CADO,GAFG,CADF;;;AAQZC,OAAQ;AACNb,yBADM;AAENG,QAAS,iBAACW,MAAD,CAASV,IAAT,CAAeC,OAAf,WAAqCE,cAArC,OAA0BC,SAA1B;AACPD,cAAcG,YAAd,CAA2B,MAA3B,CAAmC,CAAEC,GAAIJ,cAAcQ,eAAd,EAAN,CAAnC,CADO,GAFH,CARI,CAL4B;;;AAmB1CC,oBAAqB,mCAAoBX,OAApB,OAA8D,IAA3DN,cAA2D,OAA3DA,aAA2D,IAApBQ,cAAoB,OAA/BC,SAA+B;AACjF,MAAO;AACLD,aADK;AAELR,aAFK;AAGLkB,IAHK,CAGA,4CAAgC,CAAEX,uDAAF,CAAhC,EAHA,CAAP;AAID,CAxByC,CAA7B,C","file":"ToDo_list_updateMarkAll.js","sourcesContent":["// @flow\n\nimport { mutationWithClientMutationId } from 'graphql-relay'\nimport { GraphQLBoolean, GraphQLList, GraphQLNonNull } from 'graphql'\n\nimport ToDo_list_updateMarkAll from '../helper/ToDo_list_updateMarkAll'\nimport ToDoType from '../type/ToDoType'\nimport ViewerType from '../../../../graphql/type/ViewerType'\n\nexport default mutationWithClientMutationId({\n  name: 'ToDo_list_updateMarkAll',\n  inputFields: {\n    ToDo_Complete: { type: new GraphQLNonNull(GraphQLBoolean) },\n  },\n  outputFields: {\n    changedToDos: {\n      type: new GraphQLList(ToDoType),\n      resolve: ({ arr_local_ids_Changed_ToDos }, args, context, { rootValue: objectManager }) =>\n        arr_local_ids_Changed_ToDos.map(local_id =>\n          objectManager.getOneObject('ToDo', { id: local_id }),\n        ),\n    },\n    Viewer: {\n      type: ViewerType,\n      resolve: (parent, args, context, { rootValue: objectManager }) =>\n        objectManager.getOneObject('User', { id: objectManager.getViewerUserId() }),\n    },\n  },\n  mutateAndGetPayload: ({ ToDo_Complete }, context, { rootValue: objectManager }) => {\n    return ToDo_list_updateMarkAll(\n      objectManager,\n      ToDo_Complete,\n    ).then(arr_local_ids_Changed_ToDos => ({ arr_local_ids_Changed_ToDos }))\n  },\n})\n"]}