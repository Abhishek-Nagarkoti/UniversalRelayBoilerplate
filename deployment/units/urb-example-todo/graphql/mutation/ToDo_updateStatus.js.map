{"version":3,"sources":["../../../../../units/urb-example-todo/graphql/mutation/ToDo_updateStatus.js"],"names":["name","inputFields","ToDo_Complete","type","id","outputFields","ToDo","resolve","context","local_id","args","objectManager","rootValue","getOneObject","Viewer","parent","getViewerUserId","mutateAndGetPayload","update","then"],"mappings":";;AAEA;AACA;;AAEA,0C;AACA,+D;;;AAGe,+CAA8B;AAC3CA,KAAM,mBADqC;AAE3CC,YAAa;AACXC,cAAe,CAAEC,KAAM,oDAAR,CADJ;AAEXC,GAAI,CAAED,KAAM,+CAAR,CAFO,CAF8B;;AAM3CE,aAAc;AACZC,KAAM;AACJH,uBADI;AAEJI,QAAS,4BAA4BC,OAA5B,WAAIC,SAAJ,MAAIA,QAAJ,IAAoBC,KAApB,uCAAkDC,cAAlD,OAAuCC,SAAvC,OAAuED,eAAcE,YAAd,CAA4B,MAA5B,CAAoC,CAAET,GAAIK,QAAN,CAApC,CAAvE,EAFL,CADM;;AAKZK,OAAQ;AACNX,yBADM;AAENI,QAAS,iBAAEQ,MAAF,CAAUL,IAAV,CAAgBF,OAAhB,WAAsCG,cAAtC,OAA2BC,SAA3B,OAA2DD,eAAcE,YAAd,CAA4B,MAA5B,CAAoC,CAAET,GAAIO,cAAcK,eAAd,EAAN,CAApC,CAA3D,EAFH,CALI,CAN6B;;;AAgB3CC,oBAAqB,mCAAyBT,OAAzB,OAAoE,IAAhEJ,GAAgE,OAAhEA,EAAgE,CAA5DF,aAA4D,OAA5DA,aAA4D,IAArBS,cAAqB,OAAhCC,SAAgC;AACvF,GAAIH,UAAW,+BAAcL,EAAd,EAAmBA,EAAlC;AACA,MAAOO,eAAcO,MAAd,CAAsB,MAAtB,CAA8B;AACjCd,GAAIK,QAD6B;AAEjCP,2BAFiC,CAA9B;;AAIJiB,IAJI,CAIE,iBAAQ,CAAEV,iBAAF,CAAR,EAJF,CAAP;AAKD,CAvB0C,CAA9B,C","file":"ToDo_updateStatus.js","sourcesContent":["// @flow weak\n\nimport { fromGlobalId, mutationWithClientMutationId } from 'graphql-relay'\nimport { GraphQLBoolean, GraphQLID, GraphQLNonNull } from 'graphql'\n\nimport ToDoType from '../type/ToDoType'\nimport ViewerType from '../../../../graphql/type/ViewerType'\n\n\nexport default mutationWithClientMutationId( {\n  name: 'ToDo_updateStatus',\n  inputFields: {\n    ToDo_Complete: { type: new GraphQLNonNull( GraphQLBoolean ) },\n    id: { type: new GraphQLNonNull( GraphQLID ) },\n  },\n  outputFields: {\n    ToDo: {\n      type: ToDoType,\n      resolve: ( { local_id }, {...args }, context, { rootValue: objectManager } ) => objectManager.getOneObject( 'ToDo', { id: local_id } ),\n    },\n    Viewer: {\n      type: ViewerType,\n      resolve: ( parent, args, context, { rootValue: objectManager } ) => objectManager.getOneObject( 'User', { id: objectManager.getViewerUserId() } )\n    },\n  },\n  mutateAndGetPayload: ( { id, ToDo_Complete }, context, { rootValue: objectManager } ) => {\n    var local_id = fromGlobalId( id ).id\n    return objectManager.update( 'ToDo', {\n        id: local_id,\n        ToDo_Complete\n      } )\n      .then( () => ( { local_id } ) )\n  },\n} )\n"]}