{"version":3,"sources":["../../../../../units/urb-example-todo/graphql/mutation/ToDo_updateStatus.js"],"names":["name","inputFields","ToDo_Complete","type","id","outputFields","ToDo","resolve","context","local_id","args","objectManager","rootValue","getOneObject","Viewer","parent","getViewerUserId","mutateAndGetPayload","update","then"],"mappings":";;AAEA;AACA;;AAEA,0C;AACA,+D;;AAEe,+CAA6B;AAC1CA,KAAM,mBADoC;AAE1CC,YAAa;AACXC,cAAe,CAAEC,KAAM,oDAAR,CADJ;AAEXC,GAAI,CAAED,KAAM,+CAAR,CAFO,CAF6B;;AAM1CE,aAAc;AACZC,KAAM;AACJH,uBADI;AAEJI,QAAS,4BAA4BC,OAA5B,WAAGC,SAAH,MAAGA,QAAH,IAAoBC,KAApB,uCAAkDC,cAAlD,OAAuCC,SAAvC;AACPD,cAAcE,YAAd,CAA2B,MAA3B,CAAmC,CAAET,GAAIK,QAAN,CAAnC,CADO,GAFL,CADM;;AAMZK,OAAQ;AACNX,yBADM;AAENI,QAAS,iBAACQ,MAAD,CAASL,IAAT,CAAeF,OAAf,WAAqCG,cAArC,OAA0BC,SAA1B;AACPD,cAAcE,YAAd,CAA2B,MAA3B,CAAmC,CAAET,GAAIO,cAAcK,eAAd,EAAN,CAAnC,CADO,GAFH,CANI,CAN4B;;;AAkB1CC,oBAAqB,mCAAwBT,OAAxB,OAAkE,IAA/DJ,GAA+D,OAA/DA,EAA+D,CAA3DF,aAA2D,OAA3DA,aAA2D,IAApBS,cAAoB,OAA/BC,SAA+B;AACrF,GAAIH,UAAW,+BAAaL,EAAb,EAAiBA,EAAhC;AACA,MAAOO;AACJO,MADI,CACG,MADH,CACW;AACdd,GAAIK,QADU;AAEdP,2BAFc,CADX;;AAKJiB,IALI,CAKC,iBAAO,CAAEV,iBAAF,CAAP,EALD,CAAP;AAMD,CA1ByC,CAA7B,C","file":"ToDo_updateStatus.js","sourcesContent":["// @flow\n\nimport { fromGlobalId, mutationWithClientMutationId } from 'graphql-relay'\nimport { GraphQLBoolean, GraphQLID, GraphQLNonNull } from 'graphql'\n\nimport ToDoType from '../type/ToDoType'\nimport ViewerType from '../../../../graphql/type/ViewerType'\n\nexport default mutationWithClientMutationId({\n  name: 'ToDo_updateStatus',\n  inputFields: {\n    ToDo_Complete: { type: new GraphQLNonNull(GraphQLBoolean) },\n    id: { type: new GraphQLNonNull(GraphQLID) },\n  },\n  outputFields: {\n    ToDo: {\n      type: ToDoType,\n      resolve: ({ local_id }, { ...args }, context, { rootValue: objectManager }) =>\n        objectManager.getOneObject('ToDo', { id: local_id }),\n    },\n    Viewer: {\n      type: ViewerType,\n      resolve: (parent, args, context, { rootValue: objectManager }) =>\n        objectManager.getOneObject('User', { id: objectManager.getViewerUserId() }),\n    },\n  },\n  mutateAndGetPayload: ({ id, ToDo_Complete }, context, { rootValue: objectManager }) => {\n    var local_id = fromGlobalId(id).id\n    return objectManager\n      .update('ToDo', {\n        id: local_id,\n        ToDo_Complete,\n      })\n      .then(() => ({ local_id }))\n  },\n})\n"]}