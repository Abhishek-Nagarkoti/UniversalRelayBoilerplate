{"version":3,"sources":["../../../../../units/urb-example-todo/graphql/mutation/ToDo_add.js"],"names":["name","inputFields","ToDo_Text","type","outputFields","ToDosEdge","edgeType","resolve","context","local_id","args","objectManager","rootValue","an_Object","getOneObject","id","then","retrieved_Object","getObjectList","ToDo_User_id","getViewerUserId","cursor","cursorForObjectInConnection","arr","node","Viewer","parent","mutateAndGetPayload","add","ToDo_Complete"],"mappings":";;AAEA;AACA;;AAEA,wD;AACA,+D;;AAEe,+CAA6B;AAC1CA,KAAM,UADoC;AAE1CC,YAAa;AACXC,UAAW,CAAEC,KAAM,mDAAR,CADA,CAF6B;;AAK1CC,aAAc;AACZC,UAAW;AACTF,KAAM,0BAAgBG,QADb;AAETC,QAAS,4BAA4BC,OAA5B,OAAsE,IAAnEC,SAAmE,MAAnEA,QAAmE,IAAlDC,KAAkD,uCAApBC,cAAoB,OAA/BC,SAA+B;AAC7E,GAAIC,iBAAJ;AACA,MAAOF;AACJG,YADI,CACS,MADT,CACiB,CAAEC,GAAIN,QAAN,CADjB;AAEJO,IAFI,CAEC,0BAAoB;AACxBH,UAAYI,gBAAZ;AACD,CAJI;AAKJD,IALI,CAKC;AACJL,cAAcO,aAAd,CAA4B,MAA5B,CAAoC,CAAEC,aAAcR,cAAcS,eAAd,EAAhB,CAApC,CADI,GALD;;AAQJJ,IARI,CAQC,oBAAQ;AACZK,OAAQV,cAAcW,2BAAd,CAA0C,MAA1C,CAAkDC,GAAlD,CAAuDV,SAAvD,CADI;AAEZW,KAAMX,SAFM,CAAR,EARD,CAAP;;AAYD,CAhBQ,CADC;;AAmBZY,OAAQ;AACNtB,yBADM;AAENI,QAAS,iBAACmB,MAAD,CAAShB,IAAT,CAAeF,OAAf,WAAqCG,cAArC,OAA0BC,SAA1B;AACPD,cAAcG,YAAd,CAA2B,MAA3B,CAAmC,CAAEC,GAAIJ,cAAcS,eAAd,EAAN,CAAnC,CADO,GAFH,CAnBI,CAL4B;;;AA8B1CO,oBAAqB,mCAAgBnB,OAAhB,WAAGN,UAAH,OAAGA,SAAH,IAAsCS,cAAtC,OAA2BC,SAA3B;AACnBD;AACGiB,GADH,CACO,MADP,CACe;AACXT,aAAcR,cAAcS,eAAd,EADH;AAEXlB,mBAFW;AAGX2B,cAAe,KAHJ,CADf;;AAMGb,IANH,CAMQ,yBAAa,CAAEP,iBAAF,CAAb,EANR,CADmB,GA9BqB,CAA7B,C","file":"ToDo_add.js","sourcesContent":["// @flow\n\nimport { mutationWithClientMutationId } from 'graphql-relay'\nimport { GraphQLString, GraphQLNonNull } from 'graphql'\n\nimport ToDosConnection from '../type/ToDosConnection'\nimport ViewerType from '../../../../graphql/type/ViewerType'\n\nexport default mutationWithClientMutationId({\n  name: 'ToDo_add',\n  inputFields: {\n    ToDo_Text: { type: new GraphQLNonNull(GraphQLString) },\n  },\n  outputFields: {\n    ToDosEdge: {\n      type: ToDosConnection.edgeType,\n      resolve: ({ local_id }, { ...args }, context, { rootValue: objectManager }) => {\n        let an_Object\n        return objectManager\n          .getOneObject('ToDo', { id: local_id })\n          .then(retrieved_Object => {\n            an_Object = retrieved_Object\n          })\n          .then(() =>\n            objectManager.getObjectList('ToDo', { ToDo_User_id: objectManager.getViewerUserId() }),\n          )\n          .then(arr => ({\n            cursor: objectManager.cursorForObjectInConnection('ToDo', arr, an_Object),\n            node: an_Object,\n          }))\n      },\n    },\n    Viewer: {\n      type: ViewerType,\n      resolve: (parent, args, context, { rootValue: objectManager }) =>\n        objectManager.getOneObject('User', { id: objectManager.getViewerUserId() }),\n    },\n  },\n  mutateAndGetPayload: ({ ToDo_Text }, context, { rootValue: objectManager }) =>\n    objectManager\n      .add('ToDo', {\n        ToDo_User_id: objectManager.getViewerUserId(),\n        ToDo_Text,\n        ToDo_Complete: false,\n      })\n      .then(local_id => ({ local_id })),\n})\n"]}