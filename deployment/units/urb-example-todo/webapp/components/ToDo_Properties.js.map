{"version":3,"sources":["../../../../../units/urb-example-todo/webapp/components/ToDo_Properties.jsx"],"names":["ToDo_Properties","props","context","_handle_onTouchTap_Close","setState","Dialog_IsOpen","_handle_onTouchTap_OK","updateHandler","ToDo_Text","refs","getValue","state","Component","propTypes","PropTypes","string","isRequired","func"],"mappings":";;AAEA,4B;;AAEA,0C;AACA,kD;AACA,gD;;AAEqBA,e;;;;;;AAMnB,yBAAYC,KAAZ,CAAwBC,OAAxB,CAAiC;AACzBD,KADyB,CAClBC,OADkB;;;;;;;;;;;AAYjCC,wBAZiC,CAYN,UAAM;AAC/B,MAAKC,QAAL,CAAc,CAAEC,cAAe,KAAjB,CAAd;AACD,CAdgC;;AAgBjCC,qBAhBiC,CAgBT,UAAM;AAC5B,MAAKL,KAAL,CAAWM,aAAX,CAAyB,CAAEC,UAAW,MAAKC,IAAL,CAAUD,SAAV,CAAoBE,QAApB,EAAb,CAAzB;;AAEA,MAAKN,QAAL,CAAc,CAAEC,cAAe,KAAjB,CAAd;AACD,CApBgC,CAG/B,MAAKM,KAAL,CAAa,CACXN,cAAe,KADJ,CAAb,CAH+B,aAMhC,C,+EAEc,CACb,KAAKD,QAAL,CAAc,CAAEC,cAAe,IAAjB,CAAd,EACD,C;;AAYQ;AACP;AACE;AACE;AACE,KAAM,KAAKM,KAAL,CAAWN,aADnB;AAEE,MAAM,MAFR;AAGE,QAAS;AACP,oDAAY,IAAI,QAAhB,CAAyB,MAAM,QAA/B,CAAwC,WAAY,KAAKF,wBAAzD,EADO;AAEP;AACE,IAAI,IADN;AAEE,MAAM,IAFR;AAGE,QAAS,IAHX;AAIE,WAAY,KAAKG,qBAJnB,EAFO,CAHX;;;;AAaE;AACE,IAAI,WADN;AAEE,aAAc,KAAKL,KAAL,CAAWO,SAF3B;AAGE,kBAAkB,OAHpB;AAIE,UAAW,IAJb,EAbF,CADF,CADF;;;;;AAwBD,C,6BArD0C,gBAAMI,S,EAA9BZ,e,CACZa,S,CAAY,CACjBL,UAAW,gBAAMM,SAAN,CAAgBC,MAAhB,CAAuBC,UADjB,CAEjBT,cAAe,gBAAMO,SAAN,CAAgBG,IAAhB,CAAqBD,UAFnB,C,iBADAhB,e","file":"ToDo_Properties.js","sourcesContent":["// @flow\n\nimport React from 'react'\n\nimport Dialog from 'material-ui/Dialog'\nimport FlatButton from 'material-ui/FlatButton'\nimport TextField from 'material-ui/TextField'\n\nexport default class ToDo_Properties extends React.Component {\n  static propTypes = {\n    ToDo_Text: React.PropTypes.string.isRequired,\n    updateHandler: React.PropTypes.func.isRequired,\n  }\n\n  constructor(props: any, context) {\n    super(props, context)\n\n    this.state = {\n      Dialog_IsOpen: false,\n    }\n  }\n\n  _handle_Open() {\n    this.setState({ Dialog_IsOpen: true })\n  }\n\n  _handle_onTouchTap_Close = () => {\n    this.setState({ Dialog_IsOpen: false })\n  }\n\n  _handle_onTouchTap_OK = () => {\n    this.props.updateHandler({ ToDo_Text: this.refs.ToDo_Text.getValue() })\n\n    this.setState({ Dialog_IsOpen: false })\n  }\n\n  render() {\n    return (\n      <div>\n        <Dialog\n          open={this.state.Dialog_IsOpen}\n          title=\"ToDo\"\n          actions={[\n            <FlatButton key=\"Cancel\" label=\"Cancel\" onTouchTap={this._handle_onTouchTap_Close} />,\n            <FlatButton\n              key=\"OK\"\n              label=\"OK\"\n              primary={true}\n              onTouchTap={this._handle_onTouchTap_OK}\n            />,\n          ]}\n        >\n          <TextField\n            ref=\"ToDo_Text\"\n            defaultValue={this.props.ToDo_Text}\n            floatingLabelText=\"To Do\"\n            fullWidth={true}\n          />\n        </Dialog>\n      </div>\n    )\n  }\n}\n"]}