{"version":3,"sources":["../../../../../units/urb-example-todo/webapp/components/AppBar_ToDo_OpenIndicator.jsx"],"names":["AppBar_ToDo_OpenIndicator","_handle_onTouchTap_IncompleteTODOs","context","router","push","incompleteCount","props","Viewer","ToDo_TotalCount","ToDo_CompletedCount","marginTop","marginBottom","top","right","Component","contextTypes","PropTypes","object","isRequired","createContainer","fragments"],"mappings":";;;AAGA,4B;AACA,uC;;AAEA,wC;AACA,kD;AACA,kF;;;AAGMA,yB;;AAEJC,kC,CAAqC,UAAM;;AAEzC,MAAKC,OAAL,CAAaC,MAAb,CAAoBC,IAApB,CAA0B,cAA1B;AACD,C;;AAEQ;;AAEP,GAAIC,iBAAkB,KAAKC,KAAL,CAAWC,MAAX,CAAkBC,eAAlB,CAAoC,KAAKF,KAAL,CAAWC,MAAX,CAAkBE,mBAA5E;;AAEA,GAAIJ,gBAAkB,CAAtB;AACE;AACE,+CAAO,IAAI,gBAAX,CAA4B,MAAQ,CAAEK,UAAW,CAAC,EAAd,CAAkBC,aAAc,CAAC,EAAjC,CAApC,CAA4E,aAAeN,eAA3F,CAA6G,QAAU,IAAvH,CAA8H,WAAY,CAACO,IAAI,EAAL,CAASC,MAAM,EAAf,CAA1I;AACE,oDAAY,QAAQ,kBAApB,CAAuC,WAAa,KAAKZ,kCAAzD;AACE,4DADF,CADF,CADF,EADF;;;;;AASE,MAAO,0CAAP;AACH,C,uCArBqC,gBAAMa,S;;;;;AA0B9Cd,0BAA0Be,YAA1B,CAAyC;AACvCZ,OAAQ,gBAAMa,SAAN,CAAgBC,MAAhB,CAAuBC,UADQ,CAAzC,C;;;;;AAMe,qBAAMC,eAAN,CAAuBnB,yBAAvB,CAAkD;AAC/DoB,UAAW;AACTb,OAAQ,oZADC,CADoD,CAAlD,C","file":"AppBar_ToDo_OpenIndicator.js","sourcesContent":["// @flow weak\n/* eslint react/prop-types: 0 */\n\nimport React from 'react'\nimport Relay from 'react-relay'\n\nimport Badge from 'material-ui/badge'\nimport IconButton from 'material-ui/IconButton'\nimport IconNotificationsEventAvailable from 'material-ui/svg-icons/notification/event-available'\n\n\nclass AppBar_ToDo_OpenIndicator extends React.Component {\n\n  _handle_onTouchTap_IncompleteTODOs = () => {\n\n    this.context.router.push( '/todo/active' )\n  }\n\n  render() {\n\n    let incompleteCount = this.props.Viewer.ToDo_TotalCount - this.props.Viewer.ToDo_CompletedCount\n\n    if( incompleteCount > 0 )\n      return(\n        <Badge key=\"top-incomplete\" style={ { marginTop: -11, marginBottom: -17 } } badgeContent={ incompleteCount } primary={ true } badgeStyle={{top:20, right:16}}>\n          <IconButton tooltip=\"Incomplete TODOs\" onTouchTap={ this._handle_onTouchTap_IncompleteTODOs }>\n            <IconNotificationsEventAvailable />\n          </IconButton>\n        </Badge>\n      )\n    else\n      return <div />\n  }\n}\n\n//\n\nAppBar_ToDo_OpenIndicator.contextTypes = {\n  router: React.PropTypes.object.isRequired\n}\n\n//\n\nexport default Relay.createContainer( AppBar_ToDo_OpenIndicator, {\n  fragments: {\n    Viewer: () => Relay.QL `\n      fragment on Viewer {\n        ToDo_TotalCount,\n        ToDo_CompletedCount,\n      }\n    `,\n  },\n} )\n"]}