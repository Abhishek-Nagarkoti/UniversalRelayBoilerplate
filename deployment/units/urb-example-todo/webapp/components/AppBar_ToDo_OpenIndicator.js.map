{"version":3,"sources":["../../../../../units/urb-example-todo/webapp/components/AppBar_ToDo_OpenIndicator.jsx"],"names":["AppBar_ToDo_OpenIndicator","_handle_onTouchTap_IncompleteTODOs","context","router","push","incompleteCount","props","Viewer","ToDo_TotalCount","ToDo_CompletedCount","marginTop","marginBottom","top","right","Component","contextTypes","PropTypes","object","isRequired","createContainer","fragments"],"mappings":";;AAEA,4B;AACA,uC;;AAEA,wC;AACA,kD;AACA,kF;;AAEMA,yB;AACJC,kC,CAAqC,UAAM;AACzC,MAAKC,OAAL,CAAaC,MAAb,CAAoBC,IAApB,CAAyB,cAAzB;AACD,C;;AAEQ;AACP,GAAIC,iBAAkB,KAAKC,KAAL,CAAWC,MAAX,CAAkBC,eAAlB,CAAoC,KAAKF,KAAL,CAAWC,MAAX,CAAkBE,mBAA5E;;AAEA,GAAIJ,gBAAkB,CAAtB;AACE;AACE;AACE,IAAI,gBADN;AAEE,MAAO,CAAEK,UAAW,CAAC,EAAd,CAAkBC,aAAc,CAAC,EAAjC,CAFT;AAGE,aAAcN,eAHhB;AAIE,QAAS,IAJX;AAKE,WAAY,CAAEO,IAAK,EAAP,CAAWC,MAAO,EAAlB,CALd;;AAOE;AACE,QAAQ,kBADV;AAEE,WAAY,KAAKZ,kCAFnB;;AAIE,4DAJF,CAPF,CADF,EADF;;;;AAiBK,MAAO,0CAAP;AACN,C,uCA1BqC,gBAAMa,S;;;;;AA+B9Cd,0BAA0Be,YAA1B,CAAyC;AACvCZ,OAAQ,gBAAMa,SAAN,CAAgBC,MAAhB,CAAuBC,UADQ,CAAzC,C;;;;;AAMe,qBAAMC,eAAN,CAAsBnB,yBAAtB,CAAiD;AAC9DoB,UAAW;AACTb,OAAQ,oZADC,CADmD,CAAjD,C","file":"AppBar_ToDo_OpenIndicator.js","sourcesContent":["// @flow\n\nimport React from 'react'\nimport Relay from 'react-relay'\n\nimport Badge from 'material-ui/badge'\nimport IconButton from 'material-ui/IconButton'\nimport IconNotificationsEventAvailable from 'material-ui/svg-icons/notification/event-available'\n\nclass AppBar_ToDo_OpenIndicator extends React.Component {\n  _handle_onTouchTap_IncompleteTODOs = () => {\n    this.context.router.push('/todo/active')\n  }\n\n  render() {\n    let incompleteCount = this.props.Viewer.ToDo_TotalCount - this.props.Viewer.ToDo_CompletedCount\n\n    if (incompleteCount > 0)\n      return (\n        <Badge\n          key=\"top-incomplete\"\n          style={{ marginTop: -11, marginBottom: -17 }}\n          badgeContent={incompleteCount}\n          primary={true}\n          badgeStyle={{ top: 20, right: 16 }}\n        >\n          <IconButton\n            tooltip=\"Incomplete TODOs\"\n            onTouchTap={this._handle_onTouchTap_IncompleteTODOs}\n          >\n            <IconNotificationsEventAvailable />\n          </IconButton>\n        </Badge>\n      )\n    else return <div />\n  }\n}\n\n//\n\nAppBar_ToDo_OpenIndicator.contextTypes = {\n  router: React.PropTypes.object.isRequired,\n}\n\n//\n\nexport default Relay.createContainer(AppBar_ToDo_OpenIndicator, {\n  fragments: {\n    Viewer: () => Relay.QL`\n      fragment on Viewer {\n        ToDo_TotalCount,\n        ToDo_CompletedCount,\n      }\n    `,\n  },\n})\n"]}