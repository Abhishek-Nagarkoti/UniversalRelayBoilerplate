{"version":3,"sources":["../../../../../units/urb-example-todo/app/components/ToDoList.js"],"names":["_ToDosDataSource","DataSource","rowHasChanged","r1","r2","__dataID__","ToDoList","props","context","edges","Viewer","ToDos","state","initialListSize","length","listScrollEnabled","ToDosDataSource","cloneWithRows","_handleMarkAllPress","bind","_handleSwipeInactive","_handleTextInputSave","_handleTodoDestroy","renderTodoEdge","numTodos","ToDo_TotalCount","numCompletedTodos","ToDo_CompletedCount","ToDo_Complete","relay","commitUpdate","swipeInactive","setState","ToDo_Text","ToDo","nextProps","todoEdge","destroyHandler","node","id","text","type","onPress","styles","sectionId","rowId","separator","style","container","addTodoContainer","markAllButtonContainer","markAllButton","markAllButtonDisabled","input","renderSeparator","Component","contextTypes","PropTypes","Environment","propTypes","status","oneOf","isRequired","createContainer","initialVariables","limit","prepareVariables","nextStatus","fragments","getFragment","create","borderBottomColor","borderBottomWidth","height","paddingHorizontal","paddingVertical","backgroundColor","bottom","fontFamily","OS","undefined","fontSize","fontStyle","fontWeight","left","position","right","top","color","alignItems","justifyContent","transform","rotate","width","flex","paddingLeft","paddingRight"],"mappings":"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","file":"ToDoList.js","sourcesContent":["// @flow\n\nimport PropTypes from 'prop-types'\nimport Relay from 'react-relay'\nimport React from 'react'\nimport { ListView, Platform, StyleSheet, Text, TouchableHighlight, View } from 'react-native'\n\nimport Swipeout from '../../../../units/urb-react-native-swipeout/app/components/Swipeout'\nimport ToDo_addMutation from '../../relay/ToDo_addMutation'\nimport ToDo_list_updateMarkAllMutation from '../../relay/ToDo_list_updateMarkAllMutation'\nimport ToDo_deleteMutation from '../../relay/ToDo_deleteMutation'\nimport ToDo from './ToDo'\nimport ToDoTextInput from './ToDoTextInput'\n\nconst _ToDosDataSource = new ListView.DataSource({\n  rowHasChanged: (r1, r2) => r1.__dataID__ !== r2.__dataID__,\n})\n\nclass ToDoList extends React.Component {\n  static contextTypes = {\n    relay: Relay.PropTypes.Environment,\n  }\n\n  static propTypes = {\n    status: PropTypes.oneOf(['active', 'any', 'completed']).isRequired,\n    style: View.propTypes.style,\n  }\n\n  constructor(props, context) {\n    super(props, context)\n    const { edges } = props.Viewer.ToDos\n    this.state = {\n      initialListSize: edges.length,\n      listScrollEnabled: true,\n      ToDosDataSource: _ToDosDataSource.cloneWithRows(edges),\n    }\n    this._handleMarkAllPress = this._handleMarkAllPress.bind(this)\n    this._handleSwipeInactive = this._handleSwipeInactive.bind(this)\n    this._handleTextInputSave = this._handleTextInputSave.bind(this)\n    this._handleTodoDestroy = this._handleTodoDestroy.bind(this)\n    this.renderTodoEdge = this.renderTodoEdge.bind(this)\n  }\n\n  _handleMarkAllPress() {\n    const numTodos = this.props.Viewer.ToDo_TotalCount\n    const numCompletedTodos = this.props.Viewer.ToDo_CompletedCount\n    const ToDo_Complete = numTodos !== numCompletedTodos\n    this.context.relay.commitUpdate(\n      new ToDo_list_updateMarkAllMutation({\n        ToDo_Complete,\n        ToDos: this.props.Viewer.ToDos,\n        Viewer: this.props.Viewer,\n      }),\n    )\n  }\n\n  _handleSwipeInactive(swipeInactive) {\n    this.setState({ listScrollEnabled: swipeInactive })\n  }\n\n  _handleTextInputSave(ToDo_Text) {\n    this.context.relay.commitUpdate(new ToDo_addMutation({ ToDo_Text, Viewer: this.props.Viewer }))\n  }\n\n  _handleTodoDestroy(ToDo) {\n    this.context.relay.commitUpdate(\n      new ToDo_deleteMutation({\n        ToDo,\n        Viewer: this.props.Viewer,\n      }),\n    )\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (this.props.Viewer.ToDos.edges !== nextProps.Viewer.ToDos.edges) {\n      this.setState({\n        ToDosDataSource: _ToDosDataSource.cloneWithRows(nextProps.Viewer.ToDos.edges),\n      })\n    }\n  }\n\n  renderTodoEdge(todoEdge) {\n    const destroyHandler = this._handleTodoDestroy.bind(null, todoEdge.node)\n    return (\n      <Swipeout\n        key={todoEdge.node.id}\n        right={[\n          {\n            text: 'Delete',\n            type: 'delete',\n            onPress: destroyHandler,\n          },\n        ]}\n        scroll={this._handleSwipeInactive}\n      >\n        <ToDo\n          onDestroy={destroyHandler}\n          style={styles.ToDo}\n          ToDo={todoEdge.node}\n          Viewer={this.props.Viewer}\n        />\n      </Swipeout>\n    )\n  }\n\n  renderSeparator(sectionId, rowId) {\n    return <View key={`sep_${sectionId}_${rowId}`} style={styles.separator} />\n  }\n\n  render() {\n    const numTodos = this.props.Viewer.ToDo_TotalCount\n    const numCompletedTodos = this.props.Viewer.ToDo_CompletedCount\n    return (\n      <View style={[this.props.style, styles.container]}>\n        <View style={styles.addTodoContainer}>\n          <TouchableHighlight\n            onPress={this._handleMarkAllPress}\n            style={styles.markAllButtonContainer}\n            underlayColor=\"transparent\"\n          >\n            <Text\n              style={[\n                styles.markAllButton,\n                numTodos !== numCompletedTodos && styles.markAllButtonDisabled,\n              ]}\n            >\n              {'\\u276F'}\n            </Text>\n          </TouchableHighlight>\n          <ToDoTextInput\n            clearButtonMode=\"while-editing\"\n            onSave={this._handleTextInputSave}\n            placeholder=\"What needs to be done?\"\n            style={styles.input}\n            initialValue=\"\"\n          />\n        </View>\n        <ListView\n          dataSource={this.state.ToDosDataSource}\n          initialListSize={this.state.initialListSize}\n          renderRow={this.renderTodoEdge}\n          renderSeparator={this.renderSeparator}\n        />\n      </View>\n    )\n  }\n}\n\nexport default Relay.createContainer(ToDoList, {\n  initialVariables: {\n    status: 'any',\n    limit: 2147483647,\n  },\n\n  prepareVariables({ status }) {\n    var nextStatus\n    if (status === 'active' || status === 'completed') {\n      nextStatus = status\n    } else {\n      // This matches the Backbone example, which displays all ToDos on an\n      // invalid route.\n      nextStatus = 'any'\n    }\n    return {\n      status: nextStatus,\n      limit: 2147483647, // GraphQLInt\n    }\n  },\n\n  fragments: {\n    Viewer: () => Relay.QL`\n      fragment on Viewer {\n        ToDo_CompletedCount\n        ToDos(status: $status, first: $limit) {\n          edges {\n            node {\n              id\n              ${ToDo_deleteMutation.getFragment('ToDo')}\n              ${ToDo.getFragment('ToDo')}\n            }\n          }\n          ${ToDo_list_updateMarkAllMutation.getFragment('ToDos')}\n        }\n        ToDo_TotalCount\n        ${ToDo_addMutation.getFragment('Viewer')}\n        ${ToDo_list_updateMarkAllMutation.getFragment('Viewer')}\n        ${ToDo_deleteMutation.getFragment('Viewer')}\n        ${ToDo.getFragment('Viewer')}\n      }\n    `,\n  },\n})\n\nconst styles = StyleSheet.create({\n  addTodoContainer: {\n    borderBottomColor: 'rgba(0,0,0,0.1)',\n    borderBottomWidth: 1,\n    height: 58,\n    paddingHorizontal: 8,\n    paddingVertical: 9,\n  },\n  container: {\n    backgroundColor: 'white',\n  },\n  input: {\n    bottom: 0,\n    fontFamily: Platform.OS === 'android' ? 'sans-serif-light' : undefined,\n    fontSize: 24,\n    fontStyle: 'italic',\n    fontWeight: '300',\n    left: Platform.OS === 'android' ? 61 : 65,\n    position: 'absolute',\n    right: 15,\n    top: 0,\n  },\n  markAllButton: {\n    color: '#737373',\n    fontSize: 22,\n  },\n  markAllButtonContainer: {\n    alignItems: 'center',\n    height: 44,\n    justifyContent: 'center',\n    transform: [{ rotate: '90deg' }],\n    width: 44,\n  },\n  markAllButtonDisabled: {\n    color: '#e6e6e6',\n  },\n  separator: {\n    backgroundColor: 'rgba(0,0,0,0.1)',\n    height: 1,\n  },\n  ToDo: {\n    backgroundColor: 'white',\n    flex: 1,\n    paddingLeft: 10,\n    paddingRight: 8,\n  },\n})\n"]}