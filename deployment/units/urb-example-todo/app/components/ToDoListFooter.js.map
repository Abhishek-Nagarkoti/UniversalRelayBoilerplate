{"version":3,"sources":["../../../../../units/urb-example-todo/app/components/ToDoListFooter.js"],"names":["styles","create","container","alignItems","flexDirection","height","justifyContent","strong","fontWeight","ToDoListFooter","props","context","numCompletedTodos","Viewer","ToDo_CompletedCount","numRemainingTodos","ToDo_TotalCount","style","Component","propTypes","status","oneOf","isRequired","createContainer","initialVariables","prepareVariables","prevVars","fragments"],"mappings":";;AAEA,qC;AACA,uC;AACA,4B;AACA,yC;;AAEA,GAAMA,QAAS,wBAAWC,MAAX,CAAkB;AAC/BC,UAAW;AACTC,WAAY,QADH;AAETC,cAAe,KAFN;AAGTC,OAAQ,EAHC;AAITC,eAAgB,eAJP,CADoB;;AAO/BC,OAAQ;AACNC,WAAY,MADN,CAPuB,CAAlB,CAAf,C;;;;AAYMC,c;;;;;;AAMJ,wBAAYC,KAAZ,CAAmBC,OAAnB,CAA4B;AACpBD,KADoB,CACbC,OADa;AAE3B,C;;AAEQ;AACP,GAAIC,mBAAoB,KAAKF,KAAL,CAAWG,MAAX,CAAkBC,mBAA1C;AACA,GAAIC,mBAAoB,KAAKL,KAAL,CAAWG,MAAX,CAAkBG,eAAlB,CAAoCJ,iBAA5D;AACA;AACE,iDAAM,MAAO,CAAC,KAAKF,KAAL,CAAWO,KAAZ,CAAmBjB,OAAOE,SAA1B,CAAb;AACE;AACE,iDAAM,MAAOF,OAAOO,MAApB;AACGQ,iBADH,CADF;;AAIG,GAJH;AAKOA,oBAAsB,CAAtB,CAA0B,EAA1B,CAA+B,GALtC,SADF,CADF;;;;AAWD,C,4BAxB0B,gBAAMG,S,EAA7BT,c,CACGU,S,CAAY,CACjBC,OAAQ,oBAAUC,KAAV,CAAgB,CAAC,QAAD,CAAW,KAAX,CAAkB,WAAlB,CAAhB,EAAgDC,UADvC,CAEjBL,MAAO,kBAAKE,SAAL,CAAeF,KAFL,C;;;AA0BN,qBAAMM,eAAN,CAAsBd,cAAtB,CAAsC;AACnDe,iBAAkB;AAChBJ,OAAQ,KADQ,CADiC;;AAInDK,gBAJmD,2BAIlCC,QAJkC,CAIxB;AACzB;AACKA,QADL;;AAGD,CARkD;AASnDC,UAAW;AACTd,OAAQ,yYADC,CATwC,CAAtC,C","file":"ToDoListFooter.js","sourcesContent":["// @flow\n\nimport PropTypes from 'prop-types'\nimport Relay from 'react-relay'\nimport React from 'react'\nimport { StyleSheet, Text, View } from 'react-native'\n\nconst styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    flexDirection: 'row',\n    height: 40,\n    justifyContent: 'space-between',\n  },\n  strong: {\n    fontWeight: 'bold',\n  },\n})\n\nclass ToDoListFooter extends React.Component {\n  static propTypes = {\n    status: PropTypes.oneOf(['active', 'any', 'completed']).isRequired,\n    style: View.propTypes.style,\n  }\n\n  constructor(props, context) {\n    super(props, context)\n  }\n\n  render() {\n    var numCompletedTodos = this.props.Viewer.ToDo_CompletedCount\n    var numRemainingTodos = this.props.Viewer.ToDo_TotalCount - numCompletedTodos\n    return (\n      <View style={[this.props.style, styles.container]}>\n        <Text>\n          <Text style={styles.strong}>\n            {numRemainingTodos}\n          </Text>\n          {' '}\n          item{numRemainingTodos === 1 ? '' : 's'} left\n        </Text>\n      </View>\n    )\n  }\n}\n\nexport default Relay.createContainer(ToDoListFooter, {\n  initialVariables: {\n    status: 'any',\n  },\n  prepareVariables(prevVars) {\n    return {\n      ...prevVars,\n    }\n  },\n  fragments: {\n    Viewer: () => Relay.QL`\n      fragment on Viewer {\n        ToDo_CompletedCount,\n        ToDo_TotalCount\n      }\n    `,\n  },\n})\n"]}