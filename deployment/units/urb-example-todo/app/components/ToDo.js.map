{"version":3,"sources":["../../../../../units/urb-example-todo/app/components/ToDo.js"],"names":["ToDo","props","context","state","isEditing","_handleCompletePress","bind","_handleLabelPress","_handleTextInputCancel","_handleTextInputDelete","_handleTextInputSave","_setEditMode","ToDo_Complete","relay","commitUpdate","Viewer","onDestroy","ToDo_Text","shouldEdit","setState","imageModule","require","styles","checkbox","style","container","renderCompleteCheckbox","labelText","inputText","input","label","Component","contextTypes","PropTypes","Environment","propTypes","func","isRequired","createContainer","fragments","getFragment","create","width","alignItems","flex","flexDirection","height","marginHorizontal","OS","borderBottomColor","undefined","borderBottomWidth","color","fontFamily","fontSize","fontWeight","textAlign"],"mappings":";;AAEA,qC;AACA,uC;AACA,4B;AACA;;AAEA,8C;AACA,gF;AACA,gF;;AAEMA,I;;;;;;;;;;;;;;AAcJ,cAAYC,KAAZ,CAAmBC,OAAnB,CAA4B;AACpBD,KADoB,CACbC,OADa,SAJ5BC,KAI4B,CAJpB,CACNC,UAAW,KADL,CAIoB;;AAG1B,MAAKC,oBAAL,CAA4B,MAAKA,oBAAL,CAA0BC,IAA1B,OAA5B;AACA,MAAKC,iBAAL,CAAyB,MAAKA,iBAAL,CAAuBD,IAAvB,OAAzB;AACA,MAAKE,sBAAL,CAA8B,MAAKA,sBAAL,CAA4BF,IAA5B,OAA9B;AACA,MAAKG,sBAAL,CAA8B,MAAKA,sBAAL,CAA4BH,IAA5B,OAA9B;AACA,MAAKI,oBAAL,CAA4B,MAAKA,oBAAL,CAA0BJ,IAA1B,OAA5B;AACA,MAAKK,YAAL,CAAoB,MAAKA,YAAL,CAAkBL,IAAlB,OAApB,CAR0B;AAS3B,C;;AAEsB;AACrB,GAAIM,eAAgB,CAAC,KAAKX,KAAL,CAAWD,IAAX,CAAgBY,aAArC;AACA,KAAKV,OAAL,CAAaW,KAAb,CAAmBC,YAAnB;AACE,wCAA8B;AAC5BF,2BAD4B;AAE5BZ,KAAM,KAAKC,KAAL,CAAWD,IAFW;AAG5Be,OAAQ,KAAKd,KAAL,CAAWc,MAHS,CAA9B,CADF;;;AAOD,C;;AAEmB;AAClB,KAAKJ,YAAL,CAAkB,IAAlB;AACD,C;;AAEwB;AACvB,KAAKA,YAAL,CAAkB,KAAlB;AACD,C;;AAEwB;AACvB,KAAKA,YAAL,CAAkB,KAAlB;AACA,KAAKV,KAAL,CAAWe,SAAX;AACD,C;;AAEoBC,S,CAAW;AAC9B,KAAKN,YAAL,CAAkB,KAAlB;AACA,KAAKT,OAAL,CAAaW,KAAb,CAAmBC,YAAnB;AACE,wCAA8B,CAAEd,KAAM,KAAKC,KAAL,CAAWD,IAAnB,CAAyBiB,mBAAzB,CAA9B,CADF;;AAGD,C;;AAEYC,U,CAAY;AACvB,KAAKC,QAAL,CAAc,CAAEf,UAAWc,UAAb,CAAd;AACD,C;;AAEwB;AACvB,GAAME,aAAc,KAAKnB,KAAL,CAAWD,IAAX,CAAgBY,aAAhB;AAChBS,QAAQ,oCAAR,CADgB;AAEhBA,QAAQ,6BAAR,CAFJ;AAGA;AACE;AACE,QAAS,KAAKhB,oBADhB;AAEE,MAAOiB,OAAOC,QAFhB;AAGE,cAAc,aAHhB;;AAKE,kDAAO,OAAQH,WAAf,EALF,CADF;;;AASD,C;;AAEQ;AACP;AACE,iDAAM,MAAO,CAAC,KAAKnB,KAAL,CAAWuB,KAAZ,CAAmBF,OAAOG,SAA1B,CAAb;AACG,KAAKC,sBAAL,EADH;AAEG,KAAKvB,KAAL,CAAWC,SAAX;AACG;AACE,UAAW,IADb;AAEE,aAAc,IAFhB;AAGE,aAAc,KAAKH,KAAL,CAAWD,IAAX,CAAgBiB,SAHhC;AAIE,SAAU,KAAKT,sBAJjB;AAKE,SAAU,KAAKC,sBALjB;AAME,OAAQ,KAAKC,oBANf;AAOE,MAAO,CAACY,OAAOK,SAAR,CAAmBL,OAAOM,SAA1B,CAAqCN,OAAOO,KAA5C,CAPT,EADH;;AAUG;AACE,cAAe,CADjB;AAEE,QAAS,KAAKtB,iBAFhB;AAGE,MAAOe,OAAOQ,KAHhB;AAIE,cAAc,aAJhB;;AAME,iDAAM,cAAe,CAArB,CAAwB,MAAOR,OAAOK,SAAtC;AACG,KAAK1B,KAAL,CAAWD,IAAX,CAAgBiB,SADnB,CANF,CAZN,CADF;;;;;AAyBD,C,kBArGgB,gBAAMc,S,EAAnB/B,I,CACGgC,Y,CAAe,CACpBnB,MAAO,qBAAMoB,SAAN,CAAgBC,WADH,C,CADlBlC,I,CAKGmC,S,CAAY,CACjBnB,UAAW,oBAAUoB,IAAV,CAAeC,UADT,CAEjBb,MAAO,kBAAKW,SAAL,CAAeX,KAFL,C;;;AAmGN,qBAAMc,eAAN,CAAsBtC,IAAtB,CAA4B;AACzCuC,UAAW;AACTvC,KAAM;;;;;AAKA,oCAA0BwC,WAA1B,CAAsC,MAAtC,CALA;AAMA,oCAA0BA,WAA1B,CAAsC,MAAtC,CANA,GADG;;;AAUTzB,OAAQ;;AAEF,oCAA0ByB,WAA1B,CAAsC,QAAtC,CAFE,GAVC,CAD8B,CAA5B,C;;;;;;AAmBf,GAAMlB,QAAS,wBAAWmB,MAAX,CAAkB;AAC/BlB,SAAU;AACRmB,MAAO,EADC,CADqB;;AAI/BjB,UAAW;AACTkB,WAAY,QADH;AAETC,KAAM,CAFG;AAGTC,cAAe,KAHN;AAITC,OAAQ,EAJC,CAJoB;;AAU/BjB,MAAO;AACLe,KAAM,CADD,CAVwB;;AAa/BhB,UAAW;AACTmB,iBAAkB,sBAASC,EAAT,GAAgB,SAAhB,CAA4B,EAA5B,CAAiC,EAD1C,CAboB;;AAgB/BlB,MAAO;AACLmB,kBAAmB,sBAASD,EAAT,GAAgB,SAAhB,CAA4B,aAA5B,CAA4CE,SAD1D;AAELC,kBAAmB,sBAASH,EAAT,GAAgB,SAAhB,CAA4B,CAA5B,CAAgCE,SAF9C;AAGLN,KAAM,CAHD,CAhBwB;;AAqB/BjB,UAAW;AACTyB,MAAO,iBADE;AAETC,WAAY,sBAASL,EAAT,GAAgB,SAAhB,CAA4B,oBAA5B,CAAmDE,SAFtD;AAGTI,SAAU,EAHD;AAITC,WAAY,KAJH;AAKTR,iBAAkB,EALT;AAMTS,UAAW,MANF,CArBoB,CAAlB,CAAf","file":"ToDo.js","sourcesContent":["// @flow\n\nimport PropTypes from 'prop-types'\nimport Relay from 'react-relay'\nimport React from 'react'\nimport { Image, Platform, StyleSheet, Text, TouchableHighlight, View } from 'react-native'\n\nimport ToDoTextInput from './ToDoTextInput'\nimport ToDo_updateStatusMutation from '../../relay/ToDo_updateStatusMutation'\nimport ToDo_updateRenameMutation from '../../relay/ToDo_updateRenameMutation'\n\nclass ToDo extends React.Component {\n  static contextTypes = {\n    relay: Relay.PropTypes.Environment,\n  }\n\n  static propTypes = {\n    onDestroy: PropTypes.func.isRequired,\n    style: View.propTypes.style,\n  }\n\n  state = {\n    isEditing: false,\n  }\n\n  constructor(props, context) {\n    super(props, context)\n\n    this._handleCompletePress = this._handleCompletePress.bind(this)\n    this._handleLabelPress = this._handleLabelPress.bind(this)\n    this._handleTextInputCancel = this._handleTextInputCancel.bind(this)\n    this._handleTextInputDelete = this._handleTextInputDelete.bind(this)\n    this._handleTextInputSave = this._handleTextInputSave.bind(this)\n    this._setEditMode = this._setEditMode.bind(this)\n  }\n\n  _handleCompletePress() {\n    var ToDo_Complete = !this.props.ToDo.ToDo_Complete\n    this.context.relay.commitUpdate(\n      new ToDo_updateStatusMutation({\n        ToDo_Complete,\n        ToDo: this.props.ToDo,\n        Viewer: this.props.Viewer,\n      }),\n    )\n  }\n\n  _handleLabelPress() {\n    this._setEditMode(true)\n  }\n\n  _handleTextInputCancel() {\n    this._setEditMode(false)\n  }\n\n  _handleTextInputDelete() {\n    this._setEditMode(false)\n    this.props.onDestroy()\n  }\n\n  _handleTextInputSave(ToDo_Text) {\n    this._setEditMode(false)\n    this.context.relay.commitUpdate(\n      new ToDo_updateRenameMutation({ ToDo: this.props.ToDo, ToDo_Text }),\n    )\n  }\n\n  _setEditMode(shouldEdit) {\n    this.setState({ isEditing: shouldEdit })\n  }\n\n  renderCompleteCheckbox() {\n    const imageModule = this.props.ToDo.ToDo_Complete\n      ? require('../images/todo_checkbox-active.png')\n      : require('../images/todo_checkbox.png')\n    return (\n      <TouchableHighlight\n        onPress={this._handleCompletePress}\n        style={styles.checkbox}\n        underlayColor=\"transparent\"\n      >\n        <Image source={imageModule} />\n      </TouchableHighlight>\n    )\n  }\n\n  render() {\n    return (\n      <View style={[this.props.style, styles.container]}>\n        {this.renderCompleteCheckbox()}\n        {this.state.isEditing\n          ? <ToDoTextInput\n              autoFocus={true}\n              commitOnBlur={true}\n              initialValue={this.props.ToDo.ToDo_Text}\n              onCancel={this._handleTextInputCancel}\n              onDelete={this._handleTextInputDelete}\n              onSave={this._handleTextInputSave}\n              style={[styles.labelText, styles.inputText, styles.input]}\n            />\n          : <TouchableHighlight\n              activeOpacity={1}\n              onPress={this._handleLabelPress}\n              style={styles.label}\n              underlayColor=\"transparent\"\n            >\n              <Text numberOfLines={1} style={styles.labelText}>\n                {this.props.ToDo.ToDo_Text}\n              </Text>\n            </TouchableHighlight>}\n      </View>\n    )\n  }\n}\n\nexport default Relay.createContainer(ToDo, {\n  fragments: {\n    ToDo: () => Relay.QL`\n      fragment on ToDo {\n        ToDo_Complete\n        id\n        ToDo_Text\n        ${ToDo_updateStatusMutation.getFragment('ToDo')}\n        ${ToDo_updateRenameMutation.getFragment('ToDo')}\n      }\n    `,\n    Viewer: () => Relay.QL`\n      fragment on Viewer {\n        ${ToDo_updateStatusMutation.getFragment('Viewer')}\n      }\n    `,\n  },\n})\n\nconst styles = StyleSheet.create({\n  checkbox: {\n    width: 40,\n  },\n  container: {\n    alignItems: 'center',\n    flex: 1,\n    flexDirection: 'row',\n    height: 58,\n  },\n  input: {\n    flex: 1,\n  },\n  inputText: {\n    marginHorizontal: Platform.OS === 'android' ? 11 : 15,\n  },\n  label: {\n    borderBottomColor: Platform.OS === 'android' ? 'transparent' : undefined,\n    borderBottomWidth: Platform.OS === 'android' ? 1 : undefined,\n    flex: 1,\n  },\n  labelText: {\n    color: 'rgb(77, 77, 77)',\n    fontFamily: Platform.OS === 'android' ? 'sans-serif-regular' : undefined,\n    fontSize: 24,\n    fontWeight: '300',\n    marginHorizontal: 15,\n    textAlign: 'left',\n  },\n})\n"]}