{"version":3,"sources":["../../../../units/urb-persister-cassandra/graphql/PersisterCassandra.js"],"names":["Uuid","types","Uuid_Null_String","Uuid_Null","fromString","ExpressCassandraClient","createClient","clientOptions","ormOptions","defaultReplicationStrategy","class","replication_factor","migration","disableTTYConfirmation","createKeyspace","PersisterCassandra","tableSchemas","Map","entityName","ObjectType","filters","resultPromises","filter","push","Promise","resolve","reject","updateUuidsInFields","instance","findOne","raw","allow_filtering","err","entity","all","find","arrEntities","arrRetObj","fields","schemaFields","_properties","schema","fieldName","fieldType","fieldValue","save","add","delete","str","random","id","toString","id1","id2","equals","tableName","tableSchema","set","console","error","process","exit","modelInstance","User","get_cql_client","client","execute","result","runAsPartOfSetupDatabase","cb","enrolledTables","connect","log","message","arrSchemas","keys","get","loadOneTableSchemaFromArray","length","splice","loadSchema","name"],"mappings":"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","file":"PersisterCassandra.js","sourcesContent":["/* @flow */\n\nimport CassandraDriver from 'cassandra-driver'\nimport ExpressCassandra from 'express-cassandra'\n\nimport CassandraOptions from './CassandraOptions'\nimport WinstonCassandra from './WinstonCassandra'\n\n\nconst Uuid = CassandraDriver.types.Uuid\nconst Uuid_Null_String = '00000000-0000-0000-0000-000000000000'\nconst Uuid_Null = Uuid.fromString( Uuid_Null_String )\n\n\nconst ExpressCassandraClient = ExpressCassandra.createClient( {\n  clientOptions: CassandraOptions, // Options are pre-set in a separate part of the application, they are correct\n  ormOptions: {\n\n    defaultReplicationStrategy: {\n\n      class: 'SimpleStrategy',\n      replication_factor: 1\n    },\n    migration: 'alter',\n    disableTTYConfirmation: true,\n    createKeyspace: true\n  }\n} )\n\n\nexport default class PersisterCassandra {\n\n  tableSchemas: ? Map < string, Object > ;\n\n  constructor() {\n\n    this.tableSchemas = new Map()\n  }\n\n  getOneObject( entityName: string, ObjectType: any, filters: Array < any > ): Promise < any > {\n\n    const resultPromises = []\n\n    for( let filter of filters )\n      resultPromises.push(\n        new Promise( ( resolve, reject ) => {\n          this.updateUuidsInFields( entityName, filter )\n          ExpressCassandraClient.instance[ entityName ].findOne( filter, {\n            raw: true,\n            allow_filtering: true\n          }, ( err, entity ) => {\n            if( err )\n              reject( err )\n            else {\n              if( entity != null )\n                resolve( new ObjectType( entity ) )\n              else\n                resolve( null )\n            }\n          } )\n        } )\n      )\n\n    return Promise.all( resultPromises )\n  }\n\n  getObjectList( entityName: string, ObjectType: any, filters: Array < any > ): Promise < Array < Object > > {\n\n    const resultPromises = []\n\n    for( let filter of filters )\n      resultPromises.push(\n        new Promise( ( resolve, reject ) => {\n          this.updateUuidsInFields( entityName, filter )\n          ExpressCassandraClient.instance[ entityName ].find( filter, {\n            raw: true,\n            allow_filtering: true\n          }, ( err, arrEntities ) => {\n            if( err )\n              reject( err )\n            else {\n              const arrRetObj = []\n              for( let entity of arrEntities )\n                arrRetObj.push( new ObjectType( entity ) )\n              resolve( arrRetObj )\n            }\n          } )\n        } )\n      )\n\n    return Promise.all( resultPromises )\n  }\n\n  updateUuidsInFields( entityName: string, fields: any ) {\n\n    const schemaFields = ExpressCassandraClient.instance[ entityName ]._properties.schema.fields\n    for( let fieldName in fields ) {\n      const fieldType = schemaFields[ fieldName ]\n      if( fieldType === 'uuid' ) {\n        const fieldValue = fields[ fieldName ]\n        if( !( fieldValue instanceof Uuid ) )\n          fields[ fieldName ] = Uuid.fromString( fieldValue )\n      }\n    }\n  }\n\n  add( entityName: string, fields: any ): Promise < > {\n\n    this.updateUuidsInFields( entityName, fields )\n\n    return new Promise( ( resolve, reject ) => {\n      const entity = new ExpressCassandraClient.instance[ entityName ]( fields )\n      entity.save( ( err ) => {\n        if( err )\n          reject( err )\n        else\n          resolve()\n      } )\n    } )\n  }\n\n  update( entityName: string, fields: any ): Promise < > {\n\n    // TODO x2000 Optimize this with update, possibly. Maybe it's not so bad to read first after all\n    return this.add( entityName, fields )\n  }\n\n  remove( entityName: string, fields: any ): Promise < > {\n\n    this.updateUuidsInFields( entityName, fields )\n\n    return new Promise( ( resolve, reject ) => {\n      ExpressCassandraClient.instance[ entityName ].delete( fields, ( err ) => {\n        if( err )\n          reject( err )\n        else\n          resolve()\n      } )\n    } )\n  }\n\n  createLogger() {\n\n    return new WinstonCassandra( CassandraOptions )\n  }\n\n  uuidFromString( str: string ) {\n\n    return Uuid.fromString( str )\n  }\n\n  uuidRandom() {\n\n    return Uuid.random()\n  }\n\n  uuidNull() {\n\n    return Uuid_Null\n  }\n\n  uuidNullAsString() {\n\n    return Uuid_Null_String\n  }\n\n  uuidToString( id: any ): string {\n\n    if( id instanceof Uuid )\n      id = id.toString()\n\n    return id\n  }\n\n  uuidEquals( id1: any, id2: any ): boolean {\n\n    return id1.equals( id2 )\n  }\n\n  addTableSchema( tableName: string, tableSchema: Object ): void {\n\n    if( this.tableSchemas )\n      this.tableSchemas.set( tableName, tableSchema )\n    else {\n\n      console.error( \"💩 Attempting to add table schemas after express-cassandra client connect.\" )\n      process.exit( 1 )\n    }\n  }\n\n  confirmHealth(): Promise < > {\n\n    return new Promise( ( resolve, reject ) => {\n      ExpressCassandraClient.modelInstance.User.get_cql_client( ( err, client ) => {\n        if( err )\n          reject( err )\n        else\n          client.execute(\n            'select release_version from system.local;', ( err, result ) => {\n              if( err )\n                reject( err )\n              else resolve()\n            } )\n      } )\n    } )\n  }\n\n  initialize( runAsPartOfSetupDatabase: boolean, cb: Function ): void {\n\n    // All table schemas should have been added by now.\n    const enrolledTables = this.tableSchemas\n    this.tableSchemas = null // Free up the memory that is not needed any more and indicate that we can not add any more\n\n    ExpressCassandraClient.connect( ( err ) => {\n      if( err )\n        console.log( \"💩 Could not connect to Cassandra: \" + err.message )\n      else if( !enrolledTables )\n        console.log( \"💩 Table schemas missing!\" )\n      else {\n\n        const arrSchemas = []\n        for( let tableName of enrolledTables.keys() )\n          arrSchemas.push( [ tableName, enrolledTables.get( tableName ) ] )\n\n        this.loadOneTableSchemaFromArray( arrSchemas, runAsPartOfSetupDatabase, cb )\n      }\n    } )\n  }\n\n  loadOneTableSchemaFromArray( arrSchemas: Array < any > , runAsPartOfSetupDatabase: boolean, cb: Function ): void {\n    if( arrSchemas.length > 0 ) {\n      const tableName = arrSchemas[ 0 ][ 0 ]\n      const tableSchema = arrSchemas[ 0 ][ 1 ]\n\n      arrSchemas.splice( 0, 1 )\n\n      ExpressCassandraClient.loadSchema(\n        tableName,\n        tableSchema,\n        ( err ) => {\n          if( err ) {\n\n            console.log( \"💩 Initializing Cassandra persister - error while creating \" + tableName + \"!\" )\n            console.error( err.message )\n            process.exit( 1 )\n          } else {\n\n            if( runAsPartOfSetupDatabase )\n              console.log( \"🛢 Table \" + ExpressCassandraClient.modelInstance[ tableName ]._properties.name + \" ready.\" )\n\n            this.loadOneTableSchemaFromArray( arrSchemas, runAsPartOfSetupDatabase, cb ) // Load the next table\n            return\n          }\n        }\n      )\n    } else {\n\n      cb()\n    }\n  }\n}\n"]}