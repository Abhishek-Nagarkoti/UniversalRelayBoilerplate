{"version":3,"sources":["../../../../units/urb-persister-cassandra/graphql/WinstonCassandra.js"],"names":["util","require","events","winston","cql","defaultOptions","table","partitionBy","consistency","types","consistencies","quorum","level","name","Cassandra","options","Error","keyspace","extend","schemaStatus","EventEmitter","setMaxListeners","client","Client","inherits","Transport","prototype","log","msg","meta","callback","self","_insertLog","err","getKey","Date","toISOString","slice","key","execute","inspect","prepare","target","sources","call","arguments","forEach","source","prop","hasOwnProperty","transports","module","exports"],"mappings":"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","file":"WinstonCassandra.js","sourcesContent":["// @flow weak\n\nvar util = require( 'util' )\nvar events = require( 'events' )\n\nvar winston = require( 'winston' )\nvar cql = require( 'cassandra-driver' )\n\nvar defaultOptions = {\n  //column family to store the logs\n  table: 'logs',\n  //determines if the partition key is changed per day or hour\n  partitionBy: 'day',\n  consistency: cql.types.consistencies.quorum,\n  level: 'info',\n  name: 'cassandra'\n}\n\nfunction Cassandra( options ) {\n  if( !options ) {\n    throw new Error( 'Transport options is required' )\n  }\n  if( !options.keyspace ) {\n    throw new Error( 'You must specify the options.keyspace' )\n  }\n  this.options = Cassandra.extend( {}, defaultOptions, options )\n    //winston options\n  this.name = this.options.name\n  this.level = this.options.level\n    //create a queue object that will emit the event 'prepared'\n  this.schemaStatus = new events.EventEmitter()\n  this.schemaStatus.setMaxListeners( 0 )\n  this.client = new cql.Client( this.options )\n}\n\nutil.inherits( Cassandra, winston.Transport )\n\nCassandra.prototype.log = function ( level, msg, meta, callback ) {\n  var self = this\n  return self._insertLog( level, msg, meta, function ( err ) {\n    callback( err, !err )\n  } )\n}\n\n/**\n * Gets the log partition key\n */\nCassandra.prototype.getKey = function () {\n  if( this.options.partitionBy === 'day' ) {\n    return new Date().toISOString().slice( 0, 10 )\n  } else if( this.options.partitionBy === 'hour' ) {\n    return new Date().toISOString().slice( 0, 13 )\n  }\n  return null\n}\n\n/**\n * Inserts the log in the db\n */\nCassandra.prototype._insertLog = function ( level, msg, meta, callback ) {\n  var key = this.getKey()\n  if( !key ) {\n    return callback( new Error( 'Partition ' + this.options.partitionBy + ' not supported' ), false )\n  }\n  //execute as a prepared query as it would be executed multiple times\n  return this.client.execute(\n    'INSERT INTO ' + this.options.table + ' (key, date, level, message, meta) VALUES (?, ?, ?, ?, ?)', [ key, new Date(), level, msg, util.inspect( meta ) ], { prepare: true, consistency: this.options.consistency },\n    callback )\n}\n\n\n/**\n * Merge the contents of two or more objects together into the first object.\n * Similar to jQuery.extend\n */\nCassandra.extend = function ( target ) {\n  var sources = [].slice.call( arguments, 1 )\n  sources.forEach( function ( source ) {\n    for( var prop in source ) {\n      if( source.hasOwnProperty( prop ) ) {\n        target[ prop ] = source[ prop ]\n      }\n    }\n  } )\n  return target\n}\n\n//Define as a property of winston transports for backward compatibility\nwinston.transports.Cassandra = Cassandra\nmodule.exports = Cassandra\n  //The rest of winston transports uses (module).name convention\n  //Create a field to allow consumers to interact in the same way\nmodule.exports.Cassandra = Cassandra\nmodule.exports.types = cql.types\n"]}