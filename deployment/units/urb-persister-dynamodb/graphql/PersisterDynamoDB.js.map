{"version":3,"sources":["../../../../units/urb-persister-dynamodb/graphql/PersisterDynamoDB.js"],"names":["require","load","Uuid_Null","AWS","process","env","DYNAMODB_SECRETACCESSKEY","config","update","accessKeyId","DYNAMODB_ACCESSKEYID","secretAccessKey","region","DYNAMODB_REGION","opts","endpoint","apiVersion","dynamoDriver","DynamoDB","PersisterDynamoDB","tables","canAddMoreTableSchemas","entityName","ObjectType","filters","resultPromises","filter","push","Promise","resolve","reject","get","err","entity","all","query","scan","fieldName","where","equals","includes","usingIndex","exec","queryResults","arrRetObj","Items","fields","create","destroy","str","v1","id","id1","id2","tableName","tableSchema","console","error","exit","vogelsSchema","schema","indexes","key","Array","isArray","hashKey","fieldType","vogelFieldDefinition","types","uuid","string","allow","date","number","boolean","log","name","type","define","runAsPartOfSetupDatabase","cb","createTables"],"mappings":"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","file":"PersisterDynamoDB.js","sourcesContent":["// @flow weak\n\nimport Joi from 'joi'\nimport uuid from 'node-uuid'\nimport vogels from 'vogels'\nimport winston from 'winston'\n\n\nrequire( 'dotenv' ).load()\n\n\nconst Uuid_Null = '00000000-0000-0000-0000-000000000000'\nconst AWS = vogels.AWS;\n\n\nif( process.env.DYNAMODB_SECRETACCESSKEY ) {\n\n  // test on aws\n  AWS.config.update( {\n    accessKeyId: process.env.DYNAMODB_ACCESSKEYID,\n    secretAccessKey: process.env.DYNAMODB_SECRETACCESSKEY,\n    region: process.env.DYNAMODB_REGION\n  } )\n} else {\n\n  // test locally via docker\n  AWS.config.update( { region: 'us-east-1' } )\n  const opts = { endpoint: 'http://localhost:8000', apiVersion: '2012-08-10' }\n  vogels.dynamoDriver( new AWS.DynamoDB( opts ) )\n}\n\n\nexport default class PersisterDynamoDB {\n\n  constructor() {\n\n    this.tables = {}\n    this.canAddMoreTableSchemas = true\n  }\n\n  getOneObject( entityName: string, ObjectType: any, filters: Array < any > ): Promise < any > {\n\n    const resultPromises = []\n\n    for( let filter of filters )\n      resultPromises.push(\n        new Promise( ( resolve, reject ) => {\n          this.tables[ entityName ].get( filter, ( err, entity ) => {\n            if( err )\n              reject( err )\n            else {\n              if( entity != null )\n                resolve( new ObjectType( entity.get() ) )\n              else\n                resolve( null )\n            }\n          } )\n        } )\n      )\n\n    return Promise.all( resultPromises )\n  }\n\n  getObjectList( entityName: string, ObjectType: any, filters: Array < any > ): Promise < Array < Object > > {\n\n    const resultPromises = []\n\n    for( let filter of filters )\n      resultPromises.push(\n        new Promise( ( resolve, reject ) => {\n          let query = this.tables[ entityName ].scan()\n          for( let fieldName in filter ) {\n            query = query\n              .where( fieldName )\n              .equals( filter[ fieldName ] )\n            if( fieldName !== 'id' && fieldName.includes( 'Id' ) )\n              query = query.usingIndex( fieldName + 'Index' )\n          }\n\n          query.exec( ( err, queryResults ) => {\n            if( err )\n              reject( err )\n            else {\n              const arrRetObj = []\n              for( let entity of queryResults.Items )\n                arrRetObj.push( new ObjectType( entity.get() ) )\n              resolve( arrRetObj )\n            }\n          } )\n        } )\n      )\n\n    return Promise.all( resultPromises )\n  }\n\n  add( entityName: string, fields: any, ObjectType: any ): Promise < > {\n\n    return new Promise( ( resolve, reject ) => {\n      this.tables[ entityName ].create( fields, ( err ) => {\n        if( err )\n          reject( err )\n        else\n          resolve()\n      } )\n    } )\n  }\n\n  update( entityName: string, fields: any ): Promise < > {\n\n    return new Promise( ( resolve, reject ) => {\n      this.tables[ entityName ].update( fields, ( err ) => {\n        if( err )\n          reject( err )\n        else\n          resolve()\n      } )\n    } )\n  }\n\n  remove( entityName: string, fields: any ): Promise < > {\n\n    return new Promise( ( resolve, reject ) => {\n      this.tables[ entityName ].destroy( fields, ( err ) => {\n        if( err )\n          reject( err )\n        else\n          resolve()\n      } )\n    } )\n  }\n\n  createLogger() {\n\n    // TODO x1000 have some kind of adapter for winston\n    return null\n  }\n\n  uuidFromString( str: string ): string {\n\n    return str\n  }\n\n  uuidRandom(): string {\n\n    return uuid.v1()\n  }\n\n  uuidNull() {\n\n    return Uuid_Null\n  }\n\n  uuidNullAsString() {\n\n    return Uuid_Null\n  }\n\n  uuidToString( id: any ) {\n\n    return id\n  }\n\n  uuidEquals( id1: any, id2: any ): boolean {\n\n    return id1 == id2\n  }\n\n  addTableSchema( tableName: string, tableSchema: Object ): void {\n\n    if( !this.canAddMoreTableSchemas ) {\n      console.error( \"ðŸ’” Attempting to add table schemas to Vogel after createTables.\" )\n      process.exit( 1 )\n    }\n\n    const vogelsSchema = {\n      schema: {},\n      indexes: []\n    }\n\n    // Determine key. Not sure how composite key should be handled\n    let key = tableSchema.key\n    if( Array.isArray( key ) )\n      key = key[ 0 ] // A bit crude but seems to create the table properly\n\n    vogelsSchema.hashKey = key\n\n    // Copy fields\n    for( let fieldName in tableSchema.fields ) {\n      const fieldType = tableSchema.fields[ fieldName ]\n\n      let vogelFieldDefinition\n\n      if( fieldType == 'uuid' )\n        vogelFieldDefinition = vogels.types.uuid()\n      else if( fieldType == 'text' )\n        vogelFieldDefinition = Joi.string().allow( '' )\n      else if( fieldType == 'timestamp' )\n        vogelFieldDefinition = Joi.date()\n      else if( fieldType == 'int' )\n        vogelFieldDefinition = Joi.number()\n      else if( fieldType == 'boolean' )\n        vogelFieldDefinition = Joi.boolean()\n      else {\n        // Crappy catch all for now just for testing\n        console.log( \"ðŸ’”  Dynamo DB: unsupported field type \" + fieldType )\n        vogelFieldDefinition = Joi.string()\n      }\n\n      vogelsSchema.schema[ fieldName ] = vogelFieldDefinition\n    }\n\n    // Copy indexes\n    if( tableSchema.indexes )\n      for( let fieldName of tableSchema.indexes )\n        vogelsSchema.indexes.push( { hashKey: fieldName, name: fieldName + 'Index', type: 'global' } )\n\n    this.tables[ tableName ] = vogels.define( tableName, vogelsSchema )\n  }\n\n  confirmHealth(): Promise < > {\n\n    //\n    return new Promise( ( resolve, reject ) => {\n      resolve()\n    } )\n  }\n\n  initialize( runAsPartOfSetupDatabase: boolean, cb: Function ): void {\n\n    // All table schemas should have been added by now.\n    this.canAddMoreTableSchemas = false\n\n    vogels.createTables( ( err ) => {\n      if( err ) {\n        console.log( \"ðŸ’” Initializing DynamoDB persister - error\" )\n        console.log( err )\n        process.exit( 1 )\n      } else {\n\n        cb()\n      }\n    } )\n  }\n}\n"]}