{"version":3,"sources":["../../../../../units/urb-account-management/graphql/mutation/Viewer_update.js"],"names":["name","inputFields","id","type","User_DisplayName","User_Email","User_PhoneNumberMobile","outputFields","Viewer","resolve","parent","args","context","objectManager","rootValue","getOneObject","getViewerUserId","mutateAndGetPayload","local_id","update"],"mappings":";;AAEA;AACA;;AAEA,+D;;AAEe,+CAA6B;AAC1CA,KAAM,eADoC;AAE1CC,YAAa;AACXC,GAAI,CAAEC,KAAM,+CAAR,CADO;AAEXC,iBAAkB,CAAED,KAAM,mDAAR,CAFP;AAGXE,WAAY,CAAEF,KAAM,mDAAR,CAHD;AAIXG,uBAAwB,CAAEH,KAAM,mDAAR,CAJb,CAF6B;;AAQ1CI,aAAc;AACZC,OAAQ;AACNL,yBADM;AAENM,QAAS,iBAACC,MAAD,CAASC,IAAT,CAAeC,OAAf,UAAqCC,cAArC,MAA0BC,SAA1B;AACPD,cAAcE,YAAd,CAA2B,MAA3B,CAAmC,CAAEb,GAAIW,cAAcG,eAAd,EAAN,CAAnC,CADO,GAFH,CADI,CAR4B;;;AAe1CC,oBAAqB;;AAEnBL,OAFmB,WACjBV,GADiB,OACjBA,EADiB,CACbE,gBADa,OACbA,gBADa,CACKC,UADL,OACKA,UADL,CACiBC,sBADjB,OACiBA,sBADjB;AAGNO,aAHM,OAGjBC,SAHiB;;;;AAObI,QAPa,CAOFL,cAAcG,eAAd,EAPE;;AASbH,cAAcM,MAAd,CAAqB,MAArB,CAA6B;AACjCjB,GAAIgB,QAD6B;AAEjCd,iCAFiC;AAGjCE,6CAHiC;AAIjCD,qBAJiC,CAA7B,CATa;;;AAgBZ,CAAEa,iBAAF,CAhBY,2DAfqB,CAA7B,C","file":"Viewer_update.js","sourcesContent":["// @flow\n\nimport { fromGlobalId, mutationWithClientMutationId } from 'graphql-relay'\nimport { GraphQLString, GraphQLID, GraphQLNonNull } from 'graphql'\n\nimport ViewerType from '../../../../graphql/type/ViewerType'\n\nexport default mutationWithClientMutationId({\n  name: 'Viewer_update',\n  inputFields: {\n    id: { type: new GraphQLNonNull(GraphQLID) },\n    User_DisplayName: { type: new GraphQLNonNull(GraphQLString) },\n    User_Email: { type: new GraphQLNonNull(GraphQLString) },\n    User_PhoneNumberMobile: { type: new GraphQLNonNull(GraphQLString) },\n  },\n  outputFields: {\n    Viewer: {\n      type: ViewerType,\n      resolve: (parent, args, context, { rootValue: objectManager }) =>\n        objectManager.getOneObject('User', { id: objectManager.getViewerUserId() }),\n    },\n  },\n  mutateAndGetPayload: async (\n    { id, User_DisplayName, User_Email, User_PhoneNumberMobile },\n    context,\n    { rootValue: objectManager },\n  ) => {\n    // Do not use the passed ID at this point. Use the viewer user ID since it is verified\n    //const local_id = fromGlobalId( id ).id\n    const local_id = objectManager.getViewerUserId()\n\n    await objectManager.update('User', {\n      id: local_id,\n      User_DisplayName,\n      User_PhoneNumberMobile,\n      User_Email,\n    })\n\n    return { local_id }\n  },\n})\n"]}