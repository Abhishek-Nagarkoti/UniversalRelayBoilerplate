{"version":3,"sources":["../../../../../units/urb-account-management/graphql/mutation/Viewer_update.js"],"names":["name","inputFields","id","type","User_DisplayName","User_Email","User_PhoneNumberMobile","outputFields","Viewer","resolve","parent","args","context","objectManager","rootValue","getOneObject","getViewerUserId","mutateAndGetPayload","local_id","update"],"mappings":";;AAEA;AACA;;AAEA,+D;;;AAGe,+CAA8B;AAC3CA,KAAM,eADqC;AAE3CC,YAAa;AACXC,GAAI,CAAEC,KAAM,+CAAR,CADO;AAEXC,iBAAkB,CAAED,KAAM,mDAAR,CAFP;AAGXE,WAAY,CAAEF,KAAM,mDAAR,CAHD;AAIXG,uBAAwB,CAAEH,KAAM,mDAAR,CAJb,CAF8B;;AAQ3CI,aAAc;AACZC,OAAQ;AACNL,yBADM;AAENM,QAAS,iBAAEC,MAAF,CAAUC,IAAV,CAAgBC,OAAhB,UAAsCC,cAAtC,MAA2BC,SAA3B,OAA2DD,eAAcE,YAAd,CAA4B,MAA5B,CAAoC,CAAEb,GAAIW,cAAcG,eAAd,EAAN,CAApC,CAA3D,EAFH,CADI,CAR6B;;;AAc3CC,oBAAqB;;;;;AAKlBL,OALkB,WACnBV,GADmB,OACnBA,EADmB,CAEnBE,gBAFmB,OAEnBA,gBAFmB,CAGnBC,UAHmB,OAGnBA,UAHmB,CAInBC,sBAJmB,OAInBA,sBAJmB,IAKIO,cALJ,OAKPC,SALO;;;AAQbI,QARa,CAQFL,cAAcG,eAAd,EARE;;AAUbH,cAAcM,MAAd,CAAsB,MAAtB,CAA8B;AAClCjB,GAAIgB,QAD8B;AAElCd,iCAFkC;AAGlCE,6CAHkC;AAIlCD,qBAJkC,CAA9B,CAVa;;;AAiBZ,CAAEa,iBAAF,CAjBY,2DAdsB,CAA9B,C","file":"Viewer_update.js","sourcesContent":["// @flow weak\n\nimport { fromGlobalId, mutationWithClientMutationId } from 'graphql-relay'\nimport { GraphQLString, GraphQLID, GraphQLNonNull } from 'graphql'\n\nimport ViewerType from '../../../../graphql/type/ViewerType'\n\n\nexport default mutationWithClientMutationId( {\n  name: 'Viewer_update',\n  inputFields: {\n    id: { type: new GraphQLNonNull( GraphQLID ) },\n    User_DisplayName: { type: new GraphQLNonNull( GraphQLString ) },\n    User_Email: { type: new GraphQLNonNull( GraphQLString ) },\n    User_PhoneNumberMobile: { type: new GraphQLNonNull( GraphQLString ) },\n  },\n  outputFields: {\n    Viewer: {\n      type: ViewerType,\n      resolve: ( parent, args, context, { rootValue: objectManager } ) => objectManager.getOneObject( 'User', { id: objectManager.getViewerUserId() } )\n    },\n  },\n  mutateAndGetPayload: async( {\n    id,\n    User_DisplayName,\n    User_Email,\n    User_PhoneNumberMobile,\n  }, context, { rootValue: objectManager } ) => {\n    // Do not use the passed ID at this point. Use the viewer user ID since it is verified\n    //const local_id = fromGlobalId( id ).id\n    const local_id = objectManager.getViewerUserId()\n\n    await objectManager.update( 'User', {\n      id: local_id,\n      User_DisplayName,\n      User_PhoneNumberMobile,\n      User_Email,\n    } )\n\n    return { local_id }\n  },\n} )\n"]}