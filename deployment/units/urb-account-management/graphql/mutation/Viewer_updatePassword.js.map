{"version":3,"sources":["../../../../../units/urb-account-management/graphql/mutation/Viewer_updatePassword.js"],"names":["name","inputFields","id","type","User_AccountPassword_Current","User_AccountPassword","outputFields","Viewer","resolve","parent","args","context","objectManager","rootValue","getOneObject","getViewerUserId","ErrorMessage","mutateAndGetPayload","local_id","a_User","promiseBcryptCompare","promiseBcryptHash","newHash","update","pass1","pass2","Promise","reject","compare","err","passwordsMatch","pass","hash"],"mappings":";;AAEA,kC;AACA;AACA;;AAEA,+D;AACA,8D;;;AAGe,+CAA8B;AAC3CA,KAAM,uBADqC;AAE3CC,YAAa;AACXC,GAAI,CAAEC,KAAM,+CAAR,CADO;AAEXC,6BAA8B,CAAED,KAAM,mDAAR,CAFnB;AAGXE,qBAAsB,CAAEF,KAAM,mDAAR,CAHX,CAF8B;;AAO3CG,aAAc;AACZC,OAAQ;AACNJ,yBADM;AAENK,QAAS,iBAAEC,MAAF,CAAUC,IAAV,CAAgBC,OAAhB,UAAsCC,cAAtC,MAA2BC,SAA3B,OAA2DD,eAAcE,YAAd,CAA4B,MAA5B,CAAoC,CAAEZ,GAAIU,cAAcG,eAAd,EAAN,CAApC,CAA3D,EAFH,CADI;;AAKZC,aAAc,CAAEb,2BAAF,CAAuBK,QAAS,iBAAEC,MAAF,QAAcA,QAAOO,YAArB,EAAhC,CALF,CAP6B;;AAc3CC,oBAAqB;;;;AAIlBN,OAJkB,WACnBT,GADmB,OACnBA,EADmB,CAEnBE,4BAFmB,OAEnBA,4BAFmB,CAGnBC,oBAHmB,OAGnBA,oBAHmB,IAIIO,cAJJ,OAIPC,SAJO;;;AAObK,QAPa,CAOFN,cAAcG,eAAd,EAPE;;AASb,2BAAc,IAAd,CATa;;AAWEH,cAAcE,YAAd,CAA4B,MAA5B,CAAoC;AACvDZ,GAAIgB,QADmD,CAApC,CAXF,SAWbC,MAXa;;;AAefH,YAfe,CAeA,EAfA;AAgBTI,qBAAsBhB,4BAAtB,CAAoDe,OAAOd,oBAA3D,CAhBS;AAiBKgB,kBAAmBhB,oBAAnB,CAjBL,UAiBXiB,OAjBW;AAkBXV,cAAcW,MAAd,CAAsB,MAAtB,CAA8B;AAClCrB,GAAIgB,QAD8B;AAElCb,qBAAsBiB,OAFY,CAA9B,CAlBW;;;AAuBjBN,aAAe,4BAAf,CAvBiB;;AAyBZ,CAAEA,yBAAF,CAzBY,4DAdsB,CAA9B,C;;;;AA2Cf,QAASI,qBAAT,CAA+BI,KAA/B,CAAsCC,KAAtC,CAA8C;AAC5C,MAAO,IAAIC,QAAJ,CAAa,SAAElB,OAAF,CAAWmB,MAAX,QAAuB,oBAASC,OAAT,CAAkBJ,KAAlB,CAAyBC,KAAzB;AACzC,SAAEI,GAAF,CAAOC,cAAP,CAA2B;AACzB,GAAID,GAAJ;AACEF,OAAQE,GAAR,EADF;;AAGErB,QAASsB,cAAT;AACH,CANwC,CAAvB,EAAb,CAAP;AAOD;;AAED,QAAST,kBAAT,CAA4BU,IAA5B,CAAmC;AACjC,MAAO,IAAIL,QAAJ,CAAa,SAAElB,OAAF,CAAWmB,MAAX,QAAuB,oBAASK,IAAT,CAAeD,IAAf,CAAqB,CAArB;AACzC,SAAEF,GAAF,CAAOG,IAAP,CAAiB;AACf,GAAIH,GAAJ;AACEF,OAAQE,GAAR,EADF;;AAGErB,QAASwB,IAAT;AACH,CANwC,CAAvB,EAAb,CAAP;AAOD","file":"Viewer_updatePassword.js","sourcesContent":["// @flow weak\n\nimport bcryptjs from 'bcryptjs'\nimport { fromGlobalId, mutationWithClientMutationId } from 'graphql-relay'\nimport { GraphQLString, GraphQLID, GraphQLNonNull } from 'graphql'\n\nimport ViewerType from '../../../../graphql/type/ViewerType'\nimport delayPromise from '../../../../scripts/delayPromise'\n\n\nexport default mutationWithClientMutationId( {\n  name: 'Viewer_updatePassword',\n  inputFields: {\n    id: { type: new GraphQLNonNull( GraphQLID ) },\n    User_AccountPassword_Current: { type: new GraphQLNonNull( GraphQLString ) },\n    User_AccountPassword: { type: new GraphQLNonNull( GraphQLString ) },\n  },\n  outputFields: {\n    Viewer: {\n      type: ViewerType,\n      resolve: ( parent, args, context, { rootValue: objectManager } ) => objectManager.getOneObject( 'User', { id: objectManager.getViewerUserId() } )\n    },\n    ErrorMessage: { type: GraphQLString, resolve: ( parent ) => parent.ErrorMessage, }\n  },\n  mutateAndGetPayload: async( {\n    id,\n    User_AccountPassword_Current,\n    User_AccountPassword\n  }, context, { rootValue: objectManager } ) => {\n    // Do not use the passed ID at this point. Use the viewer user ID since it is verified\n    //const local_id = fromGlobalId( id ).id\n    const local_id = objectManager.getViewerUserId()\n\n    await delayPromise( 1000 ) // Wait for a second to hinder a possible potential force attack\n\n    const a_User = await objectManager.getOneObject( 'User', {\n      id: local_id\n    } )\n\n    let ErrorMessage = \"\" // No error if empty\n    if( await promiseBcryptCompare( User_AccountPassword_Current, a_User.User_AccountPassword ) ) {\n      const newHash = await promiseBcryptHash( User_AccountPassword )\n      await objectManager.update( 'User', {\n        id: local_id,\n        User_AccountPassword: newHash,\n      } )\n    } else\n      ErrorMessage = \"Incorrect current password\"\n\n    return { ErrorMessage }\n  },\n} )\n\nfunction promiseBcryptCompare( pass1, pass2 ) {\n  return new Promise( ( resolve, reject ) => bcryptjs.compare( pass1, pass2,\n    ( err, passwordsMatch ) => {\n      if( err )\n        reject( err )\n      else\n        resolve( passwordsMatch )\n    } ) )\n}\n\nfunction promiseBcryptHash( pass ) {\n  return new Promise( ( resolve, reject ) => bcryptjs.hash( pass, 8,\n    ( err, hash ) => {\n      if( err )\n        reject( err )\n      else\n        resolve( hash )\n    } ) )\n}\n"]}