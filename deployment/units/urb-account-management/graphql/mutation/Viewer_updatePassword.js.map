{"version":3,"sources":["../../../../../units/urb-account-management/graphql/mutation/Viewer_updatePassword.js"],"names":["name","inputFields","id","type","User_AccountPassword_Current","User_AccountPassword","outputFields","Viewer","resolve","parent","args","context","objectManager","rootValue","getOneObject","getViewerUserId","ErrorMessage","mutateAndGetPayload","local_id","a_User","promiseBcryptCompare","promiseBcryptHash","newHash","update","pass1","pass2","Promise","reject","compare","err","passwordsMatch","pass","hash"],"mappings":";;AAEA,8B;AACA;AACA;;AAEA,+D;AACA,8D;;AAEe,+CAA6B;AAC1CA,KAAM,uBADoC;AAE1CC,YAAa;AACXC,GAAI,CAAEC,KAAM,+CAAR,CADO;AAEXC,6BAA8B,CAAED,KAAM,mDAAR,CAFnB;AAGXE,qBAAsB,CAAEF,KAAM,mDAAR,CAHX,CAF6B;;AAO1CG,aAAc;AACZC,OAAQ;AACNJ,yBADM;AAENK,QAAS,iBAACC,MAAD,CAASC,IAAT,CAAeC,OAAf,UAAqCC,cAArC,MAA0BC,SAA1B;AACPD,cAAcE,YAAd,CAA2B,MAA3B,CAAmC,CAAEZ,GAAIU,cAAcG,eAAd,EAAN,CAAnC,CADO,GAFH,CADI;;AAMZC,aAAc,CAAEb,2BAAF,CAAuBK,QAAS,+BAAUC,QAAOO,YAAjB,EAAhC,CANF,CAP4B;;AAe1CC,oBAAqB;;AAEnBN,OAFmB,WACjBT,GADiB,OACjBA,EADiB,CACbE,4BADa,OACbA,4BADa,CACiBC,oBADjB,OACiBA,oBADjB;AAGNO,aAHM,OAGjBC,SAHiB;;;;AAObK,QAPa,CAOFN,cAAcG,eAAd,EAPE;;AASb,2BAAa,IAAb,CATa;;AAWEH,cAAcE,YAAd,CAA2B,MAA3B,CAAmC;AACtDZ,GAAIgB,QADkD,CAAnC,CAXF,SAWbC,MAXa;;;AAefH,YAfe,CAeA,EAfA;AAgBTI,qBAAqBhB,4BAArB,CAAmDe,OAAOd,oBAA1D,CAhBS;AAiBKgB,kBAAkBhB,oBAAlB,CAjBL,UAiBXiB,OAjBW;AAkBXV,cAAcW,MAAd,CAAqB,MAArB,CAA6B;AACjCrB,GAAIgB,QAD6B;AAEjCb,qBAAsBiB,OAFW,CAA7B,CAlBW;;AAsBZN,aAAe,4BAAf,CAtBY;;AAwBZ,CAAEA,yBAAF,CAxBY,4DAfqB,CAA7B,C;;;;AA2Cf,QAASI,qBAAT,CAA8BI,KAA9B,CAAqCC,KAArC,CAA4C;AAC1C,MAAO,IAAIC,QAAJ,CAAY,SAAClB,OAAD,CAAUmB,MAAV;AACjB,iBAAOC,OAAP,CAAeJ,KAAf,CAAsBC,KAAtB,CAA6B,SAACI,GAAD,CAAMC,cAAN,CAAyB;AACpD,GAAID,GAAJ,CAASF,OAAOE,GAAP,EAAT;AACKrB,QAAQsB,cAAR;AACN,CAHD,CADiB,GAAZ,CAAP;;AAMD;;AAED,QAAST,kBAAT,CAA2BU,IAA3B,CAAiC;AAC/B,MAAO,IAAIL,QAAJ,CAAY,SAAClB,OAAD,CAAUmB,MAAV;AACjB,iBAAOK,IAAP,CAAYD,IAAZ,CAAkB,CAAlB,CAAqB,SAACF,GAAD,CAAMG,IAAN,CAAe;AAClC,GAAIH,GAAJ,CAASF,OAAOE,GAAP,EAAT;AACKrB,QAAQwB,IAAR;AACN,CAHD,CADiB,GAAZ,CAAP;;AAMD","file":"Viewer_updatePassword.js","sourcesContent":["// @flow\n\nimport bcrypt from 'bcrypt'\nimport { fromGlobalId, mutationWithClientMutationId } from 'graphql-relay'\nimport { GraphQLString, GraphQLID, GraphQLNonNull } from 'graphql'\n\nimport ViewerType from '../../../../graphql/type/ViewerType'\nimport delayPromise from '../../../../scripts/delayPromise'\n\nexport default mutationWithClientMutationId({\n  name: 'Viewer_updatePassword',\n  inputFields: {\n    id: { type: new GraphQLNonNull(GraphQLID) },\n    User_AccountPassword_Current: { type: new GraphQLNonNull(GraphQLString) },\n    User_AccountPassword: { type: new GraphQLNonNull(GraphQLString) },\n  },\n  outputFields: {\n    Viewer: {\n      type: ViewerType,\n      resolve: (parent, args, context, { rootValue: objectManager }) =>\n        objectManager.getOneObject('User', { id: objectManager.getViewerUserId() }),\n    },\n    ErrorMessage: { type: GraphQLString, resolve: parent => parent.ErrorMessage },\n  },\n  mutateAndGetPayload: async (\n    { id, User_AccountPassword_Current, User_AccountPassword },\n    context,\n    { rootValue: objectManager },\n  ) => {\n    // Do not use the passed ID at this point. Use the viewer user ID since it is verified\n    //const local_id = fromGlobalId( id ).id\n    const local_id = objectManager.getViewerUserId()\n\n    await delayPromise(1000) // Wait for a second to hinder a possible potential force attack\n\n    const a_User = await objectManager.getOneObject('User', {\n      id: local_id,\n    })\n\n    let ErrorMessage = '' // No error if empty\n    if (await promiseBcryptCompare(User_AccountPassword_Current, a_User.User_AccountPassword)) {\n      const newHash = await promiseBcryptHash(User_AccountPassword)\n      await objectManager.update('User', {\n        id: local_id,\n        User_AccountPassword: newHash,\n      })\n    } else ErrorMessage = 'Incorrect current password'\n\n    return { ErrorMessage }\n  },\n})\n\nfunction promiseBcryptCompare(pass1, pass2) {\n  return new Promise((resolve, reject) =>\n    bcrypt.compare(pass1, pass2, (err, passwordsMatch) => {\n      if (err) reject(err)\n      else resolve(passwordsMatch)\n    }),\n  )\n}\n\nfunction promiseBcryptHash(pass) {\n  return new Promise((resolve, reject) =>\n    bcrypt.hash(pass, 8, (err, hash) => {\n      if (err) reject(err)\n      else resolve(hash)\n    }),\n  )\n}\n"]}