{"version":3,"sources":["../../../../../units/urb-account-management/webapp/components/User_UpdatePassword.js"],"names":["User_Properties","props","context","_handle_Close_Snackbar","setState","SnackbarOpen","_handle_onChange_User_AccountPassword_Current","event","User_AccountPassword_Current","target","value","validateInputs","state","User_AccountPassword","User_AccountPasswordConfirmation","_handle_onChange_User_AccountPassword","passwordScore","User_AccountPasswordStrength","_handle_onChange_User_AccountPasswordConfirmation","_handleUpdate","onFailure","SnackbarMessage","User_AccountPassword_CurrentError","User_AccountPasswordError","User_AccountPasswordConfirmationError","onSuccess","response","ErrorMessage","Viewer_updatePassword","length","relay","commitUpdate","Viewer","currentPassword","password","passwordConfirmation","User_IsAnonymous","Component","contextTypes","PropTypes","Environment","createContainer","fragments","getFragment"],"mappings":"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","file":"User_UpdatePassword.js","sourcesContent":["// @flow weak\n\n\nimport React from 'react';\nimport Relay from 'react-relay';\n\nimport {Card, CardHeader, CardText} from 'material-ui/Card';\nimport LinearProgress from 'material-ui/LinearProgress';\nimport RaisedButton from 'material-ui/RaisedButton';\nimport Snackbar from 'material-ui/Snackbar';\nimport TextField from 'material-ui/TextField';\n\nimport {\n  AccountPasswordStrengthMin,\n  AccountPasswordStrengthGood,\n} from '../../../../configuration/units/urb-account-management/accountNameAndPasswordRequirements';\nimport { RequiresAuthenticationNotice } from './RequiresAuthentication.js';\nimport scorePassword from '../../../../configuration/units/urb-account-management/scripts/scorePassword';\nimport Viewer_updatePasswordMutation from '../../relay/Viewer_updatePasswordMutation';\n\n\nclass User_Properties extends React.Component\n{\n  static contextTypes = {\n    relay: Relay.PropTypes.Environment,\n  };\n\n  constructor( props, context )\n  {\n    super( props, context );\n\n    this.state = {\n      User_AccountPassword_Current: \"\",\n      User_AccountPassword_CurrentError: \"\",\n      User_AccountPassword: \"\",\n      User_AccountPasswordError: \"Enter password\",\n      User_AccountPasswordConfirmation: \"\",\n      User_AccountPasswordConfirmationError: \"Confirm password\",\n      User_AccountPasswordStrength: 0,\n      SnackbarOpen: false,\n      SnackbarMessage: \"\",\n    };\n  }\n\n  _handle_Close_Snackbar = () =>\n  {\n    this.setState( { SnackbarOpen: false } );\n  };\n\n  _handle_onChange_User_AccountPassword_Current = ( event ) =>\n  {\n    this.setState( { User_AccountPassword_Current: event.target.value } );\n\n    this.validateInputs( event.target.value, this.state.User_AccountPassword, this.state.User_AccountPasswordConfirmation );\n  };\n\n  _handle_onChange_User_AccountPassword = ( event ) =>\n  {\n    const passwordScore = scorePassword( event.target.value );\n\n    this.setState( {\n      User_AccountPassword: event.target.value,\n      User_AccountPasswordStrength: passwordScore,\n    } );\n\n    this.validateInputs( this.state.User_AccountPassword_Current, event.target.value, this.state.User_AccountPasswordConfirmation );\n  };\n\n  _handle_onChange_User_AccountPasswordConfirmation = ( event ) =>\n  {\n    this.setState( { User_AccountPasswordConfirmation: event.target.value } );\n\n    this.validateInputs( this.state.User_AccountPassword_Current, this.state.User_AccountPassword, event.target.value );\n  };\n\n  validateInputs( currentPassword, password, passwordConfirmation)\n  {\n    this.setState( { User_AccountPassword_CurrentError:\n      currentPassword == \"\" ?\n        \"Enter current password\"\n        : \"\"\n    } );\n\n    this.setState( { User_AccountPasswordError:\n      password == \"\" ?\n        \"Password can not be empty\"\n        : \"\"\n    } );\n\n    this.setState( { User_AccountPasswordConfirmationError:\n      password != passwordConfirmation ?\n        \"Passwords do not match\"\n        : \"\"\n    } );\n\n    // Close snackbar since user is obviously typing\n    this.setState( { SnackbarOpen: false } );\n  }\n\n  _handleUpdate = ( ) =>\n  {\n    var onFailure = () => {\n      this.setState( {\n        SnackbarOpen: true,\n        SnackbarMessage: \"Failed to update password\",\n        User_AccountPassword_Current: \"\",\n        User_AccountPassword_CurrentError: \"\",\n        User_AccountPassword: \"\",\n        User_AccountPasswordError: \"Enter password\",\n        User_AccountPasswordConfirmation: \"\",\n        User_AccountPasswordConfirmationError: \"Confirm password\",\n        User_AccountPasswordStrength: 0,\n      } );\n    };\n\n    var onSuccess = (response) =>\n    {\n      const ErrorMessage = response.Viewer_updatePassword.ErrorMessage;\n\n      this.setState( {\n        SnackbarOpen: true,\n        SnackbarMessage: ErrorMessage.length > 0 ? \"Failed to update password: \" + ErrorMessage : \"Password updated successfully\",\n        User_AccountPassword_Current: \"\",\n        User_AccountPassword_CurrentError: \"\",\n        User_AccountPassword: \"\",\n        User_AccountPasswordError: \"Enter password\",\n        User_AccountPasswordConfirmation: \"\",\n        User_AccountPasswordConfirmationError: \"Confirm password\",\n        User_AccountPasswordStrength: 0,\n      } );\n    };\n\n    this.context.relay.commitUpdate(\n      new Viewer_updatePasswordMutation( {\n        Viewer:                       this.props.Viewer,\n        User_AccountPassword_Current: this.state.User_AccountPassword_Current,\n        User_AccountPassword:         this.state.User_AccountPassword,\n      } ),\n      {onSuccess, onFailure}\n    );\n  };\n\n  render( )\n  {\n    if( this.props.Viewer.User_IsAnonymous )\n      return <RequiresAuthenticationNotice />; // Anonymous users do not get to have a password\n    else\n      return (\n        <Card>\n          <CardHeader\n            title=\"User password\"\n          />\n          <CardText>\n            <TextField\n              ref=\"User_AccountPassword_Current\"\n              type=\"password\"\n              floatingLabelText=\"Current Password\"\n              value={ this.state.User_AccountPassword_Current }\n              errorText={ this.state.User_AccountPassword_CurrentError }\n              onChange={ this._handle_onChange_User_AccountPassword_Current }\n              fullWidth={ true }\n            />\n            <TextField\n              ref=\"User_AccountPassword\"\n              type=\"password\"\n              floatingLabelText=\"New Password\"\n              value={ this.state.User_AccountPassword }\n              errorText={ this.state.User_AccountPasswordError }\n              onChange={ this._handle_onChange_User_AccountPassword }\n              fullWidth={ true }\n            />\n            <TextField\n              ref=\"User_AccountPasswordConfirmation\"\n              type=\"password\"\n              floatingLabelText=\"Confirm New Password\"\n              value={ this.state.User_AccountPasswordConfirmation }\n              errorText={ this.state.User_AccountPasswordConfirmationError }\n              onChange={ this._handle_onChange_User_AccountPasswordConfirmation }\n              fullWidth={ true }\n            />\n            <br/><br/>Password strength\n            <LinearProgress\n              mode=\"determinate\"\n              value={ this.state.User_AccountPasswordStrength }\n              color={ this.state.User_AccountPasswordStrength < AccountPasswordStrengthMin ?\n                \"#ff0000\"\n                : ( this.state.User_AccountPasswordStrength < AccountPasswordStrengthGood ?\n                  \"#c0c000\"\n                  : \"#00d000\" )\n              }\n            />\n            <br/>\n            <div>\n              <RaisedButton\n                label=\"Update\"\n                secondary={true}\n                disabled={\n                  this.state.User_AccountPassword_CurrentError != \"\"\n                  ||\n                  this.state.User_AccountPasswordError != \"\"\n                  ||\n                  this.state.User_AccountPasswordConfirmationError != \"\"\n                }\n                onTouchTap={ ( ) => this._handleUpdate( ) }\n              />\n            </div>\n          </CardText>\n          <Snackbar\n            open={ this.state.SnackbarOpen }\n            message={ this.state.SnackbarMessage }\n            autoHideDuration={ 15000 }\n            onRequestClose={ this._handle_Close_Snackbar }\n          />\n        </Card>\n      );\n  }\n}\n\nexport default Relay.createContainer( User_Properties, {\n  fragments: {\n    Viewer: ( ) => Relay.QL`\n      fragment on Viewer{\n        User_IsAnonymous,\n        ${Viewer_updatePasswordMutation.getFragment('Viewer')},\n      }\n    `,\n  }\n} );\n"]}