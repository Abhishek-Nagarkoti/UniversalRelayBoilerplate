{"version":3,"sources":["../../../../../units/urb-account-management/webapp/components/User_UpdatePassword.js"],"names":["User_Properties","props","context","_handle_Close_Snackbar","setState","SnackbarOpen","_handle_onChange_User_AccountPassword_Current","User_AccountPassword_Current","event","target","value","validateInputs","state","User_AccountPassword","User_AccountPasswordConfirmation","_handle_onChange_User_AccountPassword","passwordScore","User_AccountPasswordStrength","_handle_onChange_User_AccountPasswordConfirmation","_handleUpdate","onFailure","SnackbarMessage","User_AccountPassword_CurrentError","User_AccountPasswordError","User_AccountPasswordConfirmationError","onSuccess","ErrorMessage","response","Viewer_updatePassword","length","relay","commitUpdate","Viewer","currentPassword","password","passwordConfirmation","User_IsAnonymous","Component","contextTypes","PropTypes","Environment","createContainer","fragments","getFragment"],"mappings":"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","file":"User_UpdatePassword.js","sourcesContent":["// @flow\n\nimport React from 'react'\nimport Relay from 'react-relay'\n\nimport { Card, CardHeader, CardText } from 'material-ui/Card'\nimport LinearProgress from 'material-ui/LinearProgress'\nimport RaisedButton from 'material-ui/RaisedButton'\nimport Snackbar from 'material-ui/Snackbar'\nimport TextField from 'material-ui/TextField'\n\nimport {\n  AccountPasswordStrengthMin,\n  AccountPasswordStrengthGood,\n} from '../../../../configuration/units/urb-account-management/accountNameAndPasswordRequirements'\nimport { RequiresAuthenticationNotice } from './RequiresAuthentication.js'\nimport scorePassword from '../../../../configuration/units/urb-account-management/scripts/scorePassword'\nimport Viewer_updatePasswordMutation from '../../relay/Viewer_updatePasswordMutation'\n\nclass User_Properties extends React.Component {\n  static contextTypes = {\n    relay: Relay.PropTypes.Environment,\n  }\n\n  constructor(props, context) {\n    super(props, context)\n\n    this.state = {\n      User_AccountPassword_Current: '',\n      User_AccountPassword_CurrentError: '',\n      User_AccountPassword: '',\n      User_AccountPasswordError: 'Enter password',\n      User_AccountPasswordConfirmation: '',\n      User_AccountPasswordConfirmationError: 'Confirm password',\n      User_AccountPasswordStrength: 0,\n      SnackbarOpen: false,\n      SnackbarMessage: '',\n    }\n  }\n\n  _handle_Close_Snackbar = () => {\n    this.setState({ SnackbarOpen: false })\n  }\n\n  _handle_onChange_User_AccountPassword_Current = event => {\n    this.setState({ User_AccountPassword_Current: event.target.value })\n\n    this.validateInputs(\n      event.target.value,\n      this.state.User_AccountPassword,\n      this.state.User_AccountPasswordConfirmation,\n    )\n  }\n\n  _handle_onChange_User_AccountPassword = event => {\n    const passwordScore = scorePassword(event.target.value)\n\n    this.setState({\n      User_AccountPassword: event.target.value,\n      User_AccountPasswordStrength: passwordScore,\n    })\n\n    this.validateInputs(\n      this.state.User_AccountPassword_Current,\n      event.target.value,\n      this.state.User_AccountPasswordConfirmation,\n    )\n  }\n\n  _handle_onChange_User_AccountPasswordConfirmation = event => {\n    this.setState({ User_AccountPasswordConfirmation: event.target.value })\n\n    this.validateInputs(\n      this.state.User_AccountPassword_Current,\n      this.state.User_AccountPassword,\n      event.target.value,\n    )\n  }\n\n  validateInputs(currentPassword, password, passwordConfirmation) {\n    this.setState({\n      User_AccountPassword_CurrentError: currentPassword == '' ? 'Enter current password' : '',\n    })\n\n    this.setState({\n      User_AccountPasswordError: password == '' ? 'Password can not be empty' : '',\n    })\n\n    this.setState({\n      User_AccountPasswordConfirmationError: password != passwordConfirmation\n        ? 'Passwords do not match'\n        : '',\n    })\n\n    // Close snackbar since user is obviously typing\n    this.setState({ SnackbarOpen: false })\n  }\n\n  _handleUpdate = () => {\n    var onFailure = () => {\n      this.setState({\n        SnackbarOpen: true,\n        SnackbarMessage: 'Failed to update password',\n        User_AccountPassword_Current: '',\n        User_AccountPassword_CurrentError: '',\n        User_AccountPassword: '',\n        User_AccountPasswordError: 'Enter password',\n        User_AccountPasswordConfirmation: '',\n        User_AccountPasswordConfirmationError: 'Confirm password',\n        User_AccountPasswordStrength: 0,\n      })\n    }\n\n    var onSuccess = response => {\n      const ErrorMessage = response.Viewer_updatePassword.ErrorMessage\n\n      this.setState({\n        SnackbarOpen: true,\n        SnackbarMessage: ErrorMessage.length > 0\n          ? 'Failed to update password: ' + ErrorMessage\n          : 'Password updated successfully',\n        User_AccountPassword_Current: '',\n        User_AccountPassword_CurrentError: '',\n        User_AccountPassword: '',\n        User_AccountPasswordError: 'Enter password',\n        User_AccountPasswordConfirmation: '',\n        User_AccountPasswordConfirmationError: 'Confirm password',\n        User_AccountPasswordStrength: 0,\n      })\n    }\n\n    this.context.relay.commitUpdate(\n      new Viewer_updatePasswordMutation({\n        Viewer: this.props.Viewer,\n        User_AccountPassword_Current: this.state.User_AccountPassword_Current,\n        User_AccountPassword: this.state.User_AccountPassword,\n      }),\n      { onSuccess, onFailure },\n    )\n  }\n\n  render() {\n    if (this.props.Viewer.User_IsAnonymous)\n      return <RequiresAuthenticationNotice /> // Anonymous users do not get to have a password\n    else\n      return (\n        <Card>\n          <CardHeader title=\"User password\" />\n          <CardText>\n            <TextField\n              ref=\"User_AccountPassword_Current\"\n              type=\"password\"\n              floatingLabelText=\"Current Password\"\n              value={this.state.User_AccountPassword_Current}\n              errorText={this.state.User_AccountPassword_CurrentError}\n              onChange={this._handle_onChange_User_AccountPassword_Current}\n              fullWidth={true}\n            />\n            <TextField\n              ref=\"User_AccountPassword\"\n              type=\"password\"\n              floatingLabelText=\"New Password\"\n              value={this.state.User_AccountPassword}\n              errorText={this.state.User_AccountPasswordError}\n              onChange={this._handle_onChange_User_AccountPassword}\n              fullWidth={true}\n            />\n            <TextField\n              ref=\"User_AccountPasswordConfirmation\"\n              type=\"password\"\n              floatingLabelText=\"Confirm New Password\"\n              value={this.state.User_AccountPasswordConfirmation}\n              errorText={this.state.User_AccountPasswordConfirmationError}\n              onChange={this._handle_onChange_User_AccountPasswordConfirmation}\n              fullWidth={true}\n            />\n            <br /><br />Password strength\n            <LinearProgress\n              mode=\"determinate\"\n              value={this.state.User_AccountPasswordStrength}\n              color={\n                this.state.User_AccountPasswordStrength < AccountPasswordStrengthMin\n                  ? '#ff0000'\n                  : this.state.User_AccountPasswordStrength < AccountPasswordStrengthGood\n                    ? '#c0c000'\n                    : '#00d000'\n              }\n            />\n            <br />\n            <div>\n              <RaisedButton\n                label=\"Update\"\n                secondary={true}\n                disabled={\n                  this.state.User_AccountPassword_CurrentError != '' ||\n                  this.state.User_AccountPasswordError != '' ||\n                  this.state.User_AccountPasswordConfirmationError != ''\n                }\n                onTouchTap={() => this._handleUpdate()}\n              />\n            </div>\n          </CardText>\n          <Snackbar\n            open={this.state.SnackbarOpen}\n            message={this.state.SnackbarMessage}\n            autoHideDuration={15000}\n            onRequestClose={this._handle_Close_Snackbar}\n          />\n        </Card>\n      )\n  }\n}\n\nexport default Relay.createContainer(User_Properties, {\n  fragments: {\n    Viewer: () => Relay.QL`\n      fragment on Viewer{\n        User_IsAnonymous,\n        ${Viewer_updatePasswordMutation.getFragment('Viewer')},\n      }\n    `,\n  },\n})\n"]}