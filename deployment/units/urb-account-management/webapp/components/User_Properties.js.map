{"version":3,"sources":["../../../../../units/urb-account-management/webapp/components/User_Properties.js"],"names":["User_Properties","props","context","_handleUpdate","relay","commitUpdate","Viewer","User_DisplayName","refs","getValue","User_Email","User_PhoneNumberMobile","User_IsAnonymous","User_AccountName","Component","contextTypes","PropTypes","Environment","createContainer","fragments","getFragment"],"mappings":";;;AAGA,4B;AACA,uC;;AAEA;AACA,sD;AACA,gD;;AAEA;;AAEA,wE;;;AAGMA,e;;;;;;AAMJ,yBAAaC,KAAb,CAAoBC,OAApB;AACA;AACSD,KADT,CACgBC,OADhB;;;AAIAC,aAJA,CAIgB;AAChB;AACE,MAAKD,OAAL,CAAaE,KAAb,CAAmBC,YAAnB;AACE,oCAA2B;AACzBC,OAAwB,MAAKL,KAAL,CAAWK,MADV;AAEzBC,iBAAwB,MAAKC,IAAL,CAAUD,gBAAV,CAA2BE,QAA3B,EAFC;AAGzBC,WAAwB,MAAKF,IAAL,CAAUE,UAAV,CAAqBD,QAArB,EAHC;AAIzBE,uBAAwB,MAAKH,IAAL,CAAUG,sBAAV,CAAiCF,QAAjC,EAJC,CAA3B,CADF;;;AAQD,CAdD,cAEC,C;;;AAeD;AACE,GAAI,KAAKR,KAAL,CAAWK,MAAX,CAAkBM,gBAAtB;AACE,MAAO,yFAAP,CADF;;AAGE;AACE;AACE;AACE,MAAM,cADR,EADF;;AAIE;AACE;AACE,MAAQ,KAAKX,KAAL,CAAWK,MAAX,CAAkBO,gBAD5B;AAEE,kBAAkB,0BAFpB;AAGE,UAAY,IAHd,EADF;;AAME;AACE,IAAI,kBADN;AAEE,aAAe,KAAKZ,KAAL,CAAWK,MAAX,CAAkBC,gBAFnC;AAGE,kBAAkB,cAHpB;AAIE,UAAY,IAJd,EANF;;AAYE;AACE,IAAI,YADN;AAEE,aAAe,KAAKN,KAAL,CAAWK,MAAX,CAAkBI,UAFnC;AAGE,kBAAkB,OAHpB;AAIE,UAAY,IAJd,EAZF;;AAkBE;AACE,IAAI,wBADN;AAEE,aAAe,KAAKT,KAAL,CAAWK,MAAX,CAAkBK,sBAFnC;AAGE,kBAAkB,gBAHpB;AAIE,UAAY,IAJd,EAlBF;;AAwBE;AACE;AACE,MAAM,QADR;AAEE,UAAW,IAFb;AAGE,WAAa,4BAAO,QAAKR,aAAL,EAAP,EAHf,EADF,CAxBF,CAJF,CADF;;;;;;AAuCH,C,6BAnE2B,gBAAMW,S,EAA9Bd,e,CAEGe,Y,CAAe,CACpBX,MAAO,qBAAMY,SAAN,CAAgBC,WADH,C;;;AAoET,qBAAMC,eAAN,CAAuBlB,eAAvB,CAAwC;AACrDmB,UAAW;AACTb,OAAQ;;;;;;;AAOF,gCAAsBc,WAAtB,CAAkC,QAAlC,CAPE,GADC,CAD0C,CAAxC,C","file":"User_Properties.js","sourcesContent":["// @flow weak\n/* eslint react/prop-types: 0 */\n\nimport React from 'react';\nimport Relay from 'react-relay';\n\nimport {Card, CardHeader, CardText} from 'material-ui/Card';\nimport RaisedButton from 'material-ui/RaisedButton';\nimport TextField from 'material-ui/TextField';\n\nimport { RequiresAuthenticationNotice } from './RequiresAuthentication.js';\n\nimport Viewer_updateMutation from '../../relay/Viewer_updateMutation';\n\n\nclass User_Properties extends React.Component\n{\n  static contextTypes = {\n    relay: Relay.PropTypes.Environment,\n  };\n\n  constructor( props, context )\n  {\n    super( props, context );\n  }\n\n  _handleUpdate = ( ) =>\n  {\n    this.context.relay.commitUpdate(\n      new Viewer_updateMutation( {\n        Viewer:                 this.props.Viewer,\n        User_DisplayName:       this.refs.User_DisplayName.getValue( ),\n        User_Email:             this.refs.User_Email.getValue( ),\n        User_PhoneNumberMobile: this.refs.User_PhoneNumberMobile.getValue( ),\n      } )\n    );\n  };\n\n  render( )\n  {\n    if( this.props.Viewer.User_IsAnonymous )\n      return <RequiresAuthenticationNotice />; // Anonymous users do not get to have a profile\n    else\n      return (\n        <Card>\n          <CardHeader\n            title=\"User profile\"\n          />\n          <CardText>\n            <TextField\n              value={ this.props.Viewer.User_AccountName }\n              floatingLabelText=\"Account Name (read only)\"\n              fullWidth={ true }\n            />\n            <TextField\n              ref=\"User_DisplayName\"\n              defaultValue={ this.props.Viewer.User_DisplayName }\n              floatingLabelText=\"Display Name\"\n              fullWidth={ true }\n            />\n            <TextField\n              ref=\"User_Email\"\n              defaultValue={ this.props.Viewer.User_Email }\n              floatingLabelText=\"Email\"\n              fullWidth={ true }\n            />\n            <TextField\n              ref=\"User_PhoneNumberMobile\"\n              defaultValue={ this.props.Viewer.User_PhoneNumberMobile }\n              floatingLabelText=\"Mobile Phone #\"\n              fullWidth={ true }\n            />\n            <div>\n              <RaisedButton\n                label=\"Update\"\n                secondary={true}\n                onTouchTap={ ( ) => this._handleUpdate( ) }\n              />\n            </div>\n          </CardText>\n        </Card>\n      );\n  }\n}\n\nexport default Relay.createContainer( User_Properties, {\n  fragments: {\n    Viewer: ( ) => Relay.QL`\n      fragment on Viewer{\n        User_IsAnonymous,\n        User_AccountName,\n        User_DisplayName,\n        User_Email,\n        User_PhoneNumberMobile,\n        ${Viewer_updateMutation.getFragment('Viewer')},\n      }\n    `,\n  }\n} );\n"]}