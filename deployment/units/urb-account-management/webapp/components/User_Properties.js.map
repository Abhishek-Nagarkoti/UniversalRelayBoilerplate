{"version":3,"sources":["../../../../../units/urb-account-management/webapp/components/User_Properties.js"],"names":["User_Properties","props","context","_handleUpdate","relay","commitUpdate","Viewer","User_DisplayName","refs","getValue","User_Email","User_PhoneNumberMobile","User_IsAnonymous","User_AccountName","Component","contextTypes","PropTypes","Environment","createContainer","fragments","getFragment"],"mappings":";;AAEA,4B;AACA,uC;;AAEA;AACA,sD;AACA,gD;;AAEA;;AAEA,wE;;AAEMA,e;;;;;AAKJ,yBAAYC,KAAZ,CAAmBC,OAAnB,CAA4B;AACpBD,KADoB,CACbC,OADa;;;AAI5BC,aAJ4B,CAIZ,UAAM;AACpB,MAAKD,OAAL,CAAaE,KAAb,CAAmBC,YAAnB;AACE,oCAA0B;AACxBC,OAAQ,MAAKL,KAAL,CAAWK,MADK;AAExBC,iBAAkB,MAAKC,IAAL,CAAUD,gBAAV,CAA2BE,QAA3B,EAFM;AAGxBC,WAAY,MAAKF,IAAL,CAAUE,UAAV,CAAqBD,QAArB,EAHY;AAIxBE,uBAAwB,MAAKH,IAAL,CAAUG,sBAAV,CAAiCF,QAAjC,EAJA,CAA1B,CADF;;;AAQD,CAb2B,cAE3B,C;;AAaQ;AACP,GAAI,KAAKR,KAAL,CAAWK,MAAX,CAAkBM,gBAAtB;AACE,MAAO,yFAAP,CADF;;AAGE;AACE;AACE,gDAAY,MAAM,cAAlB,EADF;AAEE;AACE;AACE,MAAO,KAAKX,KAAL,CAAWK,MAAX,CAAkBO,gBAD3B;AAEE,kBAAkB,0BAFpB;AAGE,UAAW,IAHb,EADF;;AAME;AACE,IAAI,kBADN;AAEE,aAAc,KAAKZ,KAAL,CAAWK,MAAX,CAAkBC,gBAFlC;AAGE,kBAAkB,cAHpB;AAIE,UAAW,IAJb,EANF;;AAYE;AACE,IAAI,YADN;AAEE,aAAc,KAAKN,KAAL,CAAWK,MAAX,CAAkBI,UAFlC;AAGE,kBAAkB,OAHpB;AAIE,UAAW,IAJb,EAZF;;AAkBE;AACE,IAAI,wBADN;AAEE,aAAc,KAAKT,KAAL,CAAWK,MAAX,CAAkBK,sBAFlC;AAGE,kBAAkB,gBAHpB;AAIE,UAAW,IAJb,EAlBF;;AAwBE;AACE;AACE,MAAM,QADR;AAEE,UAAW,IAFb;AAGE,WAAY,4BAAM,QAAKR,aAAL,EAAN,EAHd,EADF,CAxBF,CAFF,CADF;;;;;;AAqCH,C,6BA7D2B,gBAAMW,S,EAA9Bd,e,CACGe,Y,CAAe,CACpBX,MAAO,qBAAMY,SAAN,CAAgBC,WADH,C;;;AA+DT,qBAAMC,eAAN,CAAsBlB,eAAtB,CAAuC;AACpDmB,UAAW;AACTb,OAAQ;;;;;;;AAOF,gCAAsBc,WAAtB,CAAkC,QAAlC,CAPE,GADC,CADyC,CAAvC,C","file":"User_Properties.js","sourcesContent":["// @flow\n\nimport React from 'react'\nimport Relay from 'react-relay'\n\nimport { Card, CardHeader, CardText } from 'material-ui/Card'\nimport RaisedButton from 'material-ui/RaisedButton'\nimport TextField from 'material-ui/TextField'\n\nimport { RequiresAuthenticationNotice } from './RequiresAuthentication.js'\n\nimport Viewer_updateMutation from '../../relay/Viewer_updateMutation'\n\nclass User_Properties extends React.Component {\n  static contextTypes = {\n    relay: Relay.PropTypes.Environment,\n  }\n\n  constructor(props, context) {\n    super(props, context)\n  }\n\n  _handleUpdate = () => {\n    this.context.relay.commitUpdate(\n      new Viewer_updateMutation({\n        Viewer: this.props.Viewer,\n        User_DisplayName: this.refs.User_DisplayName.getValue(),\n        User_Email: this.refs.User_Email.getValue(),\n        User_PhoneNumberMobile: this.refs.User_PhoneNumberMobile.getValue(),\n      }),\n    )\n  }\n\n  render() {\n    if (this.props.Viewer.User_IsAnonymous)\n      return <RequiresAuthenticationNotice /> // Anonymous users do not get to have a profile\n    else\n      return (\n        <Card>\n          <CardHeader title=\"User profile\" />\n          <CardText>\n            <TextField\n              value={this.props.Viewer.User_AccountName}\n              floatingLabelText=\"Account Name (read only)\"\n              fullWidth={true}\n            />\n            <TextField\n              ref=\"User_DisplayName\"\n              defaultValue={this.props.Viewer.User_DisplayName}\n              floatingLabelText=\"Display Name\"\n              fullWidth={true}\n            />\n            <TextField\n              ref=\"User_Email\"\n              defaultValue={this.props.Viewer.User_Email}\n              floatingLabelText=\"Email\"\n              fullWidth={true}\n            />\n            <TextField\n              ref=\"User_PhoneNumberMobile\"\n              defaultValue={this.props.Viewer.User_PhoneNumberMobile}\n              floatingLabelText=\"Mobile Phone #\"\n              fullWidth={true}\n            />\n            <div>\n              <RaisedButton\n                label=\"Update\"\n                secondary={true}\n                onTouchTap={() => this._handleUpdate()}\n              />\n            </div>\n          </CardText>\n        </Card>\n      )\n  }\n}\n\nexport default Relay.createContainer(User_Properties, {\n  fragments: {\n    Viewer: () => Relay.QL`\n      fragment on Viewer{\n        User_IsAnonymous,\n        User_AccountName,\n        User_DisplayName,\n        User_Email,\n        User_PhoneNumberMobile,\n        ${Viewer_updateMutation.getFragment('Viewer')},\n      }\n    `,\n  },\n})\n"]}