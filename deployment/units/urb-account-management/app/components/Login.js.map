{"version":3,"sources":["../../../../../units/urb-account-management/app/components/Login.js"],"names":["styles","create","container","flex","justifyContent","alignItems","backgroundColor","mode_challenge","mode_login_in_progress","mode_login_failed","Login","props","context","handle_onPress_Login","setState","mode","currentLoginAttempt","loginAttempt","UserToken1","fetch","method","headers","body","JSON","stringify","User_AccountName","state","User_AccountPassword","then","response","map","cookie","startsWith","console","log","substring","indexOf","json","responseData","success","setUserTokens","UserToken2","goToRouteByNameAndParams","errorMessage","error","ErrorMessage","done","handle_onPress_Cancel","handle_onPress_Retry","text","Component"],"mappings":"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","file":"Login.js","sourcesContent":["// @flow weak\n\nimport React from 'react'\nimport { View, Text, StyleSheet } from 'react-native'\nimport { FormLabel, FormInput } from 'react-native-elements'\n\nimport Button from '../../../../app/components/Button'\nimport LoginExtensions from '../../../../configuration/units/urb-account-management/app/components/LoginExtensions'\nimport NetworkLayer from '../../../../app/NetworkLayer'\nimport publicURL from '../../../../configuration/app/publicURL'\nimport { SuccessfulLoginRouteName, SuccessfulLoginRouteOptions } from '../../../../configuration/units/urb-account-management/app/SuccessfulLoginRoute'\nimport UrlRouter from '../../../../app/UrlRouter'\n\n\nconst styles = StyleSheet.create( {\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'stretch',\n    backgroundColor: '#f0f0f0',\n  },\n} )\n\nconst mode_challenge = 1\nconst mode_login_in_progress = 2\nconst mode_login_failed = 3\n\n\nexport default class Login extends React.Component\n{\n  constructor( props, context ) {\n    super( props, context )\n\n    this.loginAttempt = 0\n\n    this.state = {\n      mode: mode_challenge,\n      User_AccountName: \"\",\n      User_AccountPassword: \"\",\n      ErrorMessage: \"\",\n    }\n  }\n\n  handle_onPress_Login = () => {\n    this.setState( {\n      mode: mode_login_in_progress,\n    } )\n\n    const currentLoginAttempt = ++( this.loginAttempt )\n\n    let UserToken1\n\n    fetch( publicURL + '/auth/login', {\n        method: \"POST\",\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n          'Origin': '',\n        },\n        body: JSON.stringify( {\n          User_AccountName: this.state.User_AccountName,\n          User_AccountPassword: this.state.User_AccountPassword,\n        } )\n      } )\n      .then( ( response ) => {\n        if( 'set-cookie' in response.headers.map )\n          for( let cookie of response.headers.map[ 'set-cookie' ] )\n            if( cookie.startsWith( 'UserToken1=' ) ) {\n              console.log( 'cookie=' + cookie )\n              UserToken1 = cookie.substring( 11, cookie.indexOf( ';' ) )\n              console.log( 'UserToken1=' + UserToken1 )\n            }\n        return response.json()\n      } )\n      .then( ( responseData ) => {\n        if( currentLoginAttempt == this.loginAttempt ) {\n          if( responseData.success ) {\n            NetworkLayer.setUserTokens(\n              UserToken1,\n              responseData.UserToken2,\n              true,\n              () => UrlRouter.goToRouteByNameAndParams( SuccessfulLoginRouteName, SuccessfulLoginRouteOptions )\n            )\n          } else {\n            let errorMessage\n            if( responseData.error )\n              errorMessage = responseData.error\n            else\n              errorMessage = \"Login failed\"\n\n            this.setState( {\n              mode: mode_login_failed,\n              ErrorMessage: errorMessage,\n            } )\n          }\n        } else\n          console.log( \"XXX Expired login event\" )\n      } )\n      // TODO x5000 Error handling for failed login\n      .done()\n  }\n\n  handle_onPress_Cancel = () => {\n    this.loginAttempt++ // So that when the call back comes it is rejected\n\n    this.setState( {\n      mode: mode_challenge,\n      User_AccountPassword: \"\",\n    } )\n  }\n\n  handle_onPress_Retry = () => {\n    this.setState( {\n      mode: mode_challenge,\n      User_AccountPassword: \"\",\n    } )\n  }\n\n  render( )\n  {\n    if( this.state.mode == mode_challenge )\n      return (\n        <View style={styles.container}>\n          <FormLabel>Account Name</FormLabel>\n          <FormInput\n            value={this.state.User_AccountName}\n            onChangeText={(text) => this.setState({User_AccountName: text})}\n          />\n\n          <FormLabel>Password</FormLabel>\n          <FormInput\n            secureTextEntry\n            value={this.state.User_AccountPassword}\n            onChangeText={(text) => this.setState({User_AccountPassword: text})}\n          />\n          <FormLabel> </FormLabel>\n\n          <Button kind='action' onPress={ this.handle_onPress_Login } title=\"Login\" />\n          <FormLabel> </FormLabel>\n\n          <LoginExtensions />\n\n        </View>\n      )\n    else if( this.state.mode == mode_login_in_progress )\n      return (\n        <View style={styles.container}>\n          <FormLabel>Logging in as</FormLabel>\n          <FormLabel>{ this.state.User_AccountName }</FormLabel>\n          <FormLabel> </FormLabel>\n          <Button kind='action' onPress={ this.handle_onPress_Cancel } title=\"Cancel\" />\n        </View>\n      )\n    else if( this.state.mode == mode_login_failed )\n      return (\n        <View style={styles.container}>\n          <FormLabel>Failed to log in as</FormLabel>\n          <FormLabel>{ this.state.User_AccountName }</FormLabel>\n          <FormLabel>{ this.state.ErrorMessage }</FormLabel>\n          <FormLabel> </FormLabel>\n          <Button kind='action' onPress={ this.handle_onPress_Retry } title=\"Retry\" />\n        </View>\n      )\n  }\n}\n"]}