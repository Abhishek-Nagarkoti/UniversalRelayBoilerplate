{"version":3,"sources":["../../../../../units/urb-account-management/app/components/Login.js"],"names":["styles","create","container","flex","justifyContent","alignItems","backgroundColor","mode_challenge","mode_login_in_progress","mode_login_failed","Login","props","context","handle_onPress_Login","setState","mode","currentLoginAttempt","loginAttempt","UserToken1","fetch","method","headers","Accept","Origin","body","JSON","stringify","User_AccountName","state","User_AccountPassword","then","response","map","cookie","startsWith","console","log","substring","indexOf","json","responseData","success","setUserTokens","UserToken2","goToRouteByNameAndParams","errorMessage","error","ErrorMessage","done","handle_onPress_Cancel","handle_onPress_Retry","text","Component"],"mappings":"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","file":"Login.js","sourcesContent":["// @flow\n\nimport React from 'react'\nimport { View, Text, StyleSheet } from 'react-native'\nimport { FormLabel, FormInput } from 'react-native-elements'\n\nimport Button from '../../../../app/components/Button'\nimport LoginExtensions from '../../../../configuration/units/urb-account-management/app/components/LoginExtensions'\nimport NetworkLayer from '../../../../app/NetworkLayer'\nimport publicURL from '../../../../configuration/app/publicURL'\nimport {\n  SuccessfulLoginRouteName,\n  SuccessfulLoginRouteOptions,\n} from '../../../../configuration/units/urb-account-management/app/SuccessfulLoginRoute'\nimport UrlRouter from '../../../../app/UrlRouter'\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'stretch',\n    backgroundColor: '#f0f0f0',\n  },\n})\n\nconst mode_challenge = 1\nconst mode_login_in_progress = 2\nconst mode_login_failed = 3\n\nexport default class Login extends React.Component {\n  constructor(props, context) {\n    super(props, context)\n\n    this.loginAttempt = 0\n\n    this.state = {\n      mode: mode_challenge,\n      User_AccountName: '',\n      User_AccountPassword: '',\n      ErrorMessage: '',\n    }\n  }\n\n  handle_onPress_Login = () => {\n    this.setState({\n      mode: mode_login_in_progress,\n    })\n\n    const currentLoginAttempt = ++this.loginAttempt\n\n    let UserToken1\n\n    fetch(publicURL + '/auth/login', {\n      method: 'POST',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n        Origin: '',\n      },\n      body: JSON.stringify({\n        User_AccountName: this.state.User_AccountName,\n        User_AccountPassword: this.state.User_AccountPassword,\n      }),\n    })\n      .then(response => {\n        if ('set-cookie' in response.headers.map)\n          for (let cookie of response.headers.map['set-cookie'])\n            if (cookie.startsWith('UserToken1=')) {\n              console.log('cookie=' + cookie)\n              UserToken1 = cookie.substring(11, cookie.indexOf(';'))\n              console.log('UserToken1=' + UserToken1)\n            }\n        return response.json()\n      })\n      .then(responseData => {\n        if (currentLoginAttempt == this.loginAttempt) {\n          if (responseData.success) {\n            NetworkLayer.setUserTokens(UserToken1, responseData.UserToken2, true, () =>\n              UrlRouter.goToRouteByNameAndParams(\n                SuccessfulLoginRouteName,\n                SuccessfulLoginRouteOptions,\n              ),\n            )\n          } else {\n            let errorMessage\n            if (responseData.error) errorMessage = responseData.error\n            else errorMessage = 'Login failed'\n\n            this.setState({\n              mode: mode_login_failed,\n              ErrorMessage: errorMessage,\n            })\n          }\n        } else console.log('XXX Expired login event')\n      })\n      // TODO x5000 Error handling for failed login\n      .done()\n  }\n\n  handle_onPress_Cancel = () => {\n    this.loginAttempt++ // So that when the call back comes it is rejected\n\n    this.setState({\n      mode: mode_challenge,\n      User_AccountPassword: '',\n    })\n  }\n\n  handle_onPress_Retry = () => {\n    this.setState({\n      mode: mode_challenge,\n      User_AccountPassword: '',\n    })\n  }\n\n  render() {\n    if (this.state.mode == mode_challenge)\n      return (\n        <View style={styles.container}>\n          <FormLabel>Account Name</FormLabel>\n          <FormInput\n            value={this.state.User_AccountName}\n            onChangeText={text => this.setState({ User_AccountName: text })}\n          />\n\n          <FormLabel>Password</FormLabel>\n          <FormInput\n            secureTextEntry\n            value={this.state.User_AccountPassword}\n            onChangeText={text => this.setState({ User_AccountPassword: text })}\n          />\n          <FormLabel> </FormLabel>\n\n          <Button kind=\"action\" onPress={this.handle_onPress_Login} title=\"Login\" />\n          <FormLabel> </FormLabel>\n\n          <LoginExtensions />\n\n        </View>\n      )\n    else if (this.state.mode == mode_login_in_progress)\n      return (\n        <View style={styles.container}>\n          <FormLabel>Logging in as</FormLabel>\n          <FormLabel>{this.state.User_AccountName}</FormLabel>\n          <FormLabel> </FormLabel>\n          <Button kind=\"action\" onPress={this.handle_onPress_Cancel} title=\"Cancel\" />\n        </View>\n      )\n    else if (this.state.mode == mode_login_failed)\n      return (\n        <View style={styles.container}>\n          <FormLabel>Failed to log in as</FormLabel>\n          <FormLabel>{this.state.User_AccountName}</FormLabel>\n          <FormLabel>{this.state.ErrorMessage}</FormLabel>\n          <FormLabel> </FormLabel>\n          <Button kind=\"action\" onPress={this.handle_onPress_Retry} title=\"Retry\" />\n        </View>\n      )\n  }\n}\n"]}