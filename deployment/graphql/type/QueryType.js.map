{"version":3,"sources":["../../../graphql/type/QueryType.js"],"names":["resolveNodeField","source","args","context","objectManager","rootValue","id","type","getOneObject","name","fields","node","resolve","Viewer","parent","getViewerUserId"],"mappings":";;AAEA;AACA;;AAEA,wC;AACA,+C;;;AAGA,QAASA,iBAAT,CAA2BC,MAA3B,CAAmCC,IAAnC,CAAyCC,OAAzC,MAAiF,IAAlBC,cAAkB,MAA7BC,SAA6B;;;;AAI1D,+BAAcH,KAAKI,EAAnB,CAJ0D,CAIvEA,EAJuE,eAIvEA,EAJuE,CAInEC,IAJmE,eAInEA,IAJmE;;;;AAQ/E,GAAIA,OAAS,QAAb;AACE,MAAOH,eAAcI,YAAd,CAA4B,MAA5B,CAAoC,CAAEF,GAAIA,EAAN,CAApC,CAAP,CADF;;AAGE,MAAOF,eAAcI,YAAd,CAA4BD,IAA5B,CAAkC,CAAED,GAAIA,EAAN,CAAlC,CAAP;AACH,C;;AAEc,+BAAuB;AACpCG,KAAM,OAD8B;AAEpCC,OAAQ,wBAAQ;AACdC,KAAM;AACJJ,4BADI;AAEJL,KAAM;AACJI,GAAI,CAAEC,KAAM,+CAAR,CADA,CAFF;;AAKJK,QAASZ,gBALL,CADQ;;AAQda,OAAQ;AACNN,yBADM;AAENK,QAAS,iBAAEE,MAAF,CAAUZ,IAAV,CAAgBC,OAAhB,WAAsCC,cAAtC,OAA2BC,SAA3B,OAA2DD,eAAcI,YAAd,CAA4B,MAA5B,CAAoC,CAAEF,GAAIF,cAAcW,eAAd,EAAN,CAApC,CAA3D,EAFH,CARM,CAAR,EAF4B,CAAvB,C","file":"QueryType.js","sourcesContent":["// @flow weak\n\nimport { fromGlobalId } from 'graphql-relay'\nimport { GraphQLID, GraphQLNonNull, GraphQLObjectType } from 'graphql'\n\nimport ViewerType from \"./ViewerType\"\nimport NodeInterface from \"../NodeInterface\"\n\n\nfunction resolveNodeField( source, args, context, { rootValue: objectManager } ) {\n  // the node field will receive a globally\n  // unique id, and here we convert that back\n  // to the local type and id\n  const { id, type } = fromGlobalId( args.id )\n\n  // map the local type and id into the\n  // actual data for the record\n  if( type === 'Viewer' )\n    return objectManager.getOneObject( 'User', { id: id } )\n  else\n    return objectManager.getOneObject( type, { id: id } )\n}\n\nexport default new GraphQLObjectType( {\n  name: \"Query\",\n  fields: () => ( {\n    node: {\n      type: NodeInterface,\n      args: {\n        id: { type: new GraphQLNonNull( GraphQLID ) }\n      },\n      resolve: resolveNodeField\n    },\n    Viewer: {\n      type: ViewerType,\n      resolve: ( parent, args, context, { rootValue: objectManager } ) => objectManager.getOneObject( 'User', { id: objectManager.getViewerUserId() } )\n    },\n  } )\n} )\n"]}