{"version":3,"sources":["../../../graphql/type/GraphQLDateTime.js"],"names":["coerceDate","value","Date","Error","JSON","stringify","isNaN","getTime","toJSON","parseLiteral","ast","kind","STRING","result","name","description","serialize","parseValue"],"mappings":";;AAEA;AACA;AACA;;;;;AAKA,QAASA,WAAT,CAAqBC,KAArB,CAA6B;AAC3BA,MAAQ,GAAIC,KAAJ,CAAUD,KAAV,CAAR;AACA,GAAI,EAAGA,gBAAiBC,KAApB,CAAJ;;AAEE,KAAM,IAAIC,MAAJ,CAAW,yDAA2DC,KAAKC,SAAL,CAAgBJ,KAAhB,CAAtE,CAAN;;AAEF,GAAIK,MAAOL,MAAMM,OAAN,EAAP,CAAJ;AACE,KAAM,IAAIJ,MAAJ,CAAW,uCAAX,CAAN;;AAEF,MAAOF,OAAMO,MAAN,EAAP;AACD;;AAED,QAASC,aAAT,CAAuBC,GAAvB,CAA6B;AAC3B,GAAIA,IAAIC,IAAJ,GAAa,eAAKC,MAAtB;AACE,KAAM,yBAAkB,2DAA6DF,IAAIC,IAAnF,CAAyF,CAAED,GAAF,CAAzF,CAAN;;AAEF,GAAIG,QAAS,GAAIX,KAAJ,CAAUQ,IAAIT,KAAd,CAAb;AACA,GAAIK,MAAOO,OAAON,OAAP,EAAP,CAAJ;AACE,KAAM,yBAAkB,2BAAlB,CAA+C,CAAEG,GAAF,CAA/C,CAAN;;AAEF,GAAIA,IAAIT,KAAJ,GAAcY,OAAOL,MAAP,EAAlB;AACE,KAAM,yBAAkB,0EAAlB,CAA8F,CAAEE,GAAF,CAA9F,CAAN;;AAEF,MAAOG,OAAP;AACD,C;;AAEc,+BAAuB;AACpCC,KAAM,UAD8B;AAEpCC,YAAa,+CAFuB;AAGpCC,UAAWhB,UAHyB;AAIpCiB,WAAYjB,UAJwB;AAKpCS,aAAcA,YALsB,CAAvB,C","file":"GraphQLDateTime.js","sourcesContent":["// @flow weak\n\nimport { GraphQLScalarType } from 'graphql'\nimport { GraphQLError } from 'graphql/error'\nimport { Kind } from 'graphql/language'\n\n// The code in this file is largely modified version of:\n// https://github.com/soundtrackyourbrand/graphql-custom-datetype/blob/master/datetype.js\n\nfunction coerceDate( value ) {\n  value = new Date( value );\n  if( !( value instanceof Date ) )\n  // Is this how you raise a 'field error'?\n    throw new Error( 'Field error: value is not an instance of Date, value =' + JSON.stringify( value ) )\n\n  if( isNaN( value.getTime() ) )\n    throw new Error( 'Field error: value is an invalid Date' )\n\n  return value.toJSON()\n}\n\nfunction parseLiteral( ast ) {\n  if( ast.kind !== Kind.STRING )\n    throw new GraphQLError( 'Query error: Can only parse strings to dates but got a: ' + ast.kind, [ ast ] )\n\n  let result = new Date( ast.value )\n  if( isNaN( result.getTime() ) )\n    throw new GraphQLError( 'Query error: Invalid date', [ ast ] )\n\n  if( ast.value !== result.toJSON() )\n    throw new GraphQLError( 'Query error: Invalid date format, only accepts: YYYY-MM-DDTHH:MM:SS.SSSZ', [ ast ] )\n\n  return result\n}\n\nexport default new GraphQLScalarType( {\n  name: 'DateTime',\n  description: 'Scalar type for storing date-time information',\n  serialize: coerceDate,\n  parseValue: coerceDate,\n  parseLiteral: parseLiteral,\n} )\n"]}