{"version":3,"sources":["../../graphql/ObjectManager.js"],"names":["User_0","id","uuidNull","UserToken2","User_DisplayName","entityDefinitions","setPersisters","Set","deletedRecord","deleted","ObjectManager","loadersSingle","loadersMultiple","changes","Viewer_User_id","request","req","res","response","siteInformation","entityName","foundLoaders","fields","isDeletion","records","Error","fieldName","multipleResults","entityDefinition","entityType","EntityType","loadersList","getLoadersMultiple","getLoadersSingle","loader","Persister","getObjectList","filter","getOneObject","uuidNullAsString","Promise","resolve","loaderIdentifier","Object","keys","sort","join","getLoader","load","then","change","result","ix","arrResults","length","splice","clearLoadersMultiple","loaderFieldName","clear","arrTriggers","oldFields","arrPromises","trigger","push","all","console","log","uuidRandom","setViewerUserId","toString","recordChange","executeTriggers","TriggersForAdd","add","invalidateLoaderCache","TriggersForUpdateShouldRetrieveCurrentRecord","TriggersForUpdate","update","TriggersForRemove","remove","arr","obj","obj_id","uuidToString","arr_element_id","cursor","persister","EntityName","handler","shouldTrerieveCurrentRecord","RegisterTriggerForAdd","RegisterTriggerForUpdate","runAsPartOfSetupDatabase","cb","initialize","registerEntity"],"mappings":"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","file":"ObjectManager.js","sourcesContent":["// @flow\n\nimport DataLoader from \"dataloader\"\nimport { cursorForObjectInConnection } from \"graphql-relay\"\n\nimport AnonymousUserToken2 from \"../configuration/server/AnonymousUserToken2\"\nimport defaultPersister from \"../configuration/graphql/defaultPersister\"\nimport getNewUser from \"../configuration/graphql/model/getNewUser\"\nimport log from \"../server/log\"\nimport User from \"../configuration/graphql/model/User\"\n\n// Anonymous user\nconst User_0 = new User(\n  Object.assign(getNewUser(\"00000000-0000-0000-0000-000000000000\"), {\n    id: defaultPersister.uuidNull(),\n    UserToken2: AnonymousUserToken2,\n    User_DisplayName: \"Anonymous\",\n  }),\n)\n\n// Static set of entity definitions\nconst entityDefinitions = {}\n\n// Static array of object managers\nconst setPersisters = new Set()\n\n// Value for a change indicating that the record is deleted\nconst deletedRecord = {\n  deleted: true,\n}\n\nexport default class ObjectManager {\n  Viewer_User_id: string\n\n  constructor() {\n    // Loaders for a single record, by entity name\n    this.loadersSingle = {}\n\n    // Loaders for a multiple record lists, by entity name\n    this.loadersMultiple = {}\n\n    // Changes made to records, by entity name\n    this.changes = {}\n\n    // UserID for the viewer. Could be unset if ObjectManager is used by system\n    this.Viewer_User_id = null\n\n    // Request object, if available\n    this.request = null\n\n    // Anonymous user available as property, for comparisons\n    this.User_0 = User_0\n  }\n\n  static registerEntity(\n    entityName: string,\n    EntityType: any,\n    persister: any,\n  ): void {\n    if (entityName in entityDefinitions)\n      throw new Error(\"Entity already registered: \" + entityName)\n\n    // In order to be able to access the name as a static property of the type\n    EntityType.entityName = entityName\n\n    // Determine persister - default, or otherwise\n    if (persister == null) persister = defaultPersister\n\n    // A set would retain only one copy of a persister\n    setPersisters.add(persister)\n\n    entityDefinitions[entityName] = {\n      EntityName: entityName,\n      EntityType: EntityType,\n      Persister: persister,\n      TriggersForAdd: [],\n      TriggersForUpdate: [],\n      TriggersForRemove: [],\n      TriggersForUpdateShouldRetrieveCurrentRecord: false,\n    }\n  }\n\n  static RegisterTriggerForAdd(entityName: string, handler: func): void {\n    entityDefinitions[entityName].TriggersForAdd.push(handler)\n  }\n\n  static RegisterTriggerForUpdate(\n    entityName: string,\n    handler: func,\n    shouldTrerieveCurrentRecord: boolean,\n  ): void {\n    entityDefinitions[entityName].TriggersForUpdate.push(handler)\n\n    if (shouldTrerieveCurrentRecord)\n      entityDefinitions[\n        entityName\n      ].TriggersForUpdateShouldRetrieveCurrentRecord = true\n  }\n\n  static RegisterTriggerForAddAndUpdate(\n    entityName: string,\n    handler: func,\n  ): void {\n    ObjectManager.RegisterTriggerForAdd(entityName, handler)\n    ObjectManager.RegisterTriggerForUpdate(entityName, handler)\n  }\n\n  static RegisterTriggerForRemove(entityName: string, handler: any) {\n    entityDefinitions[entityName].TriggersForRemove.push(handler)\n  }\n\n  setViewerUserId(Viewer_User_id: string): void {\n    this.Viewer_User_id = Viewer_User_id\n  }\n\n  setRequest(req: any, res: any): void {\n    this.request = req\n    this.response = res\n  }\n\n  setSiteInformation(siteInformation: Object): void {\n    this.siteInformation = siteInformation\n  }\n\n  getLoadersSingle(entityName: string) {\n    const foundLoaders = this.loadersSingle[entityName]\n    if (foundLoaders != null) return foundLoaders\n    else return (this.loadersSingle[entityName] = {})\n  }\n\n  getLoadersMultiple(entityName: string) {\n    const foundLoaders = this.loadersMultiple[entityName]\n    if (foundLoaders != null) return foundLoaders\n    else return (this.loadersMultiple[entityName] = {})\n  }\n\n  clearLoadersMultiple(entityName: string) {\n    this.loadersMultiple[entityName] = {}\n  }\n\n  recordChange(entityName: string, fields: object, isDeletion: boolean) {\n    let records = this.changes[entityName]\n    if (records == null) records = this.changes[entityName] = {}\n\n    const id = fields.id\n\n    records[id] = isDeletion ? deletedRecord : fields\n  }\n\n  getViewerUserId(): string {\n    if (this.Viewer_User_id == null)\n      throw new Error(\"Object Manager: viewer user id has not been set\")\n\n    return this.Viewer_User_id\n  }\n\n  getRequest(): any {\n    if (this.request == null)\n      throw new Error(\"Object Manager: request has not been set\")\n\n    return this.request\n  }\n\n  getLoader(entityName: string, fieldName: string, multipleResults: boolean) {\n    if (!(entityName in entityDefinitions))\n      throw new Error(\"Can not find entity type named \" + entityName)\n\n    const entityDefinition = entityDefinitions[entityName]\n    const entityType = entityDefinition.EntityType\n\n    let loadersList = multipleResults\n      ? this.getLoadersMultiple(entityName)\n      : this.getLoadersSingle(entityName)\n    let loader = loadersList[fieldName]\n    if (loader == null) {\n      if (multipleResults)\n        loader = new DataLoader(filter =>\n          entityDefinition.Persister.getObjectList(\n            entityName,\n            entityType,\n            filter,\n          ),\n        )\n      else\n        loader = new DataLoader(filter =>\n          entityDefinition.Persister.getOneObject(\n            entityName,\n            entityType,\n            filter,\n          ),\n        )\n\n      loadersList[fieldName] = loader\n    }\n\n    return loader\n  }\n\n  getOneObject(entityName: string, filter: object) {\n    // TODO x2000 Provide try catch with logging here!\n    // Special hack for anonymous users\n    if (entityName == \"User\")\n      if (filter.id == defaultPersister.uuidNullAsString())\n        return Promise.resolve(User_0)\n\n    // For all non-user, non 0 ids, load from data loader per protocol\n    const loaderIdentifier = Object.keys(filter).sort().join(\",\")\n    const loader = this.getLoader(entityName, loaderIdentifier, false)\n\n    return loader.load(filter).then(result => {\n      const changes = this.changes[entityName]\n      if (changes) {\n        const change = changes[result.id]\n        if (change != null) {\n          if (change === deletedRecord)\n            result = null // Object is not found, return null // Add or update\n          else Object.assign(result, change)\n        }\n      }\n      return result\n    })\n  }\n\n  getObjectList(entityName: string, filter: object) {\n    // TODO x2000 Provide try catch with logging here!\n    const loaderIdentifier = Object.keys(filter).sort().join(\",\")\n    const loader = this.getLoader(entityName, loaderIdentifier, true)\n\n    return loader.load(filter).then(arrResults => {\n      const changes = this.changes[entityName]\n      if (changes) {\n        for (let ix = 0; ix < arrResults.length; ix++) {\n          const change = changes[arrResults[ix].id]\n          if (change != null) {\n            if (change === deletedRecord)\n              arrResults.splice(ix--, 1) // Reduce ix in order not to skip over a record // Add or update\n            else Object.assign(arrResults[ix], change)\n          }\n        }\n      }\n      return arrResults\n    })\n  }\n\n  invalidateLoaderCache(entityName: string, fields: any) {\n    // At this moment there is no obvious way of knowing what to clear from lists, so delete them all\n    this.clearLoadersMultiple(entityName)\n\n    const loadersSingle = this.getLoadersSingle(entityName)\n    for (let loaderFieldName in loadersSingle) {\n      if (loaderFieldName === \"id\")\n        loadersSingle[loaderFieldName].clear(fields.id)\n      else delete loadersSingle[loaderFieldName]\n    }\n  }\n\n  executeTriggers(arrTriggers, fields, oldFields) {\n    const arrPromises = []\n    for (let trigger of arrTriggers) {\n      arrPromises.push(trigger(this, fields, oldFields))\n    }\n\n    return Promise.all(arrPromises)\n  }\n\n  async add(entityName: string, fields: any): any {\n    const entityDefinition = entityDefinitions[entityName]\n\n    if (entityDefinition == null)\n      console.log(\"Cound not find entity \" + entityName)\n\n    // Generate primary key, if not already present\n    if (!fields.id) fields.id = entityDefinition.Persister.uuidRandom()\n\n    // If this is a user ID\n    if (entityName == \"User\") this.setViewerUserId(fields.id.toString())\n\n    this.recordChange(entityName, fields, false)\n    await this.executeTriggers(entityDefinition.TriggersForAdd, fields)\n\n    await entityDefinition.Persister.add(\n      entityName,\n      fields,\n      entityDefinition.EntityType,\n    )\n\n    this.invalidateLoaderCache(entityName, fields)\n\n    return fields.id\n  }\n\n  async update(entityName: string, fields: any): void {\n    const entityDefinition = entityDefinitions[entityName]\n\n    if (entityDefinition == null)\n      console.log(\"XXX Cound not find entity\" + entityName) // Should that be recorded somewhere? Could be another\n\n    let oldFields = null\n    if (entityDefinition.TriggersForUpdateShouldRetrieveCurrentRecord) {\n      oldFields = this.getOneObject(entityName, {\n        id: fields.id,\n      })\n    }\n\n    this.recordChange(entityName, fields, false)\n    await this.executeTriggers(\n      entityDefinition.TriggersForUpdate,\n      fields,\n      oldFields,\n    )\n\n    await entityDefinition.Persister.update(entityName, fields)\n\n    this.invalidateLoaderCache(entityName, fields)\n  }\n\n  async remove(entityName: string, fields: any): void {\n    const entityDefinition = entityDefinitions[entityName]\n\n    this.recordChange(entityName, fields, true)\n    await this.executeTriggers(entityDefinition.TriggersForRemove, fields)\n\n    await entityDefinition.Persister.remove(entityName, fields)\n\n    this.invalidateLoaderCache(entityName, fields)\n  }\n\n  cursorForObjectInConnection(entityName: string, arr, obj) {\n    const entityDefinition = entityDefinitions[entityName]\n\n    // IDs can be both strings and Uuid. Check that first, and convert to String\n    const obj_id = entityDefinition.Persister.uuidToString(obj.id)\n\n    // Make sure that the object and its instance can be compared with ===\n    // assumed that the object has id field which is unique\n    for (let ix = 0; ix < arr.length; ix++) {\n      const arr_element_id = entityDefinition.Persister.uuidToString(arr[ix].id)\n\n      if (arr_element_id == obj_id) {\n        arr[ix] = obj\n        break\n      }\n    }\n\n    let cursor = cursorForObjectInConnection(arr, obj)\n    if (cursor == null)\n      log.log(\n        \"error\",\n        \"Could not create cursor for object in connection for \" + entityName,\n        {\n          obj,\n          arr,\n        },\n      )\n\n    return cursor\n  }\n\n  static initializePersisters(\n    runAsPartOfSetupDatabase: boolean,\n    cb: Function,\n  ): void {\n    console.log(\"🚀 Initializing persisters - start ...\")\n\n    // TODO x8000 This should be re-done to work properly with more than one persister\n    for (let persister of setPersisters)\n      persister.initialize(runAsPartOfSetupDatabase, () => {\n        console.log(\"🏆 Initializing persisters - success.\")\n        cb()\n      })\n  }\n}\n\nObjectManager.registerEntity(\"User\", User)\n"]}