{"version":3,"sources":["../../graphql/ObjectManager.js"],"names":["User_0","id","uuidNull","UserToken2","User_DisplayName","entityDefinitions","setPersisters","Set","deletedRecord","deleted","ObjectManager","loadersSingle","loadersMultiple","changes","Viewer_User_id","request","req","entityName","foundLoaders","fields","isDeletion","records","Error","fieldName","multipleResults","entityDefinition","entityType","EntityType","loadersList","getLoadersMultiple","getLoadersSingle","loader","Persister","getObjectList","filter","getOneObject","uuidNullAsString","Promise","resolve","loaderIdentifier","Object","keys","sort","join","getLoader","load","then","result","change","arrResults","ix","length","splice","clearLoadersMultiple","loaderFieldName","clear","arrTriggers","oldFields","arrPromises","trigger","push","all","console","log","uuidRandom","setViewerUserId","toString","recordChange","executeTriggers","TriggersForAdd","add","invalidateLoaderCache","TriggersForUpdateShouldRetrieveCurrentRecord","TriggersForUpdate","update","TriggersForRemove","remove","arr","obj","obj_id","uuidToString","arr_element_id","cursor","persister","EntityName","handler","shouldTrerieveCurrentRecord","RegisterTriggerForAdd","RegisterTriggerForUpdate","runAsPartOfSetupDatabase","cb","initialize","registerEntity"],"mappings":"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","file":"ObjectManager.js","sourcesContent":["// @flow weak\n\nimport DataLoader from 'dataloader'\nimport { cursorForObjectInConnection } from 'graphql-relay'\n\nimport AnonymousUserToken2 from '../configuration/server/AnonymousUserToken2'\nimport defaultPersister from '../configuration/graphql/defaultPersister'\nimport getNewUser from '../configuration/graphql/model/getNewUser'\nimport log from '../server/log'\nimport User from '../configuration/graphql/model/User'\n\n\n// Anonymous user\nconst User_0 = new User( Object.assign( getNewUser(), {\n  id: defaultPersister.uuidNull(),\n  UserToken2: AnonymousUserToken2,\n  User_DisplayName: 'Anonymous',\n} ) )\n\n// Static set of entity definitions\nconst entityDefinitions = {}\n\n// Static array of object managers\nconst setPersisters = new Set()\n\n// Value for a change indicating that the record is deleted\nconst deletedRecord = {\n  deleted: true\n}\n\nexport default class ObjectManager {\n\n  Viewer_User_id: string\n\n  constructor() {\n    // Loaders for a single record, by entity name\n    this.loadersSingle = {}\n\n    // Loaders for a multiple record lists, by entity name\n    this.loadersMultiple = {}\n\n    // Changes made to records, by entity name\n    this.changes = {}\n\n    // UserID for the viewer. Could be unset if ObjectManager is used by system\n    this.Viewer_User_id = null\n\n    // Request object, if available\n    this.request = null\n  }\n\n  static registerEntity( entityName: string, EntityType: any, persister: any ): void {\n\n    if( entityName in entityDefinitions )\n      throw new Error( \"Entity already registered: \" + entityName )\n\n    // In order to be able to access the name as a static property of the type\n    EntityType.entityName = entityName\n\n    // Determine persister - default, or otherwise\n    if( persister == null )\n      persister = defaultPersister\n\n    // A set would retain only one copy of a persister\n    setPersisters.add( persister )\n\n    entityDefinitions[ entityName ] = {\n      EntityName: entityName,\n      EntityType: EntityType,\n      Persister: persister,\n      TriggersForAdd: [],\n      TriggersForUpdate: [],\n      TriggersForRemove: [],\n      TriggersForUpdateShouldRetrieveCurrentRecord: false\n    }\n  }\n\n  static RegisterTriggerForAdd( entityName: string, handler: func ): void {\n\n    entityDefinitions[ entityName ].TriggersForAdd.push( handler )\n  }\n\n  static RegisterTriggerForUpdate( entityName: string, handler: func, shouldTrerieveCurrentRecord: boolean ): void {\n\n    entityDefinitions[ entityName ].TriggersForUpdate.push( handler )\n\n    if( shouldTrerieveCurrentRecord )\n      entityDefinitions[ entityName ].TriggersForUpdateShouldRetrieveCurrentRecord = true\n  }\n\n  static RegisterTriggerForAddAndUpdate( entityName: string, handler: func ): void {\n\n    ObjectManager.RegisterTriggerForAdd( entityName, handler )\n    ObjectManager.RegisterTriggerForUpdate( entityName, handler )\n  }\n\n  static RegisterTriggerForRemove( entityName: string, handler: any ) {\n\n    entityDefinitions[ entityName ].TriggersForRemove.push( handler )\n  }\n\n  setViewerUserId( Viewer_User_id: string ): void {\n\n    this.Viewer_User_id = Viewer_User_id\n  }\n\n  setRequest( req: any ): void {\n\n    this.request = req\n  }\n\n  getLoadersSingle( entityName: string ) {\n\n    const foundLoaders = this.loadersSingle[ entityName ]\n    if( foundLoaders != null )\n      return foundLoaders\n    else\n      return this.loadersSingle[ entityName ] = {}\n  }\n\n  getLoadersMultiple( entityName: string ) {\n\n    const foundLoaders = this.loadersMultiple[ entityName ]\n    if( foundLoaders != null )\n      return foundLoaders\n    else\n      return this.loadersMultiple[ entityName ] = {}\n  }\n\n  clearLoadersMultiple( entityName: string ) {\n\n    this.loadersMultiple[ entityName ] = {}\n  }\n\n  recordChange( entityName: string, fields: object, isDeletion: boolean ) {\n\n    let records = this.changes[ entityName ]\n    if( records == null )\n      records = this.changes[ entityName ] = {}\n\n    const id = fields.id\n\n    records[ id ] = isDeletion ? deletedRecord : fields\n  }\n\n  getViewerUserId(): string {\n\n    if( this.Viewer_User_id == null )\n      throw new Error( \"Object Manager: viewer user id has not been set\" )\n\n    return this.Viewer_User_id\n  }\n\n  getRequest(): any {\n\n    if( this.request == null )\n      throw new Error( \"Object Manager: request has not been set\" )\n\n    return this.request\n  }\n\n  getLoader( entityName: string, fieldName: string, multipleResults: boolean ) {\n\n    if( !( entityName in entityDefinitions ) )\n      throw new Error( \"Can not find entity type named \" + entityName )\n\n    const entityDefinition = entityDefinitions[ entityName ]\n    const entityType = entityDefinition.EntityType\n\n    let loadersList = multipleResults ? this.getLoadersMultiple( entityName ) : this.getLoadersSingle( entityName )\n    let loader = loadersList[ fieldName ]\n    if( loader == null ) {\n      if( multipleResults )\n        loader = new DataLoader( filter => entityDefinition.Persister.getObjectList( entityName, entityType, filter ) )\n      else\n        loader = new DataLoader( filter => entityDefinition.Persister.getOneObject( entityName, entityType, filter ) )\n\n      loadersList[ fieldName ] = loader\n    }\n\n    return loader\n  }\n\n  getOneObject( entityName: string, filter: object ) {\n\n    // TODO x2000 Provide try catch with logging here!\n    // Special hack for anonymous users\n    if( entityName == 'User' )\n      if( filter.id == defaultPersister.uuidNullAsString() )\n        return Promise.resolve( User_0 )\n\n    // For all non-user, non 0 ids, load from data loader per protocol\n    const loaderIdentifier = Object.keys( filter ).sort().join( ',' )\n    const loader = this.getLoader( entityName, loaderIdentifier, false )\n\n    return loader.load( filter )\n      .then( ( result ) => {\n        const changes = this.changes[ entityName ]\n        if( changes ) {\n          const change = changes[ result.id ]\n          if( change != null ) {\n            if( change === deletedRecord )\n              result = null // Object is not found, return null\n            else // Add or update\n              Object.assign( result, change )\n          }\n        }\n        return result\n      } )\n  }\n\n  getObjectList( entityName: string, filter: object ) {\n\n    // TODO x2000 Provide try catch with logging here!\n    const loaderIdentifier = Object.keys( filter ).sort().join( ',' )\n    const loader = this.getLoader( entityName, loaderIdentifier, true )\n\n    return loader.load( filter )\n      .then( ( arrResults ) => {\n        const changes = this.changes[ entityName ]\n        if( changes ) {\n          for( let ix = 0; ix < arrResults.length; ix++ ) {\n            const change = changes[ arrResults[ ix ].id ]\n            if( change != null ) {\n              if( change === deletedRecord )\n                arrResults.splice( ix--, 1 ) // Reduce ix in order not to skip over a record\n              else // Add or update\n                Object.assign( arrResults[ ix ], change )\n            }\n          }\n        }\n        return arrResults\n      } )\n  }\n\n  invalidateLoaderCache( entityName: string, fields: any ) {\n\n    // At this moment there is no obvious way of knowing what to clear from lists, so delete them all\n    this.clearLoadersMultiple( entityName )\n\n    const loadersSingle = this.getLoadersSingle( entityName )\n    for( let loaderFieldName in loadersSingle ) {\n      if( loaderFieldName === 'id' )\n        loadersSingle[ loaderFieldName ].clear( fields.id )\n      else\n        delete loadersSingle[ loaderFieldName ]\n    }\n  }\n\n  executeTriggers( arrTriggers, fields, oldFields ) {\n\n    const arrPromises = []\n    for( let trigger of arrTriggers ) {\n      arrPromises.push( trigger( this, fields, oldFields ) )\n    }\n\n    return Promise.all( arrPromises )\n  }\n\n  async add( entityName: string, fields: any ): any {\n\n    const entityDefinition = entityDefinitions[ entityName ]\n\n    if( entityDefinition == null ) console.log( 'Cound not find entity ' + entityName )\n\n    // Generate primary key, if not already present\n    if( !fields.id )\n      fields.id = entityDefinition.Persister.uuidRandom()\n\n    // If this is a user ID\n    if( entityName == 'User' )\n      this.setViewerUserId( fields.id.toString() )\n\n    this.recordChange( entityName, fields, false )\n    await this.executeTriggers( entityDefinition.TriggersForAdd, fields )\n\n    await entityDefinition.Persister.add( entityName, fields, entityDefinition.EntityType )\n\n    this.invalidateLoaderCache( entityName, fields )\n\n    return fields.id\n  }\n\n  async update( entityName: string, fields: any ): void {\n\n    const entityDefinition = entityDefinitions[ entityName ]\n\n    if( entityDefinition == null ) console.log( 'XXX Cound not find entity' + entityName ) // Should that be recorded somewhere? Could be another\n\n    let oldFields = null\n    if( entityDefinition.TriggersForUpdateShouldRetrieveCurrentRecord ) {\n      oldFields = this.getOneObject( entityName, {\n        id: fields.id\n      } )\n    }\n\n    this.recordChange( entityName, fields, false )\n    await this.executeTriggers( entityDefinition.TriggersForUpdate, fields, oldFields )\n\n    await entityDefinition.Persister.update( entityName, fields )\n\n    this.invalidateLoaderCache( entityName, fields )\n  }\n\n  async remove( entityName: string, fields: any ): void {\n\n    const entityDefinition = entityDefinitions[ entityName ]\n\n    this.recordChange( entityName, fields, true )\n    await this.executeTriggers( entityDefinition.TriggersForRemove, fields )\n\n    await entityDefinition.Persister.remove( entityName, fields )\n\n    this.invalidateLoaderCache( entityName, fields )\n  }\n\n  cursorForObjectInConnection( entityName: string, arr, obj ) {\n\n    const entityDefinition = entityDefinitions[ entityName ]\n\n    // IDs can be both strings and Uuid. Check that first, and convert to String\n    const obj_id = entityDefinition.Persister.uuidToString( obj.id )\n\n    // Make sure that the object and its instance can be compared with ===\n    // assumed that the object has id field which is unique\n    for( let ix = 0; ix < arr.length; ix++ ) {\n      const arr_element_id = entityDefinition.Persister.uuidToString( arr[ ix ].id )\n\n      if( arr_element_id == obj_id ) {\n        arr[ ix ] = obj\n        break\n      }\n    }\n\n    let cursor = cursorForObjectInConnection( arr, obj )\n    if( cursor == null )\n      log.log( 'error', 'Could not create cursor for object in connection for ' + entityName, {\n        obj,\n        arr\n      } )\n\n    return cursor\n  }\n\n  static initializePersisters( runAsPartOfSetupDatabase: boolean, cb: Function ): void {\n\n    console.log( \"🚀 Initializing persisters - start ...\" )\n\n    // TODO x8000 This should be re-done to work properly with more than one persister\n    for( let persister of setPersisters )\n      persister.initialize( runAsPartOfSetupDatabase, () => {\n\n        console.log( \"🏆 Initializing persisters - success.\" )\n        cb()\n      } )\n  }\n}\n\nObjectManager.registerEntity( 'User', User )\n"]}