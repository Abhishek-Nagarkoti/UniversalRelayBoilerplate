{"version":3,"sources":["../../webapp/client.js"],"names":["data","JSON","parse","document","getElementById","textContent","UserToken2","fragment","authTokenInThisFragment","response","Viewer","length","alert","relay","Environment","injectNetworkLayer","url","req","headers","credentials","next","then","res","json","error","loc","window","location","host","protocol","hostname","port","replace","href","errors","disableBatchQuery","logPageView","injectPreparedData","rootElement","routes","history","redirectLocation","renderProps","prepareInitialRender","render","props"],"mappings":";;AAEA,iD;AACA,8D;AACA,4B;AACA,mC;AACA;AACA,uC;AACA;AACA,2D;;AAEA,sD;AACA;AACA,6C;AACA,kC;;;;AAIA;;;;AAIA,GAAMA,MAAOC,KAAKC,KAAL,CAAYC,SAASC,cAAT,CAAyB,eAAzB,EAA2CC,WAAvD,CAAb;;;;;;AAMA,GAAIC,YAAa,EAAjB;AACA,kBAAqBN,IAArB,4IAA4B,uIAAnBO,SAAmB;AAC1B,GAAMC,yBAA0BD,SAASE,QAAT,CAAkBC,MAAlB,CAAyBJ,UAAzD;AACA,GAAIE,yBAA2B,IAA/B,CAAsC;AACpCF,WAAaE,uBAAb;AACA;AACD;AACF;;;AAGD,GAAIF,WAAWK,MAAX,EAAqB,CAAzB;AACEC,MAAO,uCAAP;;;;;AAKF,GAAMC,OAAQ,GAAI,sBAAMC,WAAV,EAAd;;AAEAD,MAAME,kBAAN,CAA0B;AACxB;AACE,0CAAe;AACbC,IAAK,UADQ,CAAf,CADF;;AAIE,qBAAQ,cAAO;AACbC,IAAIC,OAAJ,CAAa,YAAb,EAA8BZ,UAA9B;AACAW,IAAIE,WAAJ,CAAkB,aAAlB;AACA,MAAOC,MAAMH,GAAN,CAAP;AACD,CAJD,EAJF;AASE,qBAAQ,cAAO;AACb,MAAOG,MAAMH,GAAN;AACJI,IADI,CACE,aAAO;AACZ,GAAIC,IAAIC,IAAJ,CAASC,KAAb,CAAqB;AACnBZ,MAAOU,IAAIC,IAAJ,CAASC,KAAhB;AACA,GAAIF,IAAIC,IAAJ,CAASC,KAAT,EAAkB,uBAAtB,CAAgD;;AAE9C,GAAIC,KAAMC,OAAOC,QAAjB;AACA,GAAIC,MAAOH,IAAII,QAAJ,CAAe,IAAf,CAAsBJ,IAAIK,QAA1B,CAAqC,GAArC,CAA2CL,IAAIM,IAA1D;;AAEA,iBAASH,KAAO,cAAhB,CAAgC,EAAhC;AACE,UAAM;AACJhB,MAAO,4DAAP;AACAe,SAASK,OAAT,CAAkBL,SAASM,IAA3B;AACD,CAJH;AAKE,UAAM;AACJrB,MAAO,kGAAP;AACAe,SAASK,OAAT,CAAkBL,SAASM,IAA3B;AACD,CARH;;AAUD;AACF,CAlBD,IAkBO,IAAIX,IAAIC,IAAJ,CAASW,MAAb;AACLtB,MAAO,6DAAP;AACF,MAAOU,IAAP;AACD,CAvBI,CAAP;AAwBD,CAzBD,EATF,CADwB;AAoCrB;AACDa,kBAAmB,IADlB,CApCqB,CAA1B;;;;AAyCA,QAASC,YAAT,EAAsB;;;AAGrB;;AAED,0BAAgBC,kBAAhB,CAAoCxB,KAApC,CAA2Cb,IAA3C;AACA,GAAMsC,aAAcnC,SAASC,cAAT,CAAyB,MAAzB,CAApB;;AAEA,uBAAO,CAAEmC,uBAAF,CAAUC,mCAAV,CAAP,CAA4C,SAAEhB,KAAF,CAASiB,gBAAT,CAA2BC,WAA3B,CAA4C;;AAEtF,gCAAiBC,oBAAjB,CAAuC9B,KAAvC,CAA8C6B,WAA9C,EAA4DrB,IAA5D,CAAkE,eAAS;;AAEzE,mBAASuB,MAAT;AACE;;AAEE,8DAAaC,KAAb,EAAqB,SAAWT,WAAhC,GAFF,CADF;;AAKEE,WALF;;;AAQD,CAVD;;AAYD,CAdD","file":"client.js","sourcesContent":["// @flow weak\n\nimport IsomorphicRelay from 'isomorphic-relay'\nimport IsomorphicRouter from 'isomorphic-relay-router'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport { browserHistory, match, Router } from 'react-router'\nimport Relay from 'react-relay'\nimport { RelayNetworkLayer, urlMiddleware } from 'react-relay-network-layer'\nimport injectTapEventPlugin from 'react-tap-event-plugin'\n\nimport routes from '../configuration/webapp/routes'\nimport './styles/main.css'\nimport Wrapper from './components/Wrapper'\nimport { postXHR } from './scripts/XHR'\n\n\n// Use tap event plugin accoring to http://www.material-ui.com/#/get-started/installation\ninjectTapEventPlugin()\n\n\n// Retrieve prepared data\nconst data = JSON.parse( document.getElementById( 'preloadedData' ).textContent )\n\n\n// Retrieve the auth token. We know it will be on viewer, but we do not know which fragment.\n// Go through them all.\n// It is important that UserToken2 is requested in Chrome.jsx\nlet UserToken2 = \"\"\nfor( let fragment of data ) {\n  const authTokenInThisFragment = fragment.response.Viewer.UserToken2\n  if( authTokenInThisFragment != null ) {\n    UserToken2 = authTokenInThisFragment\n    break\n  }\n}\n\n\nif( UserToken2.length == 0 )\n  alert( 'Authentication token retrieval failed' )\n\n\n// Create Relay environment\n// Ensure that on the client Relay is passing the HttpOnly cookie with auth, and the user auth token\nconst relay = new Relay.Environment()\n\nrelay.injectNetworkLayer( new RelayNetworkLayer(\n  [\n    urlMiddleware( {\n      url: '/graphql' // GraphQL Server is relative to main server in directory graphql\n    } ),\n    next => req => {\n      req.headers[ 'UserToken2' ] = UserToken2 // Provide token for server to prevent CSRF\n      req.credentials = 'same-origin' // provide CORS policy to XHR request in fetch method\n      return next( req )\n    },\n    next => req => {\n      return next( req )\n        .then( res => {\n          if( res.json.error ) {\n            alert( res.json.error ) // TODO x5000 Transfer error to server, possibly\n            if( res.json.error == 'Authentication Failed' ) {\n              // When authentication fails, alert user and log out\n              var loc = window.location\n              var host = loc.protocol + \"//\" + loc.hostname + \":\" + loc.port\n\n              postXHR( host + '/auth/logout', {},\n                () => {\n                  alert( \"Your account could not be found. You have been logged out.\" )\n                  location.replace( location.href )\n                },\n                () => {\n                  alert( \"Your account could not be found. An attempt has been made to log you out, which did not succeed.\" )\n                  location.replace( location.href )\n                }\n              )\n            }\n          } else if( res.json.errors )\n            alert( 'GraphQL errors occurred! TODO: x2000 provide error handling' )\n          return res\n        } )\n    }\n  ], {\n    disableBatchQuery: true\n  }\n) )\n\nfunction logPageView(){\n\n  // TODO: code to react to page changes. Most probably this should be moved to settings to enable google analytics, CRM, etc.\n}\n\nIsomorphicRelay.injectPreparedData( relay, data )\nconst rootElement = document.getElementById( 'root' )\n\nmatch( { routes, history: browserHistory }, ( error, redirectLocation, renderProps ) => {\n\n  IsomorphicRouter.prepareInitialRender( relay, renderProps ).then( props => {\n\n    ReactDOM.render(\n      <Wrapper\n      >\n        <Router { ...props } onUpdate={ logPageView } />\n      </Wrapper>,\n      rootElement\n    )\n\n  } )\n\n} )\n"]}