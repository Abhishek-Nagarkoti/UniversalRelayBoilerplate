{"version":3,"sources":["../../webapp/client.js"],"names":["data","JSON","parse","document","getElementById","textContent","UserToken2","fragment","authTokenInThisFragment","response","Viewer","length","alert","site_id","window","configurationAsObject","graphQLServerURL","relay","Environment","injectNetworkLayer","url","req","headers","credentials","next","then","res","json","error","loc","location","host","protocol","hostname","port","replace","href","errors","disableBatchQuery","logPageView","injectPreparedData","rootElement","routes","history","redirectLocation","renderProps","setTimeout","prepareInitialRender","render","props","process","env","NODE_ENV"],"mappings":";;AAEA,iD;AACA,8D;AACA,4B;AACA,mC;AACA;AACA,uC;AACA;AACA,2D;;AAEA,sD;AACA;AACA,6C;AACA,kC;;;AAGA;;;AAGA,GAAMA,MAAOC,KAAKC,KAAL,CAAWC,SAASC,cAAT,CAAwB,eAAxB,EAAyCC,WAApD,CAAb;;;;;AAKA,GAAIC,YAAa,EAAjB;AACA,kBAAqBN,IAArB,4IAA2B,uIAAlBO,SAAkB;AACzB,GAAMC,yBAA0BD,SAASE,QAAT,CAAkBC,MAAlB,CAAyBJ,UAAzD;AACA,GAAIE,yBAA2B,IAA/B,CAAqC;AACnCF,WAAaE,uBAAb;AACA;AACD;AACF;;;AAGD,GAAIF,WAAWK,MAAX,EAAqB,CAAzB,CAA4BC,MAAM,uCAAN;;;;AAI5B,GAAMC,SAAUC,OAAOC,qBAAP,CAA6BF,OAA7C;AACA,GAAMG,kBAAmB,YAAcH,QAAU,4BAA8BA,OAAxC,CAAkD,EAAhE,CAAzB;;;;AAIA,GAAMI,OAAQ,GAAI,sBAAMC,WAAV,EAAd;;AAEAD,MAAME,kBAAN;AACE;AACE;AACE,0CAAc;AACZC,IAAKJ,gBADO,CAAd,CADF;;AAIE,qBAAQ,cAAO;AACbK,IAAIC,OAAJ,CAAY,YAAZ,EAA4BhB,UAA5B;AACAe,IAAIE,WAAJ,CAAkB,aAAlB;AACA,MAAOC,MAAKH,GAAL,CAAP;AACD,CAJD,EAJF;AASE,qBAAQ,cAAO;AACb,MAAOG,MAAKH,GAAL,EAAUI,IAAV,CAAe,aAAO;AAC3B,GAAIC,IAAIC,IAAJ,CAASC,KAAb,CAAoB;AAClBhB,MAAMc,IAAIC,IAAJ,CAASC,KAAf;AACA,GAAIF,IAAIC,IAAJ,CAASC,KAAT,EAAkB,uBAAtB,CAA+C;;AAE7C,GAAIC,KAAMf,OAAOgB,QAAjB;AACA,GAAIC,MAAOF,IAAIG,QAAJ,CAAe,IAAf,CAAsBH,IAAII,QAA1B,CAAqC,GAArC,CAA2CJ,IAAIK,IAA1D;;AAEA;AACEH,KAAO,cADT;AAEE,EAFF;AAGE,UAAM;AACJnB,MAAM,4DAAN;AACAkB,SAASK,OAAT,CAAiBL,SAASM,IAA1B;AACD,CANH;AAOE,UAAM;AACJxB;AACE,kGADF;;AAGAkB,SAASK,OAAT,CAAiBL,SAASM,IAA1B;AACD,CAZH;;AAcD;AACF,CAtBD,IAsBO,IAAIV,IAAIC,IAAJ,CAASU,MAAb;AACLzB,MAAM,6DAAN;AACF,MAAOc,IAAP;AACD,CA1BM,CAAP;AA2BD,CA5BD,EATF,CADF;;AAwCE;AACEY,kBAAmB,IADrB,CAxCF,CADF;;;;;AA+CA,QAASC,YAAT,EAAuB;;AAEtB;;AAED,0BAAgBC,kBAAhB,CAAmCvB,KAAnC,CAA0CjB,IAA1C;AACA,GAAMyC,aAActC,SAASC,cAAT,CAAwB,MAAxB,CAApB;;AAEA,uBAAM,CAAEsC,uBAAF,CAAUC,mCAAV,CAAN,CAA2C,SAACf,KAAD,CAAQgB,gBAAR,CAA0BC,WAA1B,CAA0C;AACnFC;AACE;AACE,gCAAiBC,oBAAjB,CAAsC9B,KAAtC,CAA6C4B,WAA7C,EAA0DpB,IAA1D,CAA+D,eAAS;AACtE,mBAASuB,MAAT;AACE;AACE,8DAAYC,KAAZ,EAAmB,SAAUV,WAA7B,GADF,CADF;;AAIEE,WAJF;;AAMD,CAPD,CADF,GADF;AAUE3B,OAAOoC,OAAP,CAAeC,GAAf,CAAmBC,QAAnB,EAA+B,aAA/B,CAA+C,IAA/C,CAAsD,CAVxD;;AAYD,CAbD","file":"client.js","sourcesContent":["// @flow\n\nimport IsomorphicRelay from 'isomorphic-relay'\nimport IsomorphicRouter from 'isomorphic-relay-router'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport { browserHistory, match, Router } from 'react-router'\nimport Relay from 'react-relay'\nimport { RelayNetworkLayer, urlMiddleware } from 'react-relay-network-layer'\nimport injectTapEventPlugin from 'react-tap-event-plugin'\n\nimport routes from '../configuration/webapp/routes'\nimport '../configuration/webapp/styles/main.css'\nimport Wrapper from './components/Wrapper'\nimport { postXHR } from './scripts/XHR'\n\n// Use tap event plugin accoring to http://www.material-ui.com/#/get-started/installation\ninjectTapEventPlugin()\n\n// Retrieve prepared data\nconst data = JSON.parse(document.getElementById('preloadedData').textContent)\n\n// Retrieve the auth token. We know it will be on viewer, but we do not know which fragment.\n// Go through them all.\n// It is important that UserToken2 is requested in Chrome.jsx\nlet UserToken2 = ''\nfor (let fragment of data) {\n  const authTokenInThisFragment = fragment.response.Viewer.UserToken2\n  if (authTokenInThisFragment != null) {\n    UserToken2 = authTokenInThisFragment\n    break\n  }\n}\n\n// Verify authentication\nif (UserToken2.length == 0) alert('Authentication token retrieval failed')\n\n// Where is the GraphQL server? If we are in editing mode, site_id will be present in the configuration\n// GraphQL Server is relative to main server in directory graphql\nconst site_id = window.configurationAsObject.site_id\nconst graphQLServerURL = '/graphql' + (site_id ? '?rb-site-builder-site-id=' + site_id : '')\n\n// Create Relay environment\n// Ensure that on the client Relay is passing the HttpOnly cookie with auth, and the user auth token\nconst relay = new Relay.Environment()\n\nrelay.injectNetworkLayer(\n  new RelayNetworkLayer(\n    [\n      urlMiddleware({\n        url: graphQLServerURL,\n      }),\n      next => req => {\n        req.headers['UserToken2'] = UserToken2 // Provide token for server to prevent CSRF\n        req.credentials = 'same-origin' // provide CORS policy to XHR request in fetch method\n        return next(req)\n      },\n      next => req => {\n        return next(req).then(res => {\n          if (res.json.error) {\n            alert(res.json.error) // TODO x5000 Transfer error to server, possibly\n            if (res.json.error == 'Authentication Failed') {\n              // When authentication fails, alert user and log out\n              var loc = window.location\n              var host = loc.protocol + '//' + loc.hostname + ':' + loc.port\n\n              postXHR(\n                host + '/auth/logout',\n                {},\n                () => {\n                  alert('Your account could not be found. You have been logged out.')\n                  location.replace(location.href)\n                },\n                () => {\n                  alert(\n                    'Your account could not be found. An attempt has been made to log you out, which did not succeed.',\n                  )\n                  location.replace(location.href)\n                },\n              )\n            }\n          } else if (res.json.errors)\n            alert('GraphQL errors occurred! TODO: x2000 provide error handling')\n          return res\n        })\n      },\n    ],\n    {\n      disableBatchQuery: true,\n    },\n  ),\n)\n\nfunction logPageView() {\n  // TODO: code to react to page changes. Most probably this should be moved to settings to enable google analytics, CRM, etc.\n}\n\nIsomorphicRelay.injectPreparedData(relay, data)\nconst rootElement = document.getElementById('root')\n\nmatch({ routes, history: browserHistory }, (error, redirectLocation, renderProps) => {\n  setTimeout(\n    () =>\n      IsomorphicRouter.prepareInitialRender(relay, renderProps).then(props => {\n        ReactDOM.render(\n          <Wrapper>\n            <Router {...props} onUpdate={logPageView} />\n          </Wrapper>,\n          rootElement,\n        )\n      }),\n    window.process.env.NODE_ENV == 'development' ? 2000 : 0,\n  ) // TODO x0100 Look at newer versions of webpack https://github.com/AndriyShepitsen/realsiterMaster/issues/51\n})\n"]}