{"version":3,"sources":["../../../webapp/scripts/ViewportDimensions.js"],"names":["SMALL","MEDIUM","LARGE","ViewportDimensions","removeComponent","component","subscribedComponents","delete","handle_onResize","totalWidth","window","innerWidth","totalHeight","innerHeight","muiSize","navDrawerIsDocked","contentWidth","changesMade","viewportDimensions","viewportDimensionsVersion","dimensionsSubscribed","mustUpdate","dimension","forceUpdate","Map","dimensionName","subscriptionInfo","get","set","self","componentWillUnmount","currentFunction","bind","dimensionValue","Error"],"mappings":"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","file":"ViewportDimensions.js","sourcesContent":["// @flow\n\n\nexport const SMALL = 1\nexport const MEDIUM = 2\nexport const LARGE = 3\n\n\nexport default class ViewportDimensions {\n\n  subscribedComponents: Map < Object, Object > ;\n  viewportDimensionsVersion: number;\n  viewportDimensions: Object;\n\n  constructor() {\n\n    this.subscribedComponents = new Map()\n\n    this.viewportDimensionsVersion = 1\n    this.viewportDimensions = {\n      muiSize: 0,\n      totalWidth: 0,\n      totalHeight: 0,\n      contentWidth: 0,\n    }\n  }\n\n  get( component: Object, dimensionName: string ) {\n\n    // Mark that the component is being rendered with the current version\n    component.viewportDimensionsVersion = this.viewportDimensionsVersion\n\n    // Is the object subscribed? If not, it should be\n    let subscriptionInfo = this.subscribedComponents.get( component )\n    if( subscriptionInfo == null ) {\n\n      // Add component to subscriptions dictionary\n      subscriptionInfo = {}\n      this.subscribedComponents.set( component, subscriptionInfo )\n\n      const self = this\n\n      // Make sure component unsubscribes when destroyed\n      if( component.componentWillUnmount ) {\n        const currentFunction = component.componentWillUnmount.bind( component )\n\n        component.componentWillUnmount = ( () => {\n\n          self.removeComponent( component )\n          currentFunction()\n        } )\n      } else\n        component.componentWillUnmount = () => {\n\n          self.removeComponent( component )\n        }\n    }\n\n    // Make sure it is subscribed for the right setting\n    subscriptionInfo[ dimensionName ] = true\n\n    // Now that the configuration is current, get the setting value\n    let dimensionValue = this.viewportDimensions[ dimensionName ]\n    if( dimensionValue == null )\n      throw new Error( \"Could not find viewport dimension named \" + dimensionName )\n\n    return dimensionValue\n  }\n\n  removeComponent = ( component: Object ) => {\n\n    this.subscribedComponents.delete( component )\n  }\n\n  handle_onResize = () => {\n\n    const totalWidth = window.innerWidth\n    const totalHeight = window.innerHeight\n\n    let muiSize\n    if( totalWidth >= 992 )\n      muiSize = LARGE\n    else if( totalWidth >= 768 )\n      muiSize = MEDIUM\n    else // totalWidth < 768\n      muiSize = SMALL\n\n    let navDrawerIsDocked = false\n    let contentWidth = totalWidth\n    if( muiSize === LARGE ) {\n\n      navDrawerIsDocked = true\n      contentWidth -= 256 // TODO x0100 Make it a setting\n    }\n\n    // Record what changes were made to only notify the necessary components\n    const changesMade = {}\n\n    if( muiSize !== this.viewportDimensions.muiSize ) {\n\n      changesMade.muiSize = true\n      this.viewportDimensions.muiSize = muiSize\n    }\n\n    if( totalWidth !== this.viewportDimensions.totalWidth ) {\n\n      changesMade.totalWidth = true\n      this.viewportDimensions.totalWidth = totalWidth\n    }\n\n    if( totalHeight !== this.viewportDimensions.totalHeight ) {\n\n      changesMade.totalHeight = true\n      this.viewportDimensions.totalHeight = totalHeight\n    }\n\n    if( contentWidth !== this.viewportDimensions.contentWidth ) {\n\n      changesMade.contentWidth = true\n      this.viewportDimensions.contentWidth = contentWidth\n    }\n\n    const viewportDimensionsVersion = ++this.viewportDimensionsVersion\n\n    // Update all subscribed components\n    for( let [ component, dimensionsSubscribed ] of this.subscribedComponents ) {\n\n\n      if( component.viewportDimensionsVersion != viewportDimensionsVersion ) {\n\n        component.viewportDimensionsVersion = viewportDimensionsVersion\n\n        // Did the component subscribe to the changes that were actually made?\n        let mustUpdate = false\n        for( let dimension in dimensionsSubscribed )\n          if( changesMade[ dimension ] ) {\n            mustUpdate = true\n            break\n          }\n\n        // Re-render component if it subscribed to any of the changes\n        if( mustUpdate )\n          component.forceUpdate()\n      }\n    }\n  }\n}\n"]}