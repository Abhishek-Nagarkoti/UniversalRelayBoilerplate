{"version":3,"sources":["../../webapp/renderOnServer.js"],"names":["serveFailure","require","load","isoVars","JSON","stringify","httpError500FileName","resolve","__dirname","httpError404FileName","type","res","message","err","log","status","sendFile","req","next","assetsPath","siteInformation","process","env","NODE_ENV","isSiteBuilderDisabled","inEditingMode","configurationAsObject","version","host","HOST","port_webpack","PORT_WEBPACK","routes","location","originalUrl","error","redirectLocation","renderProps","redirect","pathname","search","reunderOnServerCorrectRequest","objectManager","setSiteInformation","then","codeFoundriesInjected","user","getOneObject","id","getViewerUserId","networkLayer","NetworkLayer","schema","rootValue","onError","errors","request","render","data","props","userAgent","headers","md","innerWidth","phone","tablet","global","window","isomorphicResponse","reactOutput","renderToString","helmet","rewind","preloadedData","replace","title","meta","link","backgroundColor","palette","backCanvas","viewportBackgroundColor","isomorphicVars","appData","prepareData","catch"],"mappings":"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","file":"renderOnServer.js","sourcesContent":["// @flow\n\nimport Helmet from 'react-helmet'\nimport IsomorphicRouter from 'isomorphic-relay-router'\nimport MobileDetect from 'mobile-detect'\nimport path from 'path'\nimport React from 'react'\nimport ReactDOMServer from 'react-dom/server'\nimport RelayLocalSchema from 'relay-local-schema'\nimport { match } from 'react-router'\n\nimport { getUserByCookie, serveAuthenticationFailed } from '../server/checkCredentials'\nimport isomorphicVars from '../configuration/webapp/scripts/isomorphicVars'\nimport log from '../server/log'\nimport ObjectManager from '../graphql/ObjectManager'\nimport muiTheme from '../configuration/webapp/muiTheme'\nimport routes from '../configuration/webapp/routes'\nimport { version } from '../configuration/package'\nimport schema from '../graphql/schema' // Schema for GraphQL server\nimport { getSiteInformation } from '../configuration/webapp/siteSettings'\nimport Wrapper from '../configuration/webapp/components/Wrapper'\n\n// Read environment\nrequire('dotenv').load()\n\n// Load up isomorphic vars here, for server rendering\nconst isoVars = JSON.stringify(isomorphicVars())\n\nconst httpError500FileName = path.resolve(__dirname, '../configuration/server/httpError/500.html')\nconst httpError404FileName = path.resolve(__dirname, '../configuration/server/httpError/404.html')\n\nexport function serveFailure(type, res, message, err) {\n  log.log(type, 'Server error: ' + message, err)\n  res.status(500).sendFile(httpError500FileName)\n}\n\nexport default async (req, res, next) => {\n  let assetsPath\n\n  const siteInformation = await getSiteInformation(req, res)\n  if (siteInformation) {\n    if (process.env.NODE_ENV === 'production') {\n      assetsPath = siteInformation.isSiteBuilderDisabled || siteInformation.inEditingMode\n        ? // When editing in production, use the assets with the configuration readign code intact (built when cutting a site version)\n          `/assets/${version}`\n        : // When in production mode, serve the assets compiled by factory's publisher\n          `/assets-site/${version}.${siteInformation.configurationAsObject.version}`\n    } else {\n      // When in development, always go to webpack\n      const host = process.env.HOST\n      const port_webpack = process.env.PORT_WEBPACK\n      assetsPath = `http://${host}:${port_webpack}/${version}`\n    }\n\n    match({ routes, location: req.originalUrl }, (error, redirectLocation, renderProps) => {\n      if (error) next(error)\n      else if (redirectLocation)\n        res.redirect(302, redirectLocation.pathname + redirectLocation.search)\n      else if (renderProps)\n        reunderOnServerCorrectRequest(req, res, next, assetsPath, renderProps, siteInformation)\n      else res.status(404).sendFile(httpError404FileName)\n    })\n  } // If siteInformation was null, an error response has already been given\n}\n\nfunction reunderOnServerCorrectRequest(req, res, next, assetsPath, renderProps, siteInformation) {\n  // Create individual object manager for each request\n  const objectManager = new ObjectManager()\n\n  // Place site builder configuration into object manager\n  objectManager.setSiteInformation(siteInformation)\n\n  getUserByCookie(objectManager, req, res)\n    .then(() => {\n      // Inject request information in res\n      res.codeFoundriesInjected = {\n        user: objectManager.getOneObject('User', {\n          id: objectManager.getViewerUserId(),\n        }),\n      }\n    })\n    .then(() => {\n      try {\n        const networkLayer = new RelayLocalSchema.NetworkLayer({\n          schema,\n          rootValue: objectManager,\n          onError: (errors, request) =>\n            serveFailure('error', res, 'Local network layer GraphQL failure', {\n              errors,\n              request,\n            }),\n        })\n\n        function render({ data, props }) {\n          try {\n            const userAgent = req.headers['user-agent']\n\n            // Also, set width to emulate phone, tablet or desktop\n            const md = new MobileDetect(userAgent)\n\n            let innerWidth\n            if (md.phone()) innerWidth = 700\n            else if (md.tablet())\n              // Will qualify as SMALL\n              innerWidth = 900 // Will qualify as MEDIUM\n            else innerWidth = 1100 // Will qualify as LARGE\n\n            // The rendering code is not multithreded, so it is OK to set these to global\n            global.window = { innerWidth: innerWidth }\n            global.location = { pathname: req.originalUrl }\n\n            // Get the react output HTML\n            const isomorphicResponse = IsomorphicRouter.render(props)\n            const reactOutput = ReactDOMServer.renderToString(\n              <Wrapper userAgent={userAgent}>\n                {isomorphicResponse}\n              </Wrapper>,\n            )\n            const helmet = Helmet.rewind()\n\n            res.render(path.resolve(__dirname, 'renderOnServer.ejs'), {\n              preloadedData: JSON.stringify(data).replace(/\\//g, '\\\\/'),\n              assetsPath: assetsPath,\n              reactOutput,\n              title: helmet.title,\n              meta: helmet.meta,\n              link: helmet.link,\n              backgroundColor: muiTheme.palette.backCanvas.viewportBackgroundColor,\n              isomorphicVars: isoVars,\n              configurationAsObject: JSON.stringify(\n                siteInformation.inEditingMode || process.env.NODE_ENV == 'development'\n                  ? siteInformation.configurationAsObject\n                  : {\n                      // TODO 0x0050 Mask configurationAsObject.serverData\n                      appData: siteInformation.configurationAsObject.appData,\n                    },\n              ),\n              NODE_ENV: process.env.NODE_ENV,\n            })\n          } catch (err) {\n            serveFailure('error', res, 'renderOnServer render funcion failed', err)\n          }\n        }\n\n        IsomorphicRouter.prepareData(renderProps, networkLayer).then(render, next)\n      } catch (err) {\n        serveFailure('error', res, 'renderOnServer failed', err)\n      }\n    })\n    .catch(error => serveAuthenticationFailed(req, res, error, false))\n}\n"]}