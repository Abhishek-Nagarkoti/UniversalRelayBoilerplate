{"version":3,"sources":["../../../webapp/components/ResponsiveContentArea.jsx"],"names":["ResponsiveContentArea","styles","root","paddingTop","desktopKeylineIncrement","minHeight","content","margin","desktopGutter","contentWhenMedium","muiSize","context","rbContext","viewportDimensions","get","getStyles","prepareStyles","muiTheme","props","children","Component","contextTypes","PropTypes","object"],"mappings":";;AAEA,4B;AACA,mD;;AAEA,iE;;AAEqBA,qB;;;;;;AAMP;AACV,GAAMC,QAAS;AACbC,KAAM;AACJC,WAAY,kBAAQC,uBADhB;AAEJC,UAAW,GAFP,CADO;;AAKbC,QAAS;AACPC,OAAQ,kBAAQC,aADT,CALI;;AAQbC,kBAAmB;AACjBF,OAAW,kBAAQC,aAAR,CAAwB,CAAnC,OAA0C,kBAAQA,aAAR,CAAwB,CAAlE,KADiB,CARN,CAAf;;;;AAaA,GAAME,SAAU,KAAKC,OAAL,CAAaC,SAAb,CAAuBC,kBAAvB,CAA0CC,GAA1C,CAA8C,IAA9C,CAAoD,SAApD,CAAhB;AACA,GAAIJ,sCAAsBA,mCAA1B;AACET,OAAOK,OAAP,CAAiB,SAAcL,OAAOK,OAArB,CAA8BL,OAAOQ,iBAArC,CAAjB;;AAEF,MAAOR,OAAP;AACD,C;;AAEQ;AACP,GAAMA,QAAS,KAAKc,SAAL,EAAf,CADO;AAECC,aAFD,CAEmB,KAAKL,OAAL,CAAaM,QAFhC,CAECD,aAFD;;AAIP;AACE,qCAAK,MAAOA,cAAcf,OAAOC,IAArB,CAAZ;AACE,qCAAK,MAAOc,cAAcf,OAAOK,OAArB,CAAZ;AACG,KAAKY,KAAL,CAAWC,QADd,CADF,CADF;;;;AAOD,C,mCAtCgD,gBAAMC,S,EAApCpB,qB,CACZqB,Y,CAAe,CACpBJ,SAAU,gBAAMK,SAAN,CAAgBC,MADN,CAEpBX,UAAW,gBAAMU,SAAN,CAAgBC,MAFP,C,iBADHvB,qB","file":"ResponsiveContentArea.js","sourcesContent":["// @flow\n\nimport React from 'react'\nimport spacing from 'material-ui/styles/spacing'\n\nimport { LARGE, MEDIUM } from '../scripts/ViewportDimensions'\n\nexport default class ResponsiveContentArea extends React.Component {\n  static contextTypes = {\n    muiTheme: React.PropTypes.object,\n    rbContext: React.PropTypes.object,\n  }\n\n  getStyles() {\n    const styles = {\n      root: {\n        paddingTop: spacing.desktopKeylineIncrement,\n        minHeight: 400,\n      },\n      content: {\n        margin: spacing.desktopGutter,\n      },\n      contentWhenMedium: {\n        margin: `${spacing.desktopGutter * 2}px ${spacing.desktopGutter * 3}px`,\n      },\n    }\n\n    const muiSize = this.context.rbContext.viewportDimensions.get(this, 'muiSize')\n    if (muiSize === MEDIUM || muiSize === LARGE)\n      styles.content = Object.assign(styles.content, styles.contentWhenMedium)\n\n    return styles\n  }\n\n  render() {\n    const styles = this.getStyles()\n    const { prepareStyles } = this.context.muiTheme\n\n    return (\n      <div style={prepareStyles(styles.root)}>\n        <div style={prepareStyles(styles.content)}>\n          {this.props.children}\n        </div>\n      </div>\n    )\n  }\n}\n"]}