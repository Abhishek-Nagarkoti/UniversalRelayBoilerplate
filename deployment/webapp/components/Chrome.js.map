{"version":3,"sources":["../../../webapp/components/Chrome.jsx"],"names":["Chrome","props","context","_handle_onTouchTap_NavigationToggle","_handle_RequestChangeNavDrawer","state","navDrawerIsOpen","setState","open","_handle_onChangeList_AppNavDrawer","event","value","router","push","styles","appBar","position","zIndex","muiTheme","top","viewport","paddingLeft","minHeight","navDrawer","viewportContainer","backgroundColor","rawTheme","palette","backCanvas","viewportBackgroundColor","getStyles","showMenuIconButton","rbContext","viewportDimensions","get","Viewer","children","location","Component","contextTypes","PropTypes","object","isRequired","createContainer","fragments","getFragment"],"mappings":"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","file":"Chrome.js","sourcesContent":["// @flow\n\nimport AppBar from 'material-ui/AppBar'\nimport React from 'react'\nimport Relay from 'react-relay'\n\nimport AppNavDrawer from './AppNavDrawer'\nimport ChromeHelmet from '../../configuration/webapp/components/ChromeHelmet'\nimport ChromeRightIcon from '../../configuration/webapp/components/ChromeRightIcon'\nimport Footer from '../../configuration/webapp/components/Footer'\nimport { MainScreenTitle } from '../../configuration/webapp/components/ChromeSettings'\nimport { LARGE } from '../scripts/ViewportDimensions'\n\n//\n\nclass Chrome extends React.Component {\n  state: {\n    navDrawerIsOpen: boolean,\n  }\n\n  static contextTypes = {\n    muiTheme: React.PropTypes.object,\n    router: React.PropTypes.object.isRequired,\n    rbContext: React.PropTypes.object,\n  }\n\n  constructor(props, context) {\n    super(props, context)\n\n    this.state = {\n      navDrawerIsOpen: false,\n    }\n  }\n\n  _handle_onTouchTap_NavigationToggle = () => {\n    this._handle_RequestChangeNavDrawer(!this.state.navDrawerIsOpen)\n  }\n\n  _handle_RequestChangeNavDrawer = open => {\n    this.setState({ navDrawerIsOpen: open })\n  }\n\n  _handle_onChangeList_AppNavDrawer = (event, value) => {\n    this.context.router.push(value)\n    this.setState({ navDrawerIsOpen: false })\n  }\n\n  getStyles() {\n    const styles = {\n      appBar: {\n        position: 'fixed',\n        zIndex: this.context.muiTheme.zIndex.appBar + 1,\n        top: 0,\n      },\n      viewport: {\n        paddingLeft: 0,\n        minHeight: 500,\n      },\n      navDrawer: {},\n      viewportContainer: {\n        backgroundColor: this.context.muiTheme.rawTheme.palette.backCanvas.viewportBackgroundColor,\n      },\n    }\n\n    return styles\n  }\n\n  render() {\n    const styles = this.getStyles()\n\n    let { navDrawerIsOpen } = this.state\n\n    let showMenuIconButton = true\n\n    if (this.context.rbContext.viewportDimensions.get(this, 'muiSize') === LARGE) {\n      navDrawerIsOpen = true\n      showMenuIconButton = false\n\n      styles.navDrawer.zIndex = styles.appBar.zIndex - 1\n      styles.appBar.paddingLeft = 276\n      styles.viewport.paddingLeft = 256\n    }\n\n    return (\n      <div style={styles.viewportContainer}>\n        <ChromeHelmet />\n        <AppBar\n          onLeftIconButtonTouchTap={this._handle_onTouchTap_NavigationToggle}\n          title={MainScreenTitle}\n          zDepth={0}\n          iconElementRight={<ChromeRightIcon Viewer={this.props.Viewer} />}\n          style={styles.appBar}\n          showMenuIconButton={showMenuIconButton}\n        />\n        <div style={styles.viewport}>\n          {this.props.children}\n        </div>\n        <AppNavDrawer\n          Viewer={this.props.Viewer}\n          style={styles.navDrawer}\n          location={location}\n          docked={true}\n          onRequestChangeNavDrawer={this._handle_RequestChangeNavDrawer}\n          onChangeList={this._handle_onChangeList_AppNavDrawer}\n          open={navDrawerIsOpen}\n        />\n        <Footer Viewer={this.props.Viewer} />\n      </div>\n    )\n  }\n}\n\n//\n\n// It is important to retrieve UserToken2, since it is used in client.js\nexport default Relay.createContainer(Chrome, {\n  fragments: {\n    Viewer: () => Relay.QL`\n      fragment on Viewer {\n        User_IsAnonymous,\n        UserToken2,\n        ${ChromeRightIcon.getFragment('Viewer')},\n        ${AppNavDrawer.getFragment('Viewer')},\n        ${Footer.getFragment('Viewer')},\n      }\n    `,\n  },\n})\n"]}