{"version":3,"sources":["../../../webapp/components/Wrapper.jsx"],"names":["Wrapper","props","context","handle_onResize","rbContext","viewportDimensions","muiTheme","userAgent","navigator","children","Component","childContextTypes","PropTypes","object"],"mappings":";;AAEA,2D;AACA,4B;AACA,wD;;AAEA,6D;AACA,iE;;;;AAIqBA,O;;;;;;;;;AASnB,iBAAYC,KAAZ,CAAwBC,OAAxB,CAAsC;AAC9BD,KAD8B,CACvBC,OADuB;;;;;;;;;;;;;;;;;;;;;;;;;AA0BtCC,eA1BsC,CA0BpB,UAAM;AACtB,MAAKC,SAAL,CAAeC,kBAAf,CAAkCF,eAAlC;AACD,CA5BqC,CAMpC,MAAKC,SAAL,CAAiB,EAAjB,CAEA,MAAKA,SAAL,CAAeC,kBAAf,CAAoC,kCAApC,CAEA,MAAKC,QAAL,CAAgB,6CAAsB,CACpCC,UAAW,MAAKN,KAAL,CAAWM,SAAX,EAAwBC,UAAUD,SADT,CAAtB,CAAhB,CAVoC,aAarC,C,iFAEmB,CAClB,KAAKJ,eAAL,GACD,C,yDAEiB,CAChB,MAAO,CACLG,SAAU,KAAKA,QADV,CAELF,UAAW,KAAKA,SAFX,CAAP,CAID,C;;AAMQ;AACP;AACE,4DAAe,OAAO,QAAtB,CAA+B,SAAU,KAAKD,eAA9C;AACG,KAAKF,KAAL,CAAWQ,QADd,CADF;;;AAKD,C,qBA7CkC,gBAAMC,S,EAAtBV,O,CAIZW,iB,CAAoB,CACzBL,SAAU,gBAAMM,SAAN,CAAgBC,MADD,CAEzBT,UAAW,gBAAMQ,SAAN,CAAgBC,MAFF,C,iBAJRb,O","file":"Wrapper.js","sourcesContent":["// @flow\n\nimport getMuiTheme from 'material-ui/styles/getMuiTheme'\nimport React from 'react'\nimport EventListener from 'react-event-listener'\n\nimport muiTheme from '../../configuration/webapp/muiTheme'\nimport ViewportDimensions from '../scripts/ViewportDimensions'\n\n//\n\nexport default class Wrapper extends React.Component {\n  muiTheme: Object\n  rbContext: Object\n\n  static childContextTypes = {\n    muiTheme: React.PropTypes.object,\n    rbContext: React.PropTypes.object,\n  }\n\n  constructor(props: any, context: any) {\n    super(props, context)\n\n    // TODO x0100 If a property for innerWidth is provided, use it for the initial request\n\n    // Descendants can add other items to rbContext\n    this.rbContext = {}\n\n    this.rbContext.viewportDimensions = new ViewportDimensions()\n\n    this.muiTheme = getMuiTheme(muiTheme, {\n      userAgent: this.props.userAgent || navigator.userAgent,\n    })\n  }\n\n  componentDidMount() {\n    this.handle_onResize() // Will populate the data structures for dimensions with current values\n  }\n\n  getChildContext() {\n    return {\n      muiTheme: this.muiTheme,\n      rbContext: this.rbContext,\n    }\n  }\n\n  handle_onResize = () => {\n    this.rbContext.viewportDimensions.handle_onResize()\n  }\n\n  render() {\n    return (\n      <EventListener target=\"window\" onResize={this.handle_onResize}>\n        {this.props.children}\n      </EventListener>\n    )\n  }\n}\n"]}