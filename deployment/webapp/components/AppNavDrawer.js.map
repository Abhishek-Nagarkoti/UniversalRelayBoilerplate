{"version":3,"sources":["../../../webapp/components/AppNavDrawer.jsx"],"names":["AppNavDrawer","_handle_onTouchTap_Drawer","context","router","push","props","onRequestChangeNavDrawer","location","docked","onChangeList","open","style","drawerContainerStyle","zIndex","drawer","backgroundColor","muiTheme","rawTheme","palette","backCanvas","viewportBackgroundColor","navDrawerBoxShadow","boxShadow","cursor","fontSize","color","textFullWhite","lineHeight","desktopKeylineIncrement","fontWeight","fontWeightLight","primary1Color","paddingLeft","desktopGutter","marginBottom","Viewer","pathname","Component","contextTypes","PropTypes","object","isRequired","createContainer","fragments","getFragment"],"mappings":";;AAEA,0C;AACA;AACA,4B;AACA,uC;;AAEA;AACA,sE;;AAEMA,Y;;;;;;AAMJC,yB,CAA4B,UAAM;AAChC,MAAKC,OAAL,CAAaC,MAAb,CAAoBC,IAApB,CAAyB,GAAzB;AACA,MAAKC,KAAL,CAAWC,wBAAX,CAAoC,KAApC;AACD,C;;AAEQ;AAC2E,KAAKD,KADhF,CACCE,QADD,QACCA,QADD,CACWC,MADX,QACWA,MADX,CACmBF,wBADnB,QACmBA,wBADnB,CAC6CG,YAD7C,QAC6CA,YAD7C,CAC2DC,IAD3D,QAC2DA,IAD3D,CACiEC,KADjE,QACiEA,KADjE;;AAGP,GAAMC,sBAAuB;AAC3BC,OAAQ,eAAOC,MAAP,CAAgB,GADG;AAE3BC,gBAAiB,KAAKb,OAAL,CAAac,QAAb,CAAsBC,QAAtB,CAA+BC,OAA/B,CAAuCC,UAAvC,CAAkDC,uBAFxC,CAA7B;;;;AAMA,GAAI,CAAC,KAAKlB,OAAL,CAAac,QAAb,CAAsBC,QAAtB,CAA+BC,OAA/B,CAAuCC,UAAvC,CAAkDE,kBAAvD;AACET,qBAAqBU,SAArB,CAAiC,CAAjC;;AAEF;AACE;AACE,MAAOX,KADT;AAEE,OAAQH,MAFV;AAGE,KAAME,IAHR;AAIE,gBAAiBJ,wBAJnB;AAKE,eAAgBM,oBALlB;;AAOE;AACE,MAAO;AACLW,OAAQ,SADH;AAELC,SAAU,EAFL;AAGLC,MAAO,mBAAWC,aAHb;AAILC,WAAe,gBAAQC,uBAAvB,KAJK;AAKLC,WAAY,mBAAWC,eALlB;AAMLf,gBAAiB,KAAKb,OAAL,CAAac,QAAb,CAAsBE,OAAtB,CAA8Ba,aAN1C;AAOLC,YAAa,gBAAQC,aAPhB;AAQLC,aAAc,CART,CADT;;AAWE,WAAY,KAAKjC,yBAXnB,+BAPF;;;;AAsBE,iDAAS,OAAQ,KAAKI,KAAL,CAAW8B,MAA5B,CAAoC,MAAO5B,SAAS6B,QAApD,CAA8D,SAAU3B,YAAxE,EAtBF,CADF;;;AA0BD,C,0BAjDwB,gBAAM4B,S,EAA3BrC,Y,CACGsC,Y,CAAe,CACpBtB,SAAU,gBAAMuB,SAAN,CAAgBC,MAAhB,CAAuBC,UADb,CAEpBtC,OAAQ,gBAAMoC,SAAN,CAAgBC,MAAhB,CAAuBC,UAFX,C;;;AAmDT,qBAAMC,eAAN,CAAsB1C,YAAtB,CAAoC;AACjD2C,UAAW;AACTR,OAAQ;;AAEF,kBAAQS,WAAR,CAAoB,QAApB,CAFE,GADC,CADsC,CAApC,C","file":"AppNavDrawer.js","sourcesContent":["// @flow\n\nimport Drawer from 'material-ui/Drawer'\nimport { spacing, typography, zIndex } from 'material-ui/styles'\nimport React from 'react'\nimport Relay from 'react-relay'\n\nimport { NavMenuTitle } from '../../configuration/webapp/components/ChromeSettings'\nimport NavMenu from '../../configuration/webapp/components/NavMenu'\n\nclass AppNavDrawer extends React.Component {\n  static contextTypes = {\n    muiTheme: React.PropTypes.object.isRequired,\n    router: React.PropTypes.object.isRequired,\n  }\n\n  _handle_onTouchTap_Drawer = () => {\n    this.context.router.push('/')\n    this.props.onRequestChangeNavDrawer(false)\n  }\n\n  render() {\n    const { location, docked, onRequestChangeNavDrawer, onChangeList, open, style } = this.props\n\n    const drawerContainerStyle = {\n      zIndex: zIndex.drawer - 100,\n      backgroundColor: this.context.muiTheme.rawTheme.palette.backCanvas.viewportBackgroundColor,\n    }\n\n    // If we do not want box shadow, override mui Drawer setting\n    if (!this.context.muiTheme.rawTheme.palette.backCanvas.navDrawerBoxShadow)\n      drawerContainerStyle.boxShadow = 0\n\n    return (\n      <Drawer\n        style={style}\n        docked={docked}\n        open={open}\n        onRequestChange={onRequestChangeNavDrawer}\n        containerStyle={drawerContainerStyle}\n      >\n        <div\n          style={{\n            cursor: 'pointer',\n            fontSize: 24,\n            color: typography.textFullWhite,\n            lineHeight: `${spacing.desktopKeylineIncrement}px`,\n            fontWeight: typography.fontWeightLight,\n            backgroundColor: this.context.muiTheme.palette.primary1Color,\n            paddingLeft: spacing.desktopGutter,\n            marginBottom: 8,\n          }}\n          onTouchTap={this._handle_onTouchTap_Drawer}\n        >\n          {NavMenuTitle}\n        </div>\n        <NavMenu Viewer={this.props.Viewer} value={location.pathname} onChange={onChangeList} />\n      </Drawer>\n    )\n  }\n}\n\nexport default Relay.createContainer(AppNavDrawer, {\n  fragments: {\n    Viewer: () => Relay.QL`\n      fragment on Viewer {\n        ${NavMenu.getFragment('Viewer')},\n      }\n    `,\n  },\n})\n"]}