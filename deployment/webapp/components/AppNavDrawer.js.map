{"version":3,"sources":["../../../webapp/components/AppNavDrawer.jsx"],"names":["AppNavDrawer","_handle_onTouchTap_Drawer","context","router","push","props","onRequestChangeNavDrawer","location","docked","onChangeList","open","style","drawerContainerStyle","zIndex","drawer","backgroundColor","muiTheme","rawTheme","palette","backCanvas","viewportBackgroundColor","navDrawerBoxShadow","boxShadow","cursor","fontSize","color","textFullWhite","lineHeight","desktopKeylineIncrement","fontWeight","fontWeightLight","primary1Color","paddingLeft","desktopGutter","marginBottom","Viewer","pathname","Component","contextTypes","PropTypes","object","isRequired","createContainer","fragments","getFragment"],"mappings":";;;AAGA,0C;AACA;AACA,4B;AACA,uC;;AAEA;AACA,sE;;;AAGMA,Y;;;;;;;AAOJC,yB,CAA4B,UAAM;;AAEhC,MAAKC,OAAL,CAAaC,MAAb,CAAoBC,IAApB,CAA0B,GAA1B;AACA,MAAKC,KAAL,CAAWC,wBAAX,CAAqC,KAArC;AACD,C;;AAEQ;;;;;;;;;AASH,KAAKD,KATF,CAGLE,QAHK,QAGLA,QAHK,CAILC,MAJK,QAILA,MAJK,CAKLF,wBALK,QAKLA,wBALK,CAMLG,YANK,QAMLA,YANK,CAOLC,IAPK,QAOLA,IAPK,CAQLC,KARK,QAQLA,KARK;;AAWP,GAAMC,sBAAuB;AAC3BC,OAAQ,eAAOC,MAAP,CAAgB,GADG;AAE3BC,gBAAiB,KAAKb,OAAL,CAAac,QAAb,CAAsBC,QAAtB,CAA+BC,OAA/B,CAAuCC,UAAvC,CAAkDC,uBAFxC,CAA7B;;;;;AAOA,GAAG,CAAC,KAAKlB,OAAL,CAAac,QAAb,CAAsBC,QAAtB,CAA+BC,OAA/B,CAAuCC,UAAvC,CAAkDE,kBAAtD;AACAT,qBAAqBU,SAArB,CAAiC,CAAjC;;AAEA;AACE;AACE,MAAOX,KADT;AAEE,OAAQH,MAFV;AAGE,KAAME,IAHR;AAIE,gBAAkBJ,wBAJpB;AAKE,eAAiBM,oBALnB;;AAOE;AACE,MAAQ;AACNW,OAAQ,SADF;AAENC,SAAU,EAFJ;AAGNC,MAAO,mBAAWC,aAHZ;AAINC,WAAe,gBAAQC,uBAAvB,KAJM;AAKNC,WAAY,mBAAWC,eALjB;AAMNf,gBAAiB,KAAKb,OAAL,CAAac,QAAb,CAAsBE,OAAtB,CAA8Ba,aANzC;AAONC,YAAa,gBAAQC,aAPf;AAQNC,aAAc,CARR,CADV;;AAWE,WAAa,KAAKjC,yBAXpB,+BAPF;;;;AAsBE;AACE,OAAS,KAAKI,KAAL,CAAW8B,MADtB;AAEE,MAAQ5B,SAAS6B,QAFnB;AAGE,SAAW3B,YAHb,EAtBF,CADF;;;;AA8BD,C,0BAhEwB,gBAAM4B,S,EAA3BrC,Y,CAEGsC,Y,CAAe,CACpBtB,SAAU,gBAAMuB,SAAN,CAAgBC,MAAhB,CAAuBC,UADb,CAEpBtC,OAAQ,gBAAMoC,SAAN,CAAgBC,MAAhB,CAAuBC,UAFX,C;;;;AAkET,qBAAMC,eAAN,CAAuB1C,YAAvB,CAAqC;AAClD2C,UAAW;AACTR,OAAQ;;AAED,kBAAQS,WAAR,CAAqB,QAArB,CAFC,GADC,CADuC,CAArC,C","file":"AppNavDrawer.js","sourcesContent":["// @flow\n/* eslint react/prop-types: 0 */\n\nimport Drawer from 'material-ui/Drawer'\nimport { spacing, typography, zIndex } from 'material-ui/styles'\nimport React from 'react'\nimport Relay from 'react-relay'\n\nimport { NavMenuTitle } from '../../configuration/webapp/components/ChromeSettings'\nimport NavMenu from '../../configuration/webapp/components/NavMenu'\n\n\nclass AppNavDrawer extends React.Component {\n\n  static contextTypes = {\n    muiTheme: React.PropTypes.object.isRequired,\n    router: React.PropTypes.object.isRequired\n  }\n\n  _handle_onTouchTap_Drawer = () => {\n\n    this.context.router.push( '/' )\n    this.props.onRequestChangeNavDrawer( false )\n  }\n\n  render() {\n\n    const {\n      location,\n      docked,\n      onRequestChangeNavDrawer,\n      onChangeList,\n      open,\n      style,\n    } = this.props\n\n    const drawerContainerStyle = {\n      zIndex: zIndex.drawer - 100,\n      backgroundColor: this.context.muiTheme.rawTheme.palette.backCanvas.viewportBackgroundColor,\n\n    }\n\n    // If we do not want box shadow, override mui Drawer setting\n    if(!this.context.muiTheme.rawTheme.palette.backCanvas.navDrawerBoxShadow)\n    drawerContainerStyle.boxShadow = 0\n\n    return(\n      <Drawer\n        style={style}\n        docked={docked}\n        open={open}\n        onRequestChange={ onRequestChangeNavDrawer }\n        containerStyle={ drawerContainerStyle }\n      >\n        <div\n          style={ {\n            cursor: 'pointer',\n            fontSize: 24,\n            color: typography.textFullWhite,\n            lineHeight: `${spacing.desktopKeylineIncrement}px`,\n            fontWeight: typography.fontWeightLight,\n            backgroundColor: this.context.muiTheme.palette.primary1Color,\n            paddingLeft: spacing.desktopGutter,\n            marginBottom: 8,\n          } }\n          onTouchTap={ this._handle_onTouchTap_Drawer }\n        >\n          { NavMenuTitle }\n        </div>\n        <NavMenu\n          Viewer={ this.props.Viewer }\n          value={ location.pathname }\n          onChange={ onChangeList }\n        />\n      </Drawer>\n    )\n  }\n}\n\n\nexport default Relay.createContainer( AppNavDrawer, {\n  fragments: {\n    Viewer: () => Relay.QL `\n      fragment on Viewer {\n        ${ NavMenu.getFragment( 'Viewer' ) },\n      }\n    `,\n  },\n} )\n"]}