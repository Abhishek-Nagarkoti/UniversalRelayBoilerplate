{"version":3,"sources":["../../server/graphQL.js"],"names":["router","use","json","req","res","next","objectManager","setRequest","siteInformation","setSiteInformation","a_User","codeFoundriesInjected","user","schema","rootValue","pretty","graphiql"],"mappings":";;AAEA,uC;AACA,gC;AACA,+C;;AAEA;AACA;AACA,oD;AACA,uD;AACA;AACA,yC;;;AAGA,mD;AACA,2D;;;AAGA,GAAMA,QAAS,uBAAf;;;AAGAA,OAAOC,GAAP,CAAW,qBAAWC,IAAX,EAAX;AACAF,OAAOC,GAAP,CAAW,SAACE,GAAD,CAAMC,GAAN,CAAWC,IAAX,QAAoB,+BAAiBF,GAAjB,CAAsBC,GAAtB,CAA2BC,IAA3B,sCAApB,EAAX;;AAEAL,OAAOC,GAAP,CAAW,GAAX,CAAgB,iBAAOE,GAAP,CAAYC,GAAZ,CAAiBC,IAAjB;;AAERC,aAFQ,CAEQ,6BAFR;AAGdA,cAAcC,UAAd,CAAyBJ,GAAzB,CAA8BC,GAA9B,EAHc;;;AAMgB,qCAAmBD,GAAnB,CAAwBC,GAAxB,CANhB,SAMRI,eANQ;AAOVA,eAPU;AAQZF,cAAcG,kBAAd,CAAiCD,eAAjC,EARY;;;AAWW,sCAAgBF,aAAhB,CAA+BH,GAA/B,CAAoCC,GAApC,CAXX,UAWJM,MAXI;;AAaVN,IAAIO,qBAAJ,CAA4B,CAAEC,KAAMF,MAAR,CAA5B,CAbU;AAcJ,0CAAoBA,MAApB,CAA4BP,GAA5B,CAAiCC,GAAjC,CAdI;;AAgBV,6BAAY,UAAM;AAChB,MAAO;AACLS,uBADK;AAELC,UAAWR,aAFN;AAGLS,OAAQ,IAHH;AAILC,SAAU,IAJL,CAAP;;AAMD,CAPD,EAOGb,GAPH,CAOQC,GAPR,CAOaC,IAPb,EAhBU;;AAyBV,gDAA0BF,GAA1B,CAA+BC,GAA/B,aAAyC,IAAzC,EAzBU,mEAAhB,E;;;;;AA8BeJ,M","file":"graphQL.js","sourcesContent":["// @flow\n\nimport bodyParser from 'body-parser'\nimport express from 'express'\nimport graphQLHTTP from 'express-graphql'\n\nimport { getUserByCookie, verifyUserAuthToken, serveAuthenticationFailed } from './checkCredentials'\nimport { getSiteInformation } from '../configuration/webapp/siteSettings'\nimport logServerRequest from './logServerRequest'\nimport ObjectManager from '../graphql/ObjectManager'\nimport { requestLoggerGraphQL } from '../configuration/server/requestLoggers'\nimport schema from '../graphql/schema' // Schema for GraphQL server\n\n// Guarantee that all object registrations and schema definitions are executed\nimport _schemas_system from '../graphql/model/_schemas'\nimport _schemas from '../configuration/graphql/_schemas'\n\n// Create router for GraphQL\nconst router = express()\n\n// Set up parser and logging\nrouter.use(bodyParser.json())\nrouter.use((req, res, next) => logServerRequest(req, res, next, requestLoggerGraphQL))\n\nrouter.use('/', async (req, res, next) => {\n  // Create individual object manager for each request\n  const objectManager = new ObjectManager()\n  objectManager.setRequest(req, res)\n\n  // Collect site builder configuration and place it into object manager\n  const siteInformation = await getSiteInformation(req, res)\n  if (siteInformation) {\n    objectManager.setSiteInformation(siteInformation)\n\n    try {\n      const a_User = await getUserByCookie(objectManager, req, res)\n\n      res.codeFoundriesInjected = { user: a_User }\n      await verifyUserAuthToken(a_User, req, res)\n\n      graphQLHTTP(() => {\n        return {\n          schema: schema,\n          rootValue: objectManager,\n          pretty: true,\n          graphiql: true,\n        }\n      })(req, res, next)\n    } catch (err) {\n      serveAuthenticationFailed(req, res, err, true)\n    }\n  }\n}) // router.use\n\nexport default router\n"]}