{"version":3,"sources":["../../server/graphQL.js"],"names":["router","use","json","req","res","next","objectManager","setRequest","a_User","codeFoundriesInjected","user","schema","rootValue","pretty","graphiql"],"mappings":";;AAEA,uC;AACA,gC;AACA,+C;;AAEA;AACA,oD;AACA,uD;AACA;AACA,yC;;;AAGA,mD;AACA,2D;;;;AAIA,GAAMA,QAAS,uBAAf;;;AAGAA,OAAOC,GAAP,CAAY,qBAAWC,IAAX,EAAZ;AACAF,OAAOC,GAAP,CAAY,SAAEE,GAAF,CAAOC,GAAP,CAAYC,IAAZ,QAAsB,+BAAkBF,GAAlB,CAAuBC,GAAvB,CAA4BC,IAA5B,sCAAtB,EAAZ;;AAEAL,OAAOC,GAAP,CAAY,GAAZ,CAAiB,iBAAOE,GAAP,CAAYC,GAAZ,CAAiBC,IAAjB;;AAEPC,aAFO,CAES,6BAFT;AAGbA,cAAcC,UAAd,CAA0BJ,GAA1B,EAHa;;;AAMU,sCAAiBG,aAAjB,CAAgCH,GAAhC,CAAqCC,GAArC,CANV,SAMLI,MANK;;AAQXJ,IAAIK,qBAAJ,CAA4B,CAAEC,KAAMF,MAAR,CAA5B,CARW;AASL,0CAAqBA,MAArB,CAA6BL,GAA7B,CAAkCC,GAAlC,CATK;;AAWX,6BAAa,UAAM;AACjB,MAAQ;AACNO,uBADM;AAENC,UAAWN,aAFL;AAGNO,OAAQ,IAHF;AAINC,SAAU,IAJJ,CAAR;;AAMD,CAPD,EAOKX,GAPL,CAOUC,GAPV,CAOeC,IAPf,EAXW;;;AAqBX,gDAA2BF,GAA3B,CAAgCC,GAAhC,aAA0C,IAA1C,EArBW,mEAAjB,E;;;;AAyBeJ,M","file":"graphQL.js","sourcesContent":["// @flow weak\n\nimport bodyParser from 'body-parser'\nimport express from 'express'\nimport graphQLHTTP from 'express-graphql'\n\nimport { getUserByCookie, verifyUserAuthToken, serveAuthenticationFailed } from './checkCredentials.js'\nimport logServerRequest from './logServerRequest'\nimport ObjectManager from '../graphql/ObjectManager'\nimport { requestLoggerGraphQL } from '../configuration/server/requestLoggers'\nimport schema from '../graphql/schema' // Schema for GraphQL server\n\n// Guarantee that all object registrations and schema definitions are executed\nimport _schemas_system from '../graphql/model/_schemas'\nimport _schemas from '../configuration/graphql/_schemas'\n\n\n// Create router for GraphQL\nconst router = express()\n\n// Set up parser and logging\nrouter.use( bodyParser.json() )\nrouter.use( ( req, res, next ) => logServerRequest( req, res, next, requestLoggerGraphQL ) )\n\nrouter.use( '/', async( req, res, next ) => {\n    // create individual object manager for each request\n    const objectManager = new ObjectManager()\n    objectManager.setRequest( req )\n\n    try {\n      const a_User = await getUserByCookie( objectManager, req, res )\n\n      res.codeFoundriesInjected = { user: a_User }\n      await verifyUserAuthToken( a_User, req, res )\n\n      graphQLHTTP( () => {\n        return( {\n          schema: schema,\n          rootValue: objectManager,\n          pretty: true,\n          graphiql: true,\n        } )\n      } )( req, res, next )\n\n    } catch( err ) {\n      serveAuthenticationFailed( req, res, err, true )\n    }\n  } ) // router.use\n\nexport default router\n"]}