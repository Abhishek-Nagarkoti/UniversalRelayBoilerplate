{"version":3,"sources":["../../server/server.js"],"names":["require","load","startupInformation","name","version","NODE_ENV","env","HOST","PORT","PUBLIC_URL","process_title","title","process_pid","pid","local_ip","log","router","use","req","res","next","setHeader","set","oneYear","static","resolve","__dirname","maxAge","initializePersisters","listen","localhostDevelopmentServer","console","localIPDevelopmentServer"],"mappings":";;;AAGA;;AAEA,gC;AACA,2C;AACA,wC;AACA,0B;AACA,gC;;AAEA,4B;AACA,iD;AACA,kC;AACA,kC;AACA,0B;AACA,uD;AACA;AACA,0E;AACA,wC;;;AAGAA,QAAQ,QAAR,EAAkBC,IAAlB;;AAEA,GAAMC,oBAAqB;AACzBC,kBADyB;AAEzBC,wBAFyB;;AAIzBC,SAAU,kBAAQC,GAAR,CAAYD,QAJG;AAKzBE,KAAM,kBAAQD,GAAR,CAAYC,IALO;AAMzBC,KAAM,kBAAQF,GAAR,CAAYE,IANO;AAOzBC,WAAY,kBAAQH,GAAR,CAAYG,UAPC;;AASzBC,cAAe,kBAAQC,KATE;AAUzBC,YAAa,kBAAQC,GAVI;AAWzBC,SAAU,0BAXe,CAA3B;;;;AAeA,cAAIC,GAAJ,CAAQ,MAAR,CAAgB,sBAAhB,CAAwCb,kBAAxC;;;AAGA,GAAMc,QAAS,uBAAf;;;AAGAA,OAAOC,GAAP,CAAW,SAASC,GAAT,CAAcC,GAAd,CAAmBC,IAAnB,CAAyB;;AAElCD,IAAIE,SAAJ,CAAc,6BAAd,CAA6C,kBAAQf,GAAR,CAAYG,UAAzD;;AAEAU,IAAIE,SAAJ,CAAc,8BAAd,CAA8C,wCAA9C;;AAEAF,IAAIE,SAAJ,CAAc,8BAAd,CAA8C,+BAA9C;;;AAGAF,IAAIE,SAAJ,CAAc,kCAAd,CAAkD,IAAlD;;AAEAD;AACD,CAZD;;AAcAJ,OAAOM,GAAP,CAAW,aAAX,CAA0B,UAA1B;AACAN,OAAOM,GAAP,CAAW,cAAX,CAA2B,KAA3B;;AAEAN,OAAOC,GAAP,CAAW,2BAAX;AACAD,OAAOC,GAAP,CAAW,4BAAX;;;AAGAD,OAAOC,GAAP,CAAW,UAAX;;;AAGAD,OAAOC,GAAP,CAAW,OAAX;;;AAGAD,OAAOC,GAAP,CAAW,UAAX;;;AAGA,GAAIM,SAAU,IAAM,QAApB;AACAP,OAAOC,GAAP,CAAW,kBAAQO,MAAR,CAAe,eAAKC,OAAL,CAAaC,UAAY,aAAzB,CAAf,CAAwD,CAAEC,OAAQJ,OAAV,CAAxD,CAAX;;;AAGA,+BAAiBP,MAAjB;;;AAGAA,OAAOC,GAAP,CAAW,IAAX;;;AAGA,wBAAcW,oBAAd,CAAmC,KAAnC,CAA0C,UAAM;;;AAG9C,GAAI,kBAAQtB,GAAR,CAAYD,QAAZ,EAAwB,YAA5B,CAA0CW,OAAOa,MAAP,CAAc,kBAAQvB,GAAR,CAAYE,IAA1B,CAAgC,kBAAQF,GAAR,CAAYC,IAA5C,EAA1C;AACK;;AAEH,GAAMuB,4BAA6B,uBAAnC;AACAA,2BAA2Bb,GAA3B,CAA+BD,MAA/B;AACAc,2BAA2BD,MAA3B,CAAkC,kBAAQvB,GAAR,CAAYE,IAA9C,CAAoD,WAApD;AACAuB,QAAQhB,GAAR,CAAY,+CAAZ;;;AAGA,GAAI,kBAAQT,GAAR,CAAYC,IAAZ,EAAoB,WAAxB,CAAqC;AACnC,GAAMyB,0BAA2B,uBAAjC;AACAA,yBAAyBf,GAAzB,CAA6BD,MAA7B;AACAgB,yBAAyBH,MAAzB,CAAgC,kBAAQvB,GAAR,CAAYE,IAA5C,CAAkD,kBAAQF,GAAR,CAAYC,IAA9D;AACAwB,QAAQhB,GAAR,CAAY,uCAAyC,kBAAQT,GAAR,CAAYC,IAAjE;AACD;AACF;AACF,CAnBD","file":"server.js","sourcesContent":["// @flow\n\n// In order to use ES7 async/await\nimport 'babel-polyfill'\n\nimport express from 'express'\nimport cookieParser from 'cookie-parser'\nimport compression from 'compression'\nimport path from 'path'\nimport process from 'process'\n\nimport auth from './auth' // Authentication server\nimport getLocalIP from '../scripts/getLocalIP'\nimport graphql from './graphQL' // GraphQL server\nimport healthz from './healthz' // Health check endpoint server\nimport log from './log'\nimport ObjectManager from '../graphql/ObjectManager'\nimport { name, version } from '../configuration/package'\nimport serverExtensions from '../configuration/server/serverExtensions'\nimport webapp from '../webapp/server' // Isomorphic React server\n\n// Read environment\nrequire('dotenv').load()\n\nconst startupInformation = {\n  name: name,\n  version: version,\n\n  NODE_ENV: process.env.NODE_ENV,\n  HOST: process.env.HOST,\n  PORT: process.env.PORT,\n  PUBLIC_URL: process.env.PUBLIC_URL,\n\n  process_title: process.title,\n  process_pid: process.pid,\n  local_ip: getLocalIP(),\n}\n\n// Log starting application, also print to console\nlog.log('info', 'Starting application', startupInformation)\n\n// Main router\nconst router = express()\n\n// Add headers\nrouter.use(function(req, res, next) {\n  // Website you wish to allow to connect\n  res.setHeader('Access-Control-Allow-Origin', process.env.PUBLIC_URL)\n  // Request methods you wish to allow\n  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, PATCH, DELETE')\n  // Request headers you wish to allow\n  res.setHeader('Access-Control-Allow-Headers', 'X-Requested-With,content-type')\n  // Set to true if you need the website to include cookies in the requests sent\n  // to the API (e.g. in case you use sessions)\n  res.setHeader('Access-Control-Allow-Credentials', true)\n  // Pass to next layer of middleware\n  next()\n})\n\nrouter.set('trust proxy', 'loopback')\nrouter.set('x-powered-by', false)\n\nrouter.use(compression())\nrouter.use(cookieParser())\n\n// GraphQL server\nrouter.use('/graphql', graphql)\n\n// Authentication server\nrouter.use('/auth', auth)\n\n// Health check endpoint\nrouter.use('/healthz', healthz)\n\n// Static assets server\nlet oneYear = 365 * 86400000\nrouter.use(express.static(path.resolve(__dirname + '/../public/'), { maxAge: oneYear }))\n\n// Add extensions - custom configurations\nserverExtensions(router)\n\n// Application with routes\nrouter.use('/*', webapp)\n\n// Set up all persisters\nObjectManager.initializePersisters(false, () => {\n  // Serve - work differently in development and production. In production only the\n  // specified host serves\n  if (process.env.NODE_ENV == 'production') router.listen(process.env.PORT, process.env.HOST)\n  else {\n    // Development server - localhost\n    const localhostDevelopmentServer = express()\n    localhostDevelopmentServer.use(router)\n    localhostDevelopmentServer.listen(process.env.PORT, '127.0.0.1')\n    console.log('☄  DEVELOPMENT. Server listening on 127.0.0.1')\n\n    // Development server - on a specific IP, if different from localhost\n    if (process.env.HOST != '127.0.0.1') {\n      const localIPDevelopmentServer = express()\n      localIPDevelopmentServer.use(router)\n      localIPDevelopmentServer.listen(process.env.PORT, process.env.HOST)\n      console.log('☄  DEVELOPMENT. Server listening on ' + process.env.HOST)\n    }\n  }\n})\n"]}