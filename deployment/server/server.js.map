{"version":3,"sources":["../../server/server.js"],"names":["require","load","startupInformation","name","version","NODE_ENV","env","HOST","PORT","PUBLIC_URL","process_title","title","process_pid","pid","local_ip","log","router","use","req","res","next","setHeader","set","oneYear","static","resolve","__dirname","maxAge","initializePersisters","listen","localhostDevelopmentServer","console","localIPDevelopmentServer"],"mappings":";;;AAGA;;AAEA,gC;AACA,2C;AACA,wC;AACA,0B;AACA,gC;;AAEA,4B;AACA,iD;AACA,kC;AACA,kC;AACA,0B;AACA,uD;AACA;AACA,0E;AACA,wC;;;;AAIAA,QAAS,QAAT,EAAoBC,IAApB;;;AAGA,GAAMC,oBAAqB;AACzBC,kBADyB;AAEzBC,wBAFyB;;AAIzBC,SAAU,kBAAQC,GAAR,CAAYD,QAJG;AAKzBE,KAAM,kBAAQD,GAAR,CAAYC,IALO;AAMzBC,KAAM,kBAAQF,GAAR,CAAYE,IANO;AAOzBC,WAAY,kBAAQH,GAAR,CAAYG,UAPC;;AASzBC,cAAe,kBAAQC,KATE;AAUzBC,YAAa,kBAAQC,GAVI;AAWzBC,SAAU,0BAXe,CAA3B;;;;AAeA,cAAIC,GAAJ,CAAS,MAAT,CAAiB,sBAAjB,CAAyCb,kBAAzC;;;AAGA,GAAMc,QAAS,uBAAf;;;AAGAA,OAAOC,GAAP,CAAY,SAAWC,GAAX,CAAgBC,GAAhB,CAAqBC,IAArB,CAA4B;;AAEtCD,IAAIE,SAAJ,CAAe,6BAAf,CAA8C,kBAAQf,GAAR,CAAYG,UAA1D;;AAEAU,IAAIE,SAAJ,CAAe,8BAAf,CAA+C,wCAA/C;;AAEAF,IAAIE,SAAJ,CAAe,8BAAf,CAA+C,+BAA/C;;;AAGAF,IAAIE,SAAJ,CAAe,kCAAf,CAAmD,IAAnD;;AAEAD;AACD,CAZD;;AAcAJ,OAAOM,GAAP,CAAY,aAAZ,CAA2B,UAA3B;AACAN,OAAOM,GAAP,CAAY,cAAZ,CAA4B,KAA5B;;AAEAN,OAAOC,GAAP,CAAY,2BAAZ;AACAD,OAAOC,GAAP,CAAY,4BAAZ;;;AAGAD,OAAOC,GAAP,CAAY,UAAZ;;;AAGAD,OAAOC,GAAP,CAAY,OAAZ;;;AAGAD,OAAOC,GAAP,CAAY,UAAZ;;;AAGA,GAAIM,SAAU,IAAM,QAApB;AACAP,OAAOC,GAAP,CAAY,kBAAQO,MAAR,CAAgB,eAAKC,OAAL,CAAcC,UAAY,aAA1B,CAAhB,CAA2D,CAAEC,OAAQJ,OAAV,CAA3D,CAAZ;;;AAGA,+BAAkBP,MAAlB;;;AAGAA,OAAOC,GAAP,CAAY,IAAZ;;;;AAIA,wBAAcW,oBAAd,CAAoC,KAApC,CAA2C,UAAM;;;;AAI/C,GAAI,kBAAQtB,GAAR,CAAYD,QAAZ,EAAwB,YAA5B;AACEW,OAAOa,MAAP,CAAe,kBAAQvB,GAAR,CAAYE,IAA3B,CAAiC,kBAAQF,GAAR,CAAYC,IAA7C,EADF;AAEK;;;AAGH,GAAMuB,4BAA6B,uBAAnC;AACAA,2BAA2Bb,GAA3B,CAAgCD,MAAhC;AACAc,2BAA2BD,MAA3B,CAAmC,kBAAQvB,GAAR,CAAYE,IAA/C,CAAqD,WAArD;AACAuB,QAAQhB,GAAR,CAAa,+CAAb;;;AAGA,GAAI,kBAAQT,GAAR,CAAYC,IAAZ,EAAoB,WAAxB,CAAsC;;AAEpC,GAAMyB,0BAA2B,uBAAjC;AACAA,yBAAyBf,GAAzB,CAA8BD,MAA9B;AACAgB,yBAAyBH,MAAzB,CAAiC,kBAAQvB,GAAR,CAAYE,IAA7C,CAAmD,kBAAQF,GAAR,CAAYC,IAA/D;AACAwB,QAAQhB,GAAR,CAAa,uCAAyC,kBAAQT,GAAR,CAAYC,IAAlE;AACD;AACF;;AAEF,CAxBD","file":"server.js","sourcesContent":["// @flow weak\n\n// In order to use ES7 async/await\nimport 'babel-polyfill'\n\nimport express from 'express'\nimport cookieParser from 'cookie-parser'\nimport compression from 'compression'\nimport path from 'path'\nimport process from 'process'\n\nimport auth from './auth' // Authentication server\nimport getLocalIP from '../scripts/getLocalIP'\nimport graphql from './graphQL' // GraphQL server\nimport healthz from './healthz' // Health check endpoint server\nimport log from './log'\nimport ObjectManager from '../graphql/ObjectManager'\nimport { name, version } from '../configuration/package'\nimport serverExtensions from '../configuration/server/serverExtensions'\nimport webapp from '../webapp/server' // Isomorphic React server\n\n\n// Read environment\nrequire( 'dotenv' ).load()\n\n\nconst startupInformation = {\n  name: name,\n  version: version,\n\n  NODE_ENV: process.env.NODE_ENV,\n  HOST: process.env.HOST,\n  PORT: process.env.PORT,\n  PUBLIC_URL: process.env.PUBLIC_URL,\n\n  process_title: process.title,\n  process_pid: process.pid,\n  local_ip: getLocalIP(),\n}\n\n// Log starting application, also print to console\nlog.log( 'info', 'Starting application', startupInformation )\n\n// Main router\nconst router = express()\n\n// Add headers\nrouter.use( function ( req, res, next ) {\n  // Website you wish to allow to connect\n  res.setHeader( 'Access-Control-Allow-Origin', process.env.PUBLIC_URL )\n  // Request methods you wish to allow\n  res.setHeader( 'Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, PATCH, DELETE' )\n  // Request headers you wish to allow\n  res.setHeader( 'Access-Control-Allow-Headers', 'X-Requested-With,content-type' )\n  // Set to true if you need the website to include cookies in the requests sent\n  // to the API (e.g. in case you use sessions)\n  res.setHeader( 'Access-Control-Allow-Credentials', true )\n  // Pass to next layer of middleware\n  next()\n} )\n\nrouter.set( 'trust proxy', 'loopback' )\nrouter.set( 'x-powered-by', false )\n\nrouter.use( compression() )\nrouter.use( cookieParser() )\n\n// GraphQL server\nrouter.use( '/graphql', graphql )\n\n// Authentication server\nrouter.use( '/auth', auth )\n\n// Health check endpoint\nrouter.use( '/healthz', healthz )\n\n// Static assets server\nlet oneYear = 365 * 86400000\nrouter.use( express.static( path.resolve( __dirname + '/../public/' ), { maxAge: oneYear } ) )\n\n// Add extensions - custom configurations\nserverExtensions( router )\n\n// Application with routes\nrouter.use( '/*', webapp )\n\n\n// Set up all persisters\nObjectManager.initializePersisters( false, () => {\n\n  // Serve - work differently in development and production. In production only the\n  // specified host serves\n  if( process.env.NODE_ENV == 'production' )\n    router.listen( process.env.PORT, process.env.HOST )\n  else {\n\n    // Development server - localhost\n    const localhostDevelopmentServer = express()\n    localhostDevelopmentServer.use( router )\n    localhostDevelopmentServer.listen( process.env.PORT, '127.0.0.1' )\n    console.log( \"☄  DEVELOPMENT. Server listening on 127.0.0.1\" )\n\n    // Development server - on a specific IP, if different from localhost\n    if( process.env.HOST != '127.0.0.1' ) {\n\n      const localIPDevelopmentServer = express()\n      localIPDevelopmentServer.use( router )\n      localIPDevelopmentServer.listen( process.env.PORT, process.env.HOST )\n      console.log( \"☄  DEVELOPMENT. Server listening on \" + process.env.HOST )\n    }\n  }\n\n} )\n"]}