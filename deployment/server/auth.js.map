{"version":3,"sources":["../../server/auth.js"],"names":["require","load","auth","use","json","req","res","next","getObjectManager","siteInformation","objectManager","setSiteInformation","post","User_AccountName","body","toLowerCase","User_AccountPassword","then","getObjectList","arr_Users","length","status","error","a_User","compare","err","User_AccountPasswordIsCorrect","codeFoundriesInjected","user","token","encode","user_id","id","process","env","JWT_SECRET","cookie","httpOnly","success","UserToken2","catch","reason","User_site_id","site_id","Promise","reject","hash","resolve","accountNameIsValidEmail","User_Email","Math","random","toString","substring","User_DisplayName","add","getOneObject","expires","Date"],"mappings":"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","file":"auth.js","sourcesContent":["// @flow\n\nimport bcrypt from 'bcrypt'\nimport bodyParser from 'body-parser'\nimport express from 'express'\nimport jwt from 'jwt-simple'\n\nimport authExtensions from '../configuration/server/authExtensions'\nimport delayPromise from '../scripts/delayPromise'\nimport getNewUser from '../configuration/graphql/model/getNewUser'\nimport logServerRequest from './logServerRequest'\nimport ObjectManager from '../graphql/ObjectManager'\nimport { requestLoggerAuth } from '../configuration/server/requestLoggers'\nimport { getSiteInformation } from '../configuration/webapp/siteSettings'\n\nimport { validateEmail } from '../scripts/validation'\n\n// Read environment\nrequire('dotenv').load()\n\nconst auth = express()\n\nauth.use(bodyParser.json())\nauth.use((req, res, next) => logServerRequest(req, res, next, requestLoggerAuth))\n\nasync function getObjectManager(req, res) {\n  const siteInformation = await getSiteInformation(req, res)\n\n  // Create individual object manager for each request\n  const objectManager = new ObjectManager()\n\n  // Place site builder configuration into object manager\n  objectManager.setSiteInformation(siteInformation)\n\n  return objectManager\n}\n\nauth.post('/login', async (req, res) => {\n  const objectManager = await getObjectManager(req, res)\n\n  let User_AccountName = req.body.User_AccountName.toLowerCase()\n  let User_AccountPassword = req.body.User_AccountPassword\n\n  delayPromise(1000) // Wait for a second to slow down a possible potential force attack\n    .then(() =>\n      objectManager.getObjectList('User', {\n        User_AccountName: User_AccountName,\n      }),\n    )\n    .then(arr_Users => {\n      if (arr_Users.length == 0) res.status(401).json({ error: 'ðŸ’”  Incorrect user' })\n      else {\n        const a_User = arr_Users[0]\n\n        bcrypt.compare(User_AccountPassword, a_User.User_AccountPassword, function(\n          err,\n          User_AccountPasswordIsCorrect,\n        ) {\n          if (User_AccountPasswordIsCorrect) {\n            res.codeFoundriesInjected = { user: a_User }\n\n            // User has authenticated correctly thus we create a JWT token\n            var token = jwt.encode({ user_id: a_User.id }, process.env.JWT_SECRET)\n\n            res.cookie('UserToken1', token, { httpOnly: true })\n            res.json({ success: true, UserToken2: a_User.UserToken2 })\n          } else res.status(401).json({ error: 'ðŸ’”  Incorrect password' })\n        })\n      }\n    })\n    .catch(reason => {\n      res.status(401).json({ error: reason })\n    })\n})\n\nauth.post('/createuser', async (req, res) => {\n  const objectManager = await getObjectManager(req, res)\n\n  let User_AccountName = req.body.User_AccountName.toLowerCase()\n  let User_AccountPassword = req.body.User_AccountPassword\n  objectManager\n    .getObjectList('User', {\n      User_site_id: objectManager.siteInformation.site_id,\n      User_AccountName: User_AccountName,\n    })\n    .then(arr_Users => {\n      if (arr_Users.length > 0) return Promise.reject('ðŸ’”  User account already exists')\n      else\n        return new Promise(resolve => {\n          bcrypt.hash(User_AccountPassword, 8, (err, User_AccountPassword) =>\n            resolve(User_AccountPassword),\n          )\n        }).then(User_AccountPassword => {\n          // If account name looks like email address, use it as email\n          const accountNameIsValidEmail = validateEmail(User_AccountName)\n          const User_Email = accountNameIsValidEmail ? User_AccountName : ''\n\n          const a_User = Object.assign(getNewUser(objectManager.siteInformation.site_id), {\n            UserToken2:\n              Math.random().toString(36).substring(2) + Math.random().toString(36).substring(2),\n            User_AccountName: User_AccountName,\n            User_AccountPassword: User_AccountPassword,\n            User_DisplayName: User_AccountName,\n            User_Email: User_Email,\n          })\n          return objectManager.add('User', a_User)\n        })\n    })\n    .then(user_id =>\n      objectManager.getOneObject('User', {\n        id: user_id,\n        User_site_id: objectManager.siteInformation.site_id,\n      }),\n    )\n    .then(a_User => {\n      res.codeFoundriesInjected = { user: a_User }\n\n      // User has been created thus we create a JWT token\n      var token = jwt.encode({ user_id: a_User.id }, process.env.JWT_SECRET)\n\n      res.cookie('UserToken1', token, { httpOnly: true })\n      res.json({ success: true })\n    })\n    .catch(reason => {\n      res.status(401).json({ error: '' + reason })\n    })\n})\n\nauth.post('/logout', (req, res) => {\n  res.cookie('UserToken1', '', { httpOnly: true, expires: new Date(1) })\n  res.json({ success: true })\n})\n\n// Add extensions - custom configurations\nauthExtensions(auth)\n\nexport default auth\n"]}