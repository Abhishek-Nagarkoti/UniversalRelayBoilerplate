{"version":3,"sources":["../../server/checkCredentials.js"],"names":["getUserByCookie","verifyUserAuthToken","serveAuthenticationFailed","require","load","objectManager","req","user_id","uuidNull","cookies","UserToken1","length","decoded","decode","process","env","JWT_SECRET","uuidFromString","err","Promise","reject","getOneObject","id","then","a_User","setViewerUserId","request_UserToken2","get","UserToken2","USER_TOKEN_2_BYPASS_IP","ip","resolve","httpError403FileName","__dirname","res","error","respondWithJSON","headers","connection","remoteAddress","requestDetails","query","body","log","cookie","httpOnly","expires","Date","status","send","sendFile"],"mappings":";;;;;;;;;;;;;AAagBA,e,CAAAA,e;;;;;;;;;;;;;;;;;;;;;;;;AAwBAC,mB,CAAAA,mB;;;;;;;;;;;;;;;AAeAC,yB,CAAAA,yB,CAlDhB,qC,mDACA,0B,yCAEA,2E,iEACA,0B,0HAIAC,QAAS,QAAT,EAAoBC,IAApB,GAGO,QAASJ,gBAAT,CAA0BK,aAA1B,CAAyCC,GAAzC,CAA+C,CAEpD,GAAIC,SAAU,2BAAiBC,QAAjB,EAAd,CAEA,GAAI,CACF,GAAIF,IAAIG,OAAJ,CAAYC,UAAhB,CACE,GAAIJ,IAAIG,OAAJ,CAAYC,UAAZ,CAAuBC,MAAvB,CAAgC,EAApC,CAAyC,CACvC,GAAIC,SAAU,oBAAIC,MAAJ,CAAYP,IAAIG,OAAJ,CAAYC,UAAxB,CAAoCI,QAAQC,GAAR,CAAYC,UAAhD,CAAd,CACAT,QAAU,2BAAiBU,cAAjB,CAAiCL,QAAQL,OAAzC,CAAV,CACD,CACJ,CAAC,MAAOW,GAAP,CAAa,CACb,MAAOC,SAAQC,MAAR,CAAgB,+BAAiCF,GAAjD,CAAP,CACD,CAED,MAAOb,eAAcgB,YAAd,CAA4B,MAA5B,CAAoC,CAAEC,GAAIf,OAAN,CAApC,EACJgB,IADI,CACE,SAAEC,MAAF,CAAc,CACnB,GAAIA,MAAJ,CAAa,CACXnB,cAAcoB,eAAd,CAA+BlB,OAA/B,EACA,MAAOiB,OAAP,CACD,CAHD,IAIE,OAAOL,SAAQC,MAAR,CAAgB,gBAAhB,CAAP,CACH,CAPI,CAAP,CAQD,CAEM,QAASnB,oBAAT,CAA8BuB,MAA9B,CAAsClB,GAAtC,CAA4C,CAEjD,GAAI,CAACkB,MAAL,CACE,MAAOL,SAAQC,MAAR,CAAgB,gBAAhB,CAAP,CADF,IAEK,CACH,GAAMM,oBAAqBpB,IAAIqB,GAAJ,CAAS,YAAT,CAA3B,CACA,GAAID,oBAAsBF,OAAOI,UAA7B,EAA2Cd,QAAQC,GAAR,CAAYc,sBAAZ,EAAsCvB,IAAIwB,EAAzF,CACE,MAAOX,SAAQY,OAAR,CAAiBP,OAAOF,EAAxB,CAAP,CADF,IAGE,OAAOH,SAAQC,MAAR,CAAgB,kCAAoCI,OAAOI,UAA3C,CAAwD,aAAxD,CAAwEF,kBAAxF,CAAP,CACH,CACF,CAED,GAAMM,sBAAuB,eAAKD,OAAL,CAAcE,SAAd,CAAyB,4CAAzB,CAA7B,CAEO,QAAS/B,0BAAT,CAAoCI,GAApC,CAAyC4B,GAAzC,CAA8CC,KAA9C,CAAqDC,eAArD,CAAuE;;;AAG5E,GAAIN,IAAKxB,IAAI+B,OAAJ,CAAa,WAAb,GAA8B/B,IAAIgC,UAAJ,CAAeC,aAAtD;;AAEA,GAAMC,gBAAiB;AACrBH,QAAS/B,IAAI+B,OADQ;AAErB5B,QAASH,IAAIG,OAFQ;AAGrBqB,GAAIA,EAHiB;AAIrBW,MAAOnC,IAAIoC,IAJU,CAAvB;;;AAOA,cAAIC,GAAJ,CAAS,MAAT,CAAiB,6BAAjB,CAAgD,CAAER,WAAF,CAASK,6BAAT,CAAhD;;AAEAN,IAAIU,MAAJ,CAAY,YAAZ,CAA0B,EAA1B,CAA8B,CAAEC,SAAU,IAAZ,CAAkBC,QAAS,GAAIC,KAAJ,CAAU,CAAV,CAA3B,CAA9B;;AAEA,GAAIX,eAAJ;AACEF,IAAIc,MAAJ,CAAY,GAAZ,EAAkBC,IAAlB,CAAwB,sCAAxB,EADF;;AAGEf,IAAIc,MAAJ,CAAY,GAAZ,EAAkBE,QAAlB,CAA4BlB,oBAA5B;AACH","file":"checkCredentials.js","sourcesContent":["// @flow weak\n\nimport jwt from 'jwt-simple'\nimport path from 'path';\n\nimport defaultPersister from '../configuration/graphql/defaultPersister'\nimport log from './log'\n\n\n// Read environment\nrequire( 'dotenv' ).load()\n\n\nexport function getUserByCookie( objectManager, req ) {\n  \n  let user_id = defaultPersister.uuidNull( ) // Anonymous, unless cookie is passed\n\n  try {\n    if( req.cookies.UserToken1 )\n      if( req.cookies.UserToken1.length > 10 ) {\n        var decoded = jwt.decode( req.cookies.UserToken1, process.env.JWT_SECRET )\n        user_id = defaultPersister.uuidFromString( decoded.user_id )\n      }\n  } catch( err ) {\n    return Promise.reject( \"Could not read auth cookie. \" + err )\n  }\n\n  return objectManager.getOneObject( 'User', { id: user_id } )\n    .then( ( a_User ) => {\n      if( a_User ) {\n        objectManager.setViewerUserId( user_id )\n        return a_User\n      } else\n        return Promise.reject( \"User not found\" )\n    } )\n}\n\nexport function verifyUserAuthToken( a_User, req ) {\n\n  if( !a_User )\n    return Promise.reject( \"User not found\" )\n  else {\n    const request_UserToken2 = req.get( 'UserToken2' )\n    if( request_UserToken2 == a_User.UserToken2 || process.env.USER_TOKEN_2_BYPASS_IP == req.ip )\n      return Promise.resolve( a_User.id )\n    else\n      return Promise.reject( \"Authentication token expected: \" + a_User.UserToken2 + \", provided:\" + request_UserToken2 )\n  }\n}\n\nconst httpError403FileName = path.resolve( __dirname, '../configuration/server/httpError/403.html' )\n\nexport function serveAuthenticationFailed( req, res, error, respondWithJSON ) {\n\n  // Collect information about the request\n  var ip = req.headers[ 'x-real-ip' ] || req.connection.remoteAddress\n\n  const requestDetails = {\n    headers: req.headers,\n    cookies: req.cookies,\n    ip: ip,\n    query: req.body\n  }\n\n  log.log( 'warn', 'Checking credentials failed', { error, requestDetails } )\n\n  res.cookie( 'UserToken1', '', { httpOnly: true, expires: new Date( 1 ) } ) // Expire cookie. Only way to 'delete'\n\n  if( respondWithJSON )\n    res.status( 403 ).send( '{ \"error\": \"Authentication Failed\" }' )\n  else\n    res.status( 403 ).sendFile( httpError403FileName )\n}\n"]}